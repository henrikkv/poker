import commutative_encryption.aleo;
program mental_poker.aleo;

record Keys:
    owner as address.private;
    secret as scalar.private;
    secret_inv as scalar.private;

struct Game:
    player1 as address;
    player2 as address;
    player3 as address;
    buy_in as u64;
    state as u8;
    dealer_button as u8;
    players_out as u8;
    players_folded as u8;
    last_bet as u8;
    sb as u16;
    bb as u16;
    remaining_hands as u8;
    hands_played as u8;
    last_raise_size as u16;

struct Chips:
    player1 as u16;
    player2 as u16;
    player3 as u16;
    player1_bet as u16;
    player2_bet as u16;
    player3_bet as u16;

struct Cards:
    player1 as [group; 2u32];
    player2 as [group; 2u32];
    player3 as [group; 2u32];
    flop as [group; 3u32];
    turn as group;
    river as group;

struct RevealedCards:
    player1 as [u8; 2u32];
    player2 as [u8; 2u32];
    player3 as [u8; 2u32];
    flop as [u8; 3u32];
    turn as u8;
    river as u8;

mapping games:
    key as u32.public;
    value as Game.public;

mapping decks:
    key as u32.public;
    value as [[group; 26u32]; 2u32].public;

mapping chips:
    key as u32.public;
    value as Chips.public;

mapping cards:
    key as u32.public;
    value as Cards.public;

mapping revealed_cards:
    key as u32.public;
    value as RevealedCards.public;

function create_game:
    input r0 as u32.private;
    input r1 as [[group; 26u32]; 2u32].private;
    input r2 as scalar.private;
    input r3 as scalar.private;
    call commutative_encryption.aleo/initialize_deck into r4;
    call commutative_encryption.aleo/verify_permutation r4 r1;
    call commutative_encryption.aleo/encrypt_deck r2 r1 into r5;
    call commutative_encryption.aleo/decrypt_card r3 r5[0u32][0u32] into r6;
    assert.eq r6 r1[0u32][0u32];
    cast self.signer r2 r3 into r7 as Keys.record;
    async create_game r0 r5 self.signer into r8;
    output r7 as Keys.record;
    output r8 as mental_poker.aleo/create_game.future;

finalize create_game:
    input r0 as u32.public;
    input r1 as [[group; 26u32]; 2u32].public;
    input r2 as address.public;
    cast r2 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc 10u64 0u8 1u8 0u8 0u8 0u8 5u16 10u16 10u8 0u8 0u16 into r3 as Game;
    set r3 into games[r0];
    set r1 into decks[r0];

function join_game:
    input r0 as u32.private;
    input r1 as [[group; 26u32]; 2u32].private;
    input r2 as [[group; 26u32]; 2u32].private;
    input r3 as scalar.private;
    input r4 as scalar.private;
    call commutative_encryption.aleo/verify_permutation r1 r2;
    call commutative_encryption.aleo/encrypt_deck r3 r2 into r5;
    call commutative_encryption.aleo/decrypt_card r4 r5[0u32][0u32] into r6;
    assert.eq r6 r2[0u32][0u32];
    cast self.signer r3 r4 into r7 as Keys.record;
    async join_game r0 r1 r5 self.signer into r8;
    output r7 as Keys.record;
    output r8 as mental_poker.aleo/join_game.future;

finalize join_game:
    input r0 as u32.public;
    input r1 as [[group; 26u32]; 2u32].public;
    input r2 as [[group; 26u32]; 2u32].public;
    input r3 as address.public;
    get games[r0] into r4;
    get decks[r0] into r5;
    is.eq r5 r1 into r6;
    assert.eq r6 true;
    is.eq r4.state 0u8 into r7;
    is.eq r4.state 1u8 into r8;
    or r7 r8 into r9;
    assert.eq r9 true;
    ternary r7 r3 r4.player2 into r10;
    not r7 into r11;
    ternary r11 r3 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r12;
    ternary r7 1u8 2u8 into r13;
    cast r4.player1 r10 r12 r4.buy_in r13 r4.dealer_button 0u8 0u8 0u8 r4.sb r4.bb r4.remaining_hands 0u8 0u16 into r14 as Game;
    set r14 into games[r0];
    set r2 into decks[r0];
    branch.eq r11 false to end_then_0_0;
    sub 1000u16 r4.sb into r15;
    sub 1000u16 r4.bb into r16;
    cast r15 r16 1000u16 r4.sb r4.bb 0u16 into r17 as Chips;
    cast r2[0u32][0u32] r2[0u32][3u32] into r18 as [group; 2u32];
    cast r2[0u32][1u32] r2[0u32][4u32] into r19 as [group; 2u32];
    cast r2[0u32][2u32] r2[0u32][5u32] into r20 as [group; 2u32];
    cast r2[0u32][7u32] r2[0u32][8u32] r2[0u32][9u32] into r21 as [group; 3u32];
    cast r18 r19 r20 r21 r2[0u32][11u32] r2[0u32][13u32] into r22 as Cards;
    cast 255u8 255u8 into r23 as [u8; 2u32];
    cast 255u8 255u8 255u8 into r24 as [u8; 3u32];
    cast r23 r23 r23 r24 255u8 255u8 into r25 as RevealedCards;
    set r17 into chips[r0];
    set r22 into cards[r0];
    set r25 into revealed_cards[r0];
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;

function bet:
    input r0 as u32.private;
    input r1 as u16.private;
    async bet r0 r1 self.signer into r2;
    output r2 as mental_poker.aleo/bet.future;

finalize bet:
    input r0 as u32.public;
    input r1 as u16.public;
    input r2 as address.public;
    get games[r0] into r3;
    get chips[r0] into r4;
    is.eq r3.player1 r2 into r5;
    is.eq r3.state 5u8 into r6;
    is.eq r3.state 11u8 into r7;
    or r6 r7 into r8;
    is.eq r3.state 17u8 into r9;
    or r8 r9 into r10;
    is.eq r3.state 23u8 into r11;
    or r10 r11 into r12;
    and r5 r12 into r13;
    is.eq r3.player2 r2 into r14;
    is.eq r3.state 6u8 into r15;
    is.eq r3.state 12u8 into r16;
    or r15 r16 into r17;
    is.eq r3.state 18u8 into r18;
    or r17 r18 into r19;
    is.eq r3.state 24u8 into r20;
    or r19 r20 into r21;
    and r14 r21 into r22;
    is.eq r3.player3 r2 into r23;
    is.eq r3.state 7u8 into r24;
    is.eq r3.state 13u8 into r25;
    or r24 r25 into r26;
    is.eq r3.state 19u8 into r27;
    or r26 r27 into r28;
    is.eq r3.state 25u8 into r29;
    or r28 r29 into r30;
    and r23 r30 into r31;
    or r13 r22 into r32;
    or r32 r31 into r33;
    assert.eq r33 true;
    ternary r22 r4.player2 r4.player3 into r34;
    ternary r22 r4.player2_bet r4.player3_bet into r35;
    ternary r13 r4.player1 r34 into r36;
    ternary r13 r4.player1_bet r35 into r37;
    gte r4.player1_bet r4.player2_bet into r38;
    gte r4.player1_bet r4.player3_bet into r39;
    and r38 r39 into r40;
    gte r4.player2_bet r4.player3_bet into r41;
    ternary r41 r4.player2_bet r4.player3_bet into r42;
    ternary r40 r4.player1_bet r42 into r43;
    is.eq r43 0u16 into r44;
    is.eq r3.last_raise_size 0u16 into r45;
    ternary r45 r3.bb r3.last_raise_size into r46;
    ternary r44 r3.bb r46 into r47;
    add r43 r47 into r48;
    sub r43 r37 into r49;
    ternary r44 r3.bb r49 into r50;
    is.eq r1 r36 into r51;
    gte r1 r50 into r52;
    or r51 r52 into r53;
    assert.eq r53 true;
    add r37 r1 into r54;
    sub r36 r1 into r55;
    is.eq r55 0u16 into r56;
    gte r54 r48 into r57;
    gt r54 r43 into r58;
    not r57 into r59;
    and r58 r59 into r60;
    and r60 r56 into r61;
    is.eq r4.player1 0u16 into r62;
    and r3.players_folded 1u8 into r63;
    is.neq r63 0u8 into r64;
    or r62 r64 into r65;
    and r3.players_out 1u8 into r66;
    is.neq r66 0u8 into r67;
    or r65 r67 into r68;
    is.eq r4.player2 0u16 into r69;
    and r3.players_folded 2u8 into r70;
    is.neq r70 0u8 into r71;
    or r69 r71 into r72;
    and r3.players_out 2u8 into r73;
    is.neq r73 0u8 into r74;
    or r72 r74 into r75;
    is.eq r4.player3 0u16 into r76;
    and r3.players_folded 4u8 into r77;
    is.neq r77 0u8 into r78;
    or r76 r78 into r79;
    and r3.players_out 4u8 into r80;
    is.neq r80 0u8 into r81;
    or r79 r81 into r82;
    not r68 into r83;
    cast r83 into r84 as u8;
    not r75 into r85;
    cast r85 into r86 as u8;
    add r84 r86 into r87;
    not r82 into r88;
    cast r88 into r89 as u8;
    add r87 r89 into r90;
    gt r90 1u8 into r91;
    is.eq r90 1u8 into r92;
    lt r37 r43 into r93;
    and r92 r93 into r94;
    or r91 r94 into r95;
    assert.eq r95 true;
    cast r56 into r96 as u8;
    sub r90 r96 into r97;
    is.eq r4.player1 0u16 into r98;
    lt r4.player1_bet r43 into r99;
    and r98 r99 into r100;
    is.eq r4.player2 0u16 into r101;
    lt r4.player2_bet r43 into r102;
    and r101 r102 into r103;
    or r100 r103 into r104;
    is.eq r4.player3 0u16 into r105;
    lt r4.player3_bet r43 into r106;
    and r105 r106 into r107;
    or r104 r107 into r108;
    and r3.last_bet 1u8 into r109;
    is.neq r109 0u8 into r110;
    and r13 r110 into r111;
    and r3.last_bet 2u8 into r112;
    is.neq r112 0u8 into r113;
    and r22 r113 into r114;
    or r111 r114 into r115;
    and r3.last_bet 4u8 into r116;
    is.neq r116 0u8 into r117;
    and r31 r117 into r118;
    or r115 r118 into r119;
    is.eq r54 r43 into r120;
    is.eq r4.player1_bet r43 into r121;
    ternary r13 r120 r121 into r122;
    or r68 r122 into r123;
    is.eq r4.player2_bet r43 into r124;
    ternary r22 r120 r124 into r125;
    or r75 r125 into r126;
    is.eq r4.player3_bet r43 into r127;
    ternary r31 r120 r127 into r128;
    or r82 r128 into r129;
    and r123 r126 into r130;
    and r130 r129 into r131;
    lte r97 1u8 into r132;
    gte r54 r43 into r133;
    and r133 r131 into r134;
    lte r3.state 7u8 into r135;
    gte r3.state 11u8 into r136;
    lte r3.state 13u8 into r137;
    and r136 r137 into r138;
    gte r3.state 17u8 into r139;
    lte r3.state 19u8 into r140;
    and r139 r140 into r141;
    and r3.players_out 1u8 into r142;
    is.neq r142 0u8 into r143;
    and r3.players_out 2u8 into r144;
    is.neq r144 0u8 into r145;
    ternary r145 10u8 9u8 into r146;
    ternary r143 r146 8u8 into r147;
    ternary r145 16u8 15u8 into r148;
    ternary r143 r148 14u8 into r149;
    ternary r145 22u8 21u8 into r150;
    ternary r143 r150 20u8 into r151;
    ternary r75 28u8 27u8 into r152;
    ternary r68 r152 26u8 into r153;
    ternary r141 r151 r153 into r154;
    ternary r138 r149 r154 into r155;
    ternary r135 r147 r155 into r156;
    ternary r141 17u8 23u8 into r157;
    ternary r138 11u8 r157 into r158;
    ternary r135 5u8 r158 into r159;
    ternary r75 2u8 1u8 into r160;
    ternary r82 0u8 2u8 into r161;
    ternary r68 1u8 0u8 into r162;
    ternary r22 r161 r162 into r163;
    ternary r13 r160 r163 into r164;
    add r159 r164 into r165;
    is.eq r3.last_bet 0u8 into r166;
    or r119 r166 into r167;
    or r167 r61 into r168;
    and r108 r59 into r169;
    and r169 r119 into r170;
    or r168 r170 into r171;
    and r134 r171 into r172;
    or r132 r172 into r173;
    ternary r173 r156 r165 into r174;
    ternary r22 2u8 4u8 into r175;
    ternary r13 1u8 r175 into r176;
    ternary r57 r176 r3.last_bet into r177;
    add r4.player1_bet r4.player2_bet into r178;
    add r178 r4.player3_bet into r179;
    add r179 r1 into r180;
    ternary r13 r55 r4.player1 into r181;
    ternary r22 r55 r4.player2 into r182;
    ternary r31 r55 r4.player3 into r183;
    ternary r13 r54 r4.player1_bet into r184;
    ternary r22 r54 r4.player2_bet into r185;
    ternary r31 r54 r4.player3_bet into r186;
    cast r181 r182 r183 r184 r185 r186 into r187 as Chips;
    sub r54 r43 into r188;
    ternary r57 r188 r3.last_raise_size into r189;
    cast r3.player1 r3.player2 r3.player3 r3.buy_in r174 r3.dealer_button r3.players_out r3.players_folded r177 r3.sb r3.bb r3.remaining_hands r3.hands_played r189 into r190 as Game;
    set r187 into chips[r0];
    set r190 into games[r0];

function decrypt_hands:
    input r0 as u32.private;
    input r1 as [group; 2u32].private;
    input r2 as [group; 2u32].private;
    input r3 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r1[0u32] into r4;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r1[1u32] into r5;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r2[0u32] into r6;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r2[1u32] into r7;
    cast r4 r5 into r8 as [group; 2u32];
    cast r6 r7 into r9 as [group; 2u32];
    async decrypt_hands r0 r1 r2 r8 r9 self.signer into r10;
    cast r3.owner r3.secret r3.secret_inv into r11 as Keys.record;
    output r11 as Keys.record;
    output r10 as mental_poker.aleo/decrypt_hands.future;

finalize decrypt_hands:
    input r0 as u32.public;
    input r1 as [group; 2u32].public;
    input r2 as [group; 2u32].public;
    input r3 as [group; 2u32].public;
    input r4 as [group; 2u32].public;
    input r5 as address.public;
    get cards[r0] into r6;
    get games[r0] into r7;
    is.eq r7.player1 r5 into r8;
    is.eq r7.state 2u8 into r9;
    and r8 r9 into r10;
    is.eq r7.player2 r5 into r11;
    is.eq r7.state 3u8 into r12;
    and r11 r12 into r13;
    is.eq r7.player3 r5 into r14;
    is.eq r7.state 4u8 into r15;
    and r14 r15 into r16;
    or r10 r13 into r17;
    or r17 r16 into r18;
    assert.eq r18 true;
    is.eq r6.player2 r1 into r19;
    and r10 r19 into r20;
    is.eq r6.player3 r2 into r21;
    and r20 r21 into r22;
    is.eq r6.player1 r1 into r23;
    and r13 r23 into r24;
    is.eq r6.player3 r2 into r25;
    and r24 r25 into r26;
    or r22 r26 into r27;
    is.eq r6.player1 r1 into r28;
    and r16 r28 into r29;
    is.eq r6.player2 r2 into r30;
    and r29 r30 into r31;
    or r27 r31 into r32;
    assert.eq r32 true;
    ternary r10 r6.player1[0u32] r3[0u32] into r33;
    ternary r10 r6.player1[1u32] r3[1u32] into r34;
    cast r33 r34 into r35 as [group; 2u32];
    ternary r10 r3[0u32] r4[0u32] into r36;
    ternary r10 r3[1u32] r4[1u32] into r37;
    cast r36 r37 into r38 as [group; 2u32];
    ternary r13 r6.player2[0u32] r38[0u32] into r39;
    ternary r13 r6.player2[1u32] r38[1u32] into r40;
    cast r39 r40 into r41 as [group; 2u32];
    ternary r16 r6.player3[0u32] r4[0u32] into r42;
    ternary r16 r6.player3[1u32] r4[1u32] into r43;
    cast r42 r43 into r44 as [group; 2u32];
    cast r35 r41 r44 r6.flop r6.turn r6.river into r45 as Cards;
    and r7.players_out 1u8 into r46;
    is.neq r46 0u8 into r47;
    and r7.players_out 2u8 into r48;
    is.neq r48 0u8 into r49;
    and r7.players_out 4u8 into r50;
    is.neq r50 0u8 into r51;
    and r7.players_folded 1u8 into r52;
    is.neq r52 0u8 into r53;
    and r7.players_folded 2u8 into r54;
    is.neq r54 0u8 into r55;
    and r7.players_folded 4u8 into r56;
    is.neq r56 0u8 into r57;
    and r7.dealer_button 1u8 into r58;
    is.neq r58 0u8 into r59;
    and r7.dealer_button 2u8 into r60;
    is.neq r60 0u8 into r61;
    or r47 r53 into r62;
    ternary r61 2u8 1u8 into r63;
    or r49 r55 into r64;
    ternary r59 2u8 0u8 into r65;
    or r51 r57 into r66;
    ternary r61 0u8 1u8 into r67;
    ternary r59 2u8 r67 into r68;
    ternary r66 r67 r68 into r69;
    ternary r64 r65 r69 into r70;
    ternary r62 r63 r70 into r71;
    add 5u8 r71 into r72;
    ternary r61 4u8 1u8 into r73;
    ternary r59 2u8 r73 into r74;
    ternary r49 r72 3u8 into r75;
    ternary r51 r72 4u8 into r76;
    ternary r13 r76 r72 into r77;
    ternary r10 r75 r77 into r78;
    ternary r51 r74 r7.last_bet into r79;
    ternary r13 r79 r74 into r80;
    ternary r10 r7.last_bet r80 into r81;
    cast r7.player1 r7.player2 r7.player3 r7.buy_in r78 r7.dealer_button r7.players_out r7.players_folded r81 r7.sb r7.bb r7.remaining_hands r7.hands_played r7.last_raise_size into r82 as Game;
    set r45 into cards[r0];
    set r82 into games[r0];

function decrypt_flop:
    input r0 as u32.private;
    input r1 as [group; 3u32].private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[0u32] into r3;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[1u32] into r4;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[2u32] into r5;
    cast r3 r4 r5 into r6 as [group; 3u32];
    call commutative_encryption.aleo/to_u8 r3 into r7;
    call commutative_encryption.aleo/to_u8 r4 into r8;
    call commutative_encryption.aleo/to_u8 r5 into r9;
    cast r7 r8 r9 into r10 as [u8; 3u32];
    async decrypt_flop r0 r1 r6 r10 self.signer into r11;
    cast r2.owner r2.secret r2.secret_inv into r12 as Keys.record;
    output r12 as Keys.record;
    output r11 as mental_poker.aleo/decrypt_flop.future;

finalize decrypt_flop:
    input r0 as u32.public;
    input r1 as [group; 3u32].public;
    input r2 as [group; 3u32].public;
    input r3 as [u8; 3u32].public;
    input r4 as address.public;
    get cards[r0] into r5;
    get games[r0] into r6;
    is.eq r4 r6.player1 into r7;
    is.eq r6.state 8u8 into r8;
    and r7 r8 into r9;
    is.eq r4 r6.player2 into r10;
    is.eq r6.state 9u8 into r11;
    and r10 r11 into r12;
    is.eq r4 r6.player3 into r13;
    is.eq r6.state 10u8 into r14;
    and r13 r14 into r15;
    or r9 r12 into r16;
    or r16 r15 into r17;
    assert.eq r17 true;
    assert.eq r1 r5.flop;
    cast r5.player1 r5.player2 r5.player3 r2 r5.turn r5.river into r18 as Cards;
    get revealed_cards[r0] into r19;
    cast r19.player1 r19.player2 r19.player3 r3 r19.turn r19.river into r20 as RevealedCards;
    set r20 into revealed_cards[r0];
    get chips[r0] into r21;
    is.eq r21.player1 0u16 into r22;
    and r6.players_folded 1u8 into r23;
    is.neq r23 0u8 into r24;
    or r22 r24 into r25;
    is.eq r21.player2 0u16 into r26;
    and r6.players_folded 2u8 into r27;
    is.neq r27 0u8 into r28;
    or r26 r28 into r29;
    is.eq r21.player3 0u16 into r30;
    and r6.players_folded 4u8 into r31;
    is.neq r31 0u8 into r32;
    or r30 r32 into r33;
    not r25 into r34;
    cast r34 into r35 as u8;
    not r29 into r36;
    cast r36 into r37 as u8;
    add r35 r37 into r38;
    not r33 into r39;
    cast r39 into r40 as u8;
    add r38 r40 into r41;
    lte r41 1u8 into r42;
    is.eq r21.player1 0u16 into r43;
    is.eq r21.player2 0u16 into r44;
    and r43 r44 into r45;
    is.eq r21.player3 0u16 into r46;
    and r45 r46 into r47;
    or r42 r47 into r48;
    and r6.players_out 2u8 into r49;
    is.neq r49 0u8 into r50;
    not r50 into r51;
    ternary r51 9u8 10u8 into r52;
    and r6.players_out 4u8 into r53;
    is.neq r53 0u8 into r54;
    not r54 into r55;
    and r6.dealer_button 1u8 into r56;
    is.neq r56 0u8 into r57;
    ternary r39 13u8 11u8 into r58;
    ternary r36 12u8 r58 into r59;
    and r6.dealer_button 2u8 into r60;
    is.neq r60 0u8 into r61;
    ternary r34 11u8 12u8 into r62;
    ternary r39 13u8 r62 into r63;
    ternary r36 12u8 13u8 into r64;
    ternary r34 11u8 r64 into r65;
    ternary r61 r63 r65 into r66;
    ternary r57 r59 r66 into r67;
    ternary r48 14u8 r67 into r68;
    ternary r55 10u8 r68 into r69;
    and r6.dealer_button 1u8 into r70;
    is.neq r70 0u8 into r71;
    and r6.dealer_button 2u8 into r72;
    is.neq r72 0u8 into r73;
    ternary r73 r63 r65 into r74;
    ternary r71 r59 r74 into r75;
    ternary r48 14u8 r75 into r76;
    ternary r12 r69 r76 into r77;
    ternary r9 r52 r77 into r78;
    or r9 r12 into r79;
    and r6.dealer_button 1u8 into r80;
    is.neq r80 0u8 into r81;
    ternary r39 4u8 2u8 into r82;
    ternary r34 1u8 r82 into r83;
    and r6.dealer_button 2u8 into r84;
    is.neq r84 0u8 into r85;
    ternary r34 1u8 4u8 into r86;
    ternary r36 2u8 r86 into r87;
    ternary r36 2u8 1u8 into r88;
    ternary r39 4u8 r88 into r89;
    ternary r85 r87 r89 into r90;
    ternary r81 r83 r90 into r91;
    ternary r79 0u8 r91 into r92;
    ternary r15 0u16 r6.last_raise_size into r93;
    cast r6.player1 r6.player2 r6.player3 r6.buy_in r78 r6.dealer_button r6.players_out r6.players_folded r92 r6.sb r6.bb r6.remaining_hands r6.hands_played r93 into r94 as Game;
    set r18 into cards[r0];
    set r94 into games[r0];

function fold:
    input r0 as u32.private;
    async fold r0 self.signer into r1;
    output r1 as mental_poker.aleo/fold.future;

finalize fold:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    get chips[r0] into r3;
    gte r2.state 5u8 into r4;
    lte r2.state 7u8 into r5;
    and r4 r5 into r6;
    gte r2.state 11u8 into r7;
    lte r2.state 13u8 into r8;
    and r7 r8 into r9;
    or r6 r9 into r10;
    gte r2.state 17u8 into r11;
    lte r2.state 19u8 into r12;
    and r11 r12 into r13;
    or r10 r13 into r14;
    gte r2.state 23u8 into r15;
    lte r2.state 25u8 into r16;
    and r15 r16 into r17;
    or r14 r17 into r18;
    assert.eq r18 true;
    is.eq r2.player1 r1 into r19;
    is.eq r2.player2 r1 into r20;
    is.eq r2.player3 r1 into r21;
    or r19 r20 into r22;
    or r22 r21 into r23;
    assert.eq r23 true;
    ternary r20 2u8 4u8 into r24;
    ternary r19 1u8 r24 into r25;
    or r2.players_folded r25 into r26;
    and r26 1u8 into r27;
    is.neq r27 0u8 into r28;
    ternary r28 1u8 0u8 into r29;
    sub 3u8 r29 into r30;
    and r26 2u8 into r31;
    is.neq r31 0u8 into r32;
    ternary r32 1u8 0u8 into r33;
    sub r30 r33 into r34;
    and r26 4u8 into r35;
    is.neq r35 0u8 into r36;
    ternary r36 1u8 0u8 into r37;
    sub r34 r37 into r38;
    is.eq r38 1u8 into r39;
    branch.eq r39 false to end_then_0_2;
    add r3.player1_bet r3.player2_bet into r40;
    add r40 r3.player3_bet into r41;
    not r28 into r42;
    add r3.player1 r41 into r43;
    ternary r42 r43 r3.player1 into r44;
    not r32 into r45;
    add r3.player2 r41 into r46;
    ternary r45 r46 r3.player2 into r47;
    not r36 into r48;
    add r3.player3 r41 into r49;
    ternary r48 r49 r3.player3 into r50;
    cast r44 r47 r50 0u16 0u16 0u16 into r51 as Chips;
    and r2.players_out 1u8 into r52;
    is.neq r52 0u8 into r53;
    not r53 into r54;
    and r2.players_out 2u8 into r55;
    is.neq r55 0u8 into r56;
    not r56 into r57;
    ternary r57 31u8 32u8 into r58;
    ternary r54 30u8 r58 into r59;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r59 r2.dealer_button r2.players_out r26 0u8 r2.sb r2.bb r2.remaining_hands r2.hands_played 0u16 into r60 as Game;
    set r51 into chips[r0];
    set r60 into games[r0];
    branch.eq true true to end_otherwise_0_3;
    position end_then_0_2;
    position end_otherwise_0_3;
    gte r3.player1_bet r3.player2_bet into r61;
    gte r3.player1_bet r3.player3_bet into r62;
    and r61 r62 into r63;
    gte r3.player2_bet r3.player3_bet into r64;
    ternary r64 r3.player2_bet r3.player3_bet into r65;
    ternary r63 r3.player1_bet r65 into r66;
    is.eq r3.player1_bet r66 into r67;
    or r28 r67 into r68;
    is.eq r3.player2_bet r66 into r69;
    or r32 r69 into r70;
    and r68 r70 into r71;
    is.eq r3.player3_bet r66 into r72;
    or r36 r72 into r73;
    and r71 r73 into r74;
    lte r2.state 7u8 into r75;
    lte r2.state 13u8 into r76;
    lte r2.state 19u8 into r77;
    ternary r77 17u8 23u8 into r78;
    ternary r76 11u8 r78 into r79;
    ternary r75 5u8 r79 into r80;
    lte r2.state 7u8 into r81;
    and r2.players_out 1u8 into r82;
    is.neq r82 0u8 into r83;
    ternary r83 9u8 8u8 into r84;
    lte r2.state 13u8 into r85;
    and r2.players_out 1u8 into r86;
    is.neq r86 0u8 into r87;
    ternary r87 15u8 14u8 into r88;
    lte r2.state 19u8 into r89;
    and r2.players_out 1u8 into r90;
    is.neq r90 0u8 into r91;
    ternary r91 21u8 20u8 into r92;
    and r2.players_out 1u8 into r93;
    is.neq r93 0u8 into r94;
    ternary r94 27u8 26u8 into r95;
    ternary r89 r92 r95 into r96;
    ternary r85 r88 r96 into r97;
    ternary r81 r84 r97 into r98;
    add r80 2u8 into r99;
    add r80 1u8 into r100;
    ternary r32 r99 r100 into r101;
    ternary r36 r80 r99 into r102;
    ternary r28 r100 r80 into r103;
    ternary r20 r102 r103 into r104;
    ternary r19 r101 r104 into r105;
    ternary r74 r98 r105 into r106;
    ternary r74 0u8 r2.last_bet into r107;
    ternary r74 0u16 r2.last_raise_size into r108;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r106 r2.dealer_button r2.players_out r26 r107 r2.sb r2.bb r2.remaining_hands r2.hands_played r108 into r109 as Game;
    set r109 into games[r0];

function decrypt_turn_river:
    input r0 as u32.private;
    input r1 as group.private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1 into r3;
    call commutative_encryption.aleo/to_u8 r3 into r4;
    async decrypt_turn_river r0 r1 r3 r4 self.signer into r5;
    cast r2.owner r2.secret r2.secret_inv into r6 as Keys.record;
    output r6 as Keys.record;
    output r5 as mental_poker.aleo/decrypt_turn_river.future;

finalize decrypt_turn_river:
    input r0 as u32.public;
    input r1 as group.public;
    input r2 as group.public;
    input r3 as u8.public;
    input r4 as address.public;
    get cards[r0] into r5;
    get games[r0] into r6;
    is.eq r4 r6.player1 into r7;
    is.eq r4 r6.player2 into r8;
    is.eq r4 r6.player3 into r9;
    is.eq r6.state 14u8 into r10;
    and r7 r10 into r11;
    is.eq r6.state 15u8 into r12;
    and r8 r12 into r13;
    is.eq r6.state 16u8 into r14;
    and r9 r14 into r15;
    is.eq r6.state 20u8 into r16;
    and r7 r16 into r17;
    is.eq r6.state 21u8 into r18;
    and r8 r18 into r19;
    is.eq r6.state 22u8 into r20;
    and r9 r20 into r21;
    or r17 r19 into r22;
    or r22 r21 into r23;
    or r11 r13 into r24;
    or r24 r15 into r25;
    or r25 r23 into r26;
    assert.eq r26 true;
    ternary r23 r5.river r5.turn into r27;
    assert.eq r1 r27;
    ternary r23 r5.turn r2 into r28;
    ternary r23 r2 r5.river into r29;
    cast r5.player1 r5.player2 r5.player3 r5.flop r28 r29 into r30 as Cards;
    or r15 r21 into r31;
    branch.eq r31 false to end_then_0_4;
    get revealed_cards[r0] into r32;
    ternary r15 r3 r32.turn into r33;
    ternary r21 r3 r32.river into r34;
    cast r32.player1 r32.player2 r32.player3 r32.flop r33 r34 into r35 as RevealedCards;
    set r35 into revealed_cards[r0];
    branch.eq true true to end_otherwise_0_5;
    position end_then_0_4;
    position end_otherwise_0_5;
    get chips[r0] into r36;
    is.eq r36.player1 0u16 into r37;
    and r6.players_folded 1u8 into r38;
    is.neq r38 0u8 into r39;
    or r37 r39 into r40;
    is.eq r36.player2 0u16 into r41;
    and r6.players_folded 2u8 into r42;
    is.neq r42 0u8 into r43;
    or r41 r43 into r44;
    is.eq r36.player3 0u16 into r45;
    and r6.players_folded 4u8 into r46;
    is.neq r46 0u8 into r47;
    or r45 r47 into r48;
    not r40 into r49;
    cast r49 into r50 as u8;
    not r44 into r51;
    cast r51 into r52 as u8;
    add r50 r52 into r53;
    not r48 into r54;
    cast r54 into r55 as u8;
    add r53 r55 into r56;
    lte r56 1u8 into r57;
    is.eq r36.player1 0u16 into r58;
    is.eq r36.player2 0u16 into r59;
    and r58 r59 into r60;
    is.eq r36.player3 0u16 into r61;
    and r60 r61 into r62;
    or r57 r62 into r63;
    and r6.players_out 2u8 into r64;
    is.neq r64 0u8 into r65;
    not r65 into r66;
    ternary r66 15u8 16u8 into r67;
    and r6.players_out 4u8 into r68;
    is.neq r68 0u8 into r69;
    not r69 into r70;
    and r6.dealer_button 1u8 into r71;
    is.neq r71 0u8 into r72;
    ternary r54 19u8 17u8 into r73;
    ternary r51 18u8 r73 into r74;
    and r6.dealer_button 2u8 into r75;
    is.neq r75 0u8 into r76;
    ternary r49 17u8 18u8 into r77;
    ternary r54 19u8 r77 into r78;
    ternary r51 18u8 19u8 into r79;
    ternary r49 17u8 r79 into r80;
    ternary r76 r78 r80 into r81;
    ternary r72 r74 r81 into r82;
    ternary r63 20u8 r82 into r83;
    ternary r70 16u8 r83 into r84;
    and r6.dealer_button 1u8 into r85;
    is.neq r85 0u8 into r86;
    and r6.dealer_button 2u8 into r87;
    is.neq r87 0u8 into r88;
    ternary r88 r78 r80 into r89;
    ternary r86 r74 r89 into r90;
    ternary r63 20u8 r90 into r91;
    and r6.players_out 2u8 into r92;
    is.neq r92 0u8 into r93;
    not r93 into r94;
    ternary r94 21u8 22u8 into r95;
    and r6.players_out 4u8 into r96;
    is.neq r96 0u8 into r97;
    not r97 into r98;
    and r6.dealer_button 1u8 into r99;
    is.neq r99 0u8 into r100;
    ternary r54 25u8 23u8 into r101;
    ternary r51 24u8 r101 into r102;
    and r6.dealer_button 2u8 into r103;
    is.neq r103 0u8 into r104;
    ternary r49 23u8 24u8 into r105;
    ternary r54 25u8 r105 into r106;
    ternary r51 24u8 25u8 into r107;
    ternary r49 23u8 r107 into r108;
    ternary r104 r106 r108 into r109;
    ternary r100 r102 r109 into r110;
    ternary r63 26u8 r110 into r111;
    ternary r98 22u8 r111 into r112;
    and r6.dealer_button 1u8 into r113;
    is.neq r113 0u8 into r114;
    and r6.dealer_button 2u8 into r115;
    is.neq r115 0u8 into r116;
    ternary r116 r106 r108 into r117;
    ternary r114 r102 r117 into r118;
    ternary r63 26u8 r118 into r119;
    ternary r19 r112 r119 into r120;
    ternary r17 r95 r120 into r121;
    ternary r15 r91 r121 into r122;
    ternary r13 r84 r122 into r123;
    ternary r11 r67 r123 into r124;
    or r11 r13 into r125;
    or r125 r17 into r126;
    or r126 r19 into r127;
    and r6.dealer_button 1u8 into r128;
    is.neq r128 0u8 into r129;
    ternary r54 4u8 2u8 into r130;
    ternary r49 1u8 r130 into r131;
    and r6.dealer_button 2u8 into r132;
    is.neq r132 0u8 into r133;
    ternary r49 1u8 4u8 into r134;
    ternary r51 2u8 r134 into r135;
    ternary r51 2u8 1u8 into r136;
    ternary r54 4u8 r136 into r137;
    ternary r133 r135 r137 into r138;
    ternary r129 r131 r138 into r139;
    ternary r127 0u8 r139 into r140;
    ternary r31 0u16 r6.last_raise_size into r141;
    cast r6.player1 r6.player2 r6.player3 r6.buy_in r124 r6.dealer_button r6.players_out r6.players_folded r140 r6.sb r6.bb r6.remaining_hands r6.hands_played r141 into r142 as Game;
    set r30 into cards[r0];
    set r142 into games[r0];

function showdown:
    input r0 as u32.private;
    input r1 as [group; 2u32].private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[0u32] into r3;
    call commutative_encryption.aleo/to_u8 r3 into r4;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[1u32] into r5;
    call commutative_encryption.aleo/to_u8 r5 into r6;
    cast r4 r6 into r7 as [u8; 2u32];
    async showdown r0 self.signer r1 r7 into r8;
    cast r2.owner r2.secret r2.secret_inv into r9 as Keys.record;
    output r9 as Keys.record;
    output r8 as mental_poker.aleo/showdown.future;

finalize showdown:
    input r0 as u32.public;
    input r1 as address.public;
    input r2 as [group; 2u32].public;
    input r3 as [u8; 2u32].public;
    get cards[r0] into r4;
    get games[r0] into r5;
    is.eq r5.state 26u8 into r6;
    is.eq r5.state 27u8 into r7;
    is.eq r5.state 28u8 into r8;
    is.eq r1 r5.player1 into r9;
    is.eq r1 r5.player2 into r10;
    is.eq r1 r5.player3 into r11;
    ternary r11 28u8 255u8 into r12;
    ternary r10 27u8 r12 into r13;
    ternary r9 26u8 r13 into r14;
    assert.eq r5.state r14;
    ternary r7 r4.player2[0u32] r4.player3[0u32] into r15;
    ternary r7 r4.player2[1u32] r4.player3[1u32] into r16;
    cast r15 r16 into r17 as [group; 2u32];
    ternary r6 r4.player1[0u32] r17[0u32] into r18;
    ternary r6 r4.player1[1u32] r17[1u32] into r19;
    cast r18 r19 into r20 as [group; 2u32];
    assert.eq r2 r20;
    get revealed_cards[r0] into r21;
    ternary r6 r3[0u32] r21.player1[0u32] into r22;
    ternary r6 r3[1u32] r21.player1[1u32] into r23;
    cast r22 r23 into r24 as [u8; 2u32];
    ternary r7 r3[0u32] r21.player2[0u32] into r25;
    ternary r7 r3[1u32] r21.player2[1u32] into r26;
    cast r25 r26 into r27 as [u8; 2u32];
    ternary r8 r3[0u32] r21.player3[0u32] into r28;
    ternary r8 r3[1u32] r21.player3[1u32] into r29;
    cast r28 r29 into r30 as [u8; 2u32];
    cast r24 r27 r30 r21.flop r21.turn r21.river into r31 as RevealedCards;
    and r5.players_out 2u8 into r32;
    is.neq r32 0u8 into r33;
    not r33 into r34;
    and r5.players_folded 2u8 into r35;
    is.neq r35 0u8 into r36;
    not r36 into r37;
    and r34 r37 into r38;
    and r5.players_out 4u8 into r39;
    is.neq r39 0u8 into r40;
    not r40 into r41;
    and r5.players_folded 4u8 into r42;
    is.neq r42 0u8 into r43;
    not r43 into r44;
    and r41 r44 into r45;
    ternary r45 28u8 29u8 into r46;
    ternary r38 27u8 r46 into r47;
    ternary r7 r46 29u8 into r48;
    ternary r6 r47 r48 into r49;
    cast r5.player1 r5.player2 r5.player3 r5.buy_in r49 r5.dealer_button r5.players_out r5.players_folded r5.last_bet r5.sb r5.bb r5.remaining_hands r5.hands_played r5.last_raise_size into r50 as Game;
    set r31 into revealed_cards[r0];
    set r50 into games[r0];

function compare_hands:
    input r0 as u32.private;
    async compare_hands r0 self.signer into r1;
    output r1 as mental_poker.aleo/compare_hands.future;

finalize compare_hands:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    assert.eq r2.state 29u8;
    and r2.dealer_button 1u8 into r3;
    is.neq r3 0u8 into r4;
    is.eq r2.player1 r1 into r5;
    and r4 r5 into r6;
    and r2.dealer_button 2u8 into r7;
    is.neq r7 0u8 into r8;
    is.eq r2.player2 r1 into r9;
    and r8 r9 into r10;
    or r6 r10 into r11;
    and r2.dealer_button 4u8 into r12;
    is.neq r12 0u8 into r13;
    is.eq r2.player3 r1 into r14;
    and r13 r14 into r15;
    or r11 r15 into r16;
    assert.eq r16 true;
    get revealed_cards[r0] into r17;
    get chips[r0] into r18;
    and r2.players_out 1u8 into r19;
    is.neq r19 0u8 into r20;
    not r20 into r21;
    and r2.players_folded 1u8 into r22;
    is.neq r22 0u8 into r23;
    not r23 into r24;
    and r21 r24 into r25;
    and r2.players_out 2u8 into r26;
    is.neq r26 0u8 into r27;
    not r27 into r28;
    and r2.players_folded 2u8 into r29;
    is.neq r29 0u8 into r30;
    not r30 into r31;
    and r28 r31 into r32;
    and r2.players_out 4u8 into r33;
    is.neq r33 0u8 into r34;
    not r34 into r35;
    and r2.players_folded 4u8 into r36;
    is.neq r36 0u8 into r37;
    not r37 into r38;
    and r35 r38 into r39;
    div r17.flop[0u32] 13u8 into r40;
    rem r17.flop[0u32] 13u8 into r41;
    div r17.flop[1u32] 13u8 into r42;
    rem r17.flop[1u32] 13u8 into r43;
    div r17.flop[2u32] 13u8 into r44;
    rem r17.flop[2u32] 13u8 into r45;
    div r17.turn 13u8 into r46;
    rem r17.turn 13u8 into r47;
    div r17.river 13u8 into r48;
    rem r17.river 13u8 into r49;
    lt r41 r43 into r50;
    ternary r50 r40 r42 into r51;
    ternary r50 r41 r43 into r52;
    ternary r50 r42 r40 into r53;
    ternary r50 r43 r41 into r54;
    lt r54 r45 into r55;
    ternary r55 r53 r44 into r56;
    ternary r55 r54 r45 into r57;
    ternary r55 r44 r53 into r58;
    ternary r55 r45 r54 into r59;
    lt r59 r47 into r60;
    ternary r60 r58 r46 into r61;
    ternary r60 r59 r47 into r62;
    ternary r60 r46 r58 into r63;
    ternary r60 r47 r59 into r64;
    lt r64 r49 into r65;
    ternary r65 r63 r48 into r66;
    ternary r65 r64 r49 into r67;
    ternary r65 r48 r63 into r68;
    ternary r65 r49 r64 into r69;
    lt r52 r57 into r70;
    ternary r70 r51 r56 into r71;
    ternary r70 r52 r57 into r72;
    ternary r70 r56 r51 into r73;
    ternary r70 r57 r52 into r74;
    lt r74 r62 into r75;
    ternary r75 r73 r61 into r76;
    ternary r75 r74 r62 into r77;
    ternary r75 r61 r73 into r78;
    ternary r75 r62 r74 into r79;
    lt r79 r67 into r80;
    ternary r80 r78 r66 into r81;
    ternary r80 r79 r67 into r82;
    ternary r80 r66 r78 into r83;
    ternary r80 r67 r79 into r84;
    lt r84 r69 into r85;
    ternary r85 r83 r68 into r86;
    ternary r85 r84 r69 into r87;
    ternary r85 r68 r83 into r88;
    ternary r85 r69 r84 into r89;
    lt r72 r77 into r90;
    ternary r90 r71 r76 into r91;
    ternary r90 r72 r77 into r92;
    ternary r90 r76 r71 into r93;
    ternary r90 r77 r72 into r94;
    lt r94 r82 into r95;
    ternary r95 r93 r81 into r96;
    ternary r95 r94 r82 into r97;
    ternary r95 r81 r93 into r98;
    ternary r95 r82 r94 into r99;
    lt r99 r87 into r100;
    ternary r100 r98 r86 into r101;
    ternary r100 r99 r87 into r102;
    ternary r100 r86 r98 into r103;
    ternary r100 r87 r99 into r104;
    lt r104 r89 into r105;
    ternary r105 r103 r88 into r106;
    ternary r105 r104 r89 into r107;
    ternary r105 r88 r103 into r108;
    ternary r105 r89 r104 into r109;
    lt r92 r97 into r110;
    ternary r110 r91 r96 into r111;
    ternary r110 r92 r97 into r112;
    ternary r110 r96 r91 into r113;
    ternary r110 r97 r92 into r114;
    lt r114 r102 into r115;
    ternary r115 r113 r101 into r116;
    ternary r115 r114 r102 into r117;
    ternary r115 r101 r113 into r118;
    ternary r115 r102 r114 into r119;
    lt r119 r107 into r120;
    ternary r120 r118 r106 into r121;
    ternary r120 r119 r107 into r122;
    ternary r120 r106 r118 into r123;
    ternary r120 r107 r119 into r124;
    lt r124 r109 into r125;
    ternary r125 r123 r108 into r126;
    ternary r125 r124 r109 into r127;
    ternary r125 r108 r123 into r128;
    ternary r125 r109 r124 into r129;
    ternary r25 r17.player1[0u32] 0u8 into r130;
    ternary r25 r17.player1[1u32] 0u8 into r131;
    div r130 13u8 into r132;
    rem r130 13u8 into r133;
    div r131 13u8 into r134;
    rem r131 13u8 into r135;
    lt r133 r112 into r136;
    lt r133 r117 into r137;
    lt r133 r122 into r138;
    lt r133 r127 into r139;
    lt r133 r129 into r140;
    ternary r136 r132 r111 into r141;
    ternary r136 r133 r112 into r142;
    ternary r137 r132 r116 into r143;
    ternary r137 r133 r117 into r144;
    ternary r136 r111 r143 into r145;
    ternary r136 r112 r144 into r146;
    ternary r138 r132 r121 into r147;
    ternary r138 r133 r122 into r148;
    ternary r137 r116 r147 into r149;
    ternary r137 r117 r148 into r150;
    ternary r139 r132 r126 into r151;
    ternary r139 r133 r127 into r152;
    ternary r138 r121 r151 into r153;
    ternary r138 r122 r152 into r154;
    ternary r140 r132 r128 into r155;
    ternary r140 r133 r129 into r156;
    ternary r139 r126 r155 into r157;
    ternary r139 r127 r156 into r158;
    ternary r140 r128 r132 into r159;
    ternary r140 r129 r133 into r160;
    lt r135 r142 into r161;
    lt r135 r146 into r162;
    lt r135 r150 into r163;
    lt r135 r154 into r164;
    lt r135 r158 into r165;
    lt r135 r160 into r166;
    ternary r161 r134 r141 into r167;
    ternary r161 r135 r142 into r168;
    ternary r162 r134 r145 into r169;
    ternary r162 r135 r146 into r170;
    ternary r161 r141 r169 into r171;
    ternary r161 r142 r170 into r172;
    ternary r163 r134 r149 into r173;
    ternary r163 r135 r150 into r174;
    ternary r162 r145 r173 into r175;
    ternary r162 r146 r174 into r176;
    ternary r164 r134 r153 into r177;
    ternary r164 r135 r154 into r178;
    ternary r163 r149 r177 into r179;
    ternary r163 r150 r178 into r180;
    ternary r165 r134 r157 into r181;
    ternary r165 r135 r158 into r182;
    ternary r164 r153 r181 into r183;
    ternary r164 r154 r182 into r184;
    ternary r166 r134 r159 into r185;
    ternary r166 r135 r160 into r186;
    ternary r165 r157 r185 into r187;
    ternary r165 r158 r186 into r188;
    ternary r166 r159 r134 into r189;
    ternary r166 r160 r135 into r190;
    ternary r32 r17.player2[0u32] 0u8 into r191;
    ternary r32 r17.player2[1u32] 0u8 into r192;
    div r191 13u8 into r193;
    rem r191 13u8 into r194;
    div r192 13u8 into r195;
    rem r192 13u8 into r196;
    lt r194 r112 into r197;
    lt r194 r117 into r198;
    lt r194 r122 into r199;
    lt r194 r127 into r200;
    lt r194 r129 into r201;
    ternary r197 r193 r111 into r202;
    ternary r197 r194 r112 into r203;
    ternary r198 r193 r116 into r204;
    ternary r198 r194 r117 into r205;
    ternary r197 r111 r204 into r206;
    ternary r197 r112 r205 into r207;
    ternary r199 r193 r121 into r208;
    ternary r199 r194 r122 into r209;
    ternary r198 r116 r208 into r210;
    ternary r198 r117 r209 into r211;
    ternary r200 r193 r126 into r212;
    ternary r200 r194 r127 into r213;
    ternary r199 r121 r212 into r214;
    ternary r199 r122 r213 into r215;
    ternary r201 r193 r128 into r216;
    ternary r201 r194 r129 into r217;
    ternary r200 r126 r216 into r218;
    ternary r200 r127 r217 into r219;
    ternary r201 r128 r193 into r220;
    ternary r201 r129 r194 into r221;
    lt r196 r203 into r222;
    lt r196 r207 into r223;
    lt r196 r211 into r224;
    lt r196 r215 into r225;
    lt r196 r219 into r226;
    lt r196 r221 into r227;
    ternary r222 r195 r202 into r228;
    ternary r222 r196 r203 into r229;
    ternary r223 r195 r206 into r230;
    ternary r223 r196 r207 into r231;
    ternary r222 r202 r230 into r232;
    ternary r222 r203 r231 into r233;
    ternary r224 r195 r210 into r234;
    ternary r224 r196 r211 into r235;
    ternary r223 r206 r234 into r236;
    ternary r223 r207 r235 into r237;
    ternary r225 r195 r214 into r238;
    ternary r225 r196 r215 into r239;
    ternary r224 r210 r238 into r240;
    ternary r224 r211 r239 into r241;
    ternary r226 r195 r218 into r242;
    ternary r226 r196 r219 into r243;
    ternary r225 r214 r242 into r244;
    ternary r225 r215 r243 into r245;
    ternary r227 r195 r220 into r246;
    ternary r227 r196 r221 into r247;
    ternary r226 r218 r246 into r248;
    ternary r226 r219 r247 into r249;
    ternary r227 r220 r195 into r250;
    ternary r227 r221 r196 into r251;
    ternary r39 r17.player3[0u32] 0u8 into r252;
    ternary r39 r17.player3[1u32] 0u8 into r253;
    div r252 13u8 into r254;
    rem r252 13u8 into r255;
    div r253 13u8 into r256;
    rem r253 13u8 into r257;
    lt r255 r112 into r258;
    lt r255 r117 into r259;
    lt r255 r122 into r260;
    lt r255 r127 into r261;
    lt r255 r129 into r262;
    ternary r258 r254 r111 into r263;
    ternary r258 r255 r112 into r264;
    ternary r259 r254 r116 into r265;
    ternary r259 r255 r117 into r266;
    ternary r258 r111 r265 into r267;
    ternary r258 r112 r266 into r268;
    ternary r260 r254 r121 into r269;
    ternary r260 r255 r122 into r270;
    ternary r259 r116 r269 into r271;
    ternary r259 r117 r270 into r272;
    ternary r261 r254 r126 into r273;
    ternary r261 r255 r127 into r274;
    ternary r260 r121 r273 into r275;
    ternary r260 r122 r274 into r276;
    ternary r262 r254 r128 into r277;
    ternary r262 r255 r129 into r278;
    ternary r261 r126 r277 into r279;
    ternary r261 r127 r278 into r280;
    ternary r262 r128 r254 into r281;
    ternary r262 r129 r255 into r282;
    lt r257 r264 into r283;
    lt r257 r268 into r284;
    lt r257 r272 into r285;
    lt r257 r276 into r286;
    lt r257 r280 into r287;
    lt r257 r282 into r288;
    ternary r283 r256 r263 into r289;
    ternary r283 r257 r264 into r290;
    ternary r284 r256 r267 into r291;
    ternary r284 r257 r268 into r292;
    ternary r283 r263 r291 into r293;
    ternary r283 r264 r292 into r294;
    ternary r285 r256 r271 into r295;
    ternary r285 r257 r272 into r296;
    ternary r284 r267 r295 into r297;
    ternary r284 r268 r296 into r298;
    ternary r286 r256 r275 into r299;
    ternary r286 r257 r276 into r300;
    ternary r285 r271 r299 into r301;
    ternary r285 r272 r300 into r302;
    ternary r287 r256 r279 into r303;
    ternary r287 r257 r280 into r304;
    ternary r286 r275 r303 into r305;
    ternary r286 r276 r304 into r306;
    ternary r288 r256 r281 into r307;
    ternary r288 r257 r282 into r308;
    ternary r287 r279 r307 into r309;
    ternary r287 r280 r308 into r310;
    ternary r288 r281 r256 into r311;
    ternary r288 r282 r257 into r312;
    add r168 1u8 into r313;
    add r172 1u8 into r314;
    add r176 1u8 into r315;
    add r180 1u8 into r316;
    add r184 1u8 into r317;
    add r188 1u8 into r318;
    is.eq r315 r180 into r319;
    is.eq r316 r184 into r320;
    and r319 r320 into r321;
    is.eq r317 r188 into r322;
    and r321 r322 into r323;
    is.eq r318 r190 into r324;
    and r323 r324 into r325;
    is.eq r314 r176 into r326;
    and r326 r319 into r327;
    and r327 r320 into r328;
    and r328 r322 into r329;
    is.eq r313 r172 into r330;
    and r330 r326 into r331;
    and r331 r319 into r332;
    and r332 r320 into r333;
    is.eq r168 0u8 into r334;
    is.eq r172 1u8 into r335;
    and r334 r335 into r336;
    is.eq r176 2u8 into r337;
    and r336 r337 into r338;
    is.eq r180 3u8 into r339;
    and r338 r339 into r340;
    is.eq r184 12u8 into r341;
    is.eq r188 12u8 into r342;
    or r341 r342 into r343;
    is.eq r190 12u8 into r344;
    or r343 r344 into r345;
    and r340 r345 into r346;
    is.eq r167 r171 into r347;
    is.eq r171 r175 into r348;
    is.eq r175 r179 into r349;
    is.eq r179 r183 into r350;
    is.eq r183 r187 into r351;
    is.eq r187 r189 into r352;
    and r325 r349 into r353;
    and r353 r350 into r354;
    and r354 r351 into r355;
    and r355 r352 into r356;
    and r329 r348 into r357;
    and r357 r349 into r358;
    and r358 r350 into r359;
    and r359 r351 into r360;
    and r333 r347 into r361;
    and r361 r348 into r362;
    and r362 r349 into r363;
    and r363 r350 into r364;
    and r347 r348 into r365;
    and r365 r349 into r366;
    is.eq r183 r167 into r367;
    and r341 r367 into r368;
    is.eq r187 r167 into r369;
    and r342 r369 into r370;
    or r368 r370 into r371;
    is.eq r189 r167 into r372;
    and r344 r372 into r373;
    or r371 r373 into r374;
    and r346 r366 into r375;
    and r375 r374 into r376;
    or r356 r360 into r377;
    or r377 r364 into r378;
    or r378 r376 into r379;
    is.eq r168 r172 into r380;
    is.eq r172 r176 into r381;
    is.eq r176 r180 into r382;
    is.eq r180 r184 into r383;
    is.eq r184 r188 into r384;
    is.eq r188 r190 into r385;
    and r380 r381 into r386;
    and r386 r382 into r387;
    and r381 r382 into r388;
    and r388 r383 into r389;
    and r382 r383 into r390;
    and r390 r384 into r391;
    and r383 r384 into r392;
    and r392 r385 into r393;
    or r387 r389 into r394;
    or r394 r391 into r395;
    or r395 r393 into r396;
    ternary r389 r184 r180 into r397;
    ternary r391 r188 r397 into r398;
    ternary r393 r190 r398 into r399;
    ternary r393 r176 r190 into r400;
    and r384 r385 into r401;
    or r386 r388 into r402;
    or r402 r390 into r403;
    or r403 r392 into r404;
    or r404 r401 into r405;
    ternary r388 r180 r176 into r406;
    ternary r390 r184 r406 into r407;
    ternary r392 r188 r407 into r408;
    ternary r401 r190 r408 into r409;
    not r386 into r410;
    and r380 r410 into r411;
    and r381 r410 into r412;
    not r388 into r413;
    and r412 r413 into r414;
    and r382 r413 into r415;
    not r390 into r416;
    and r415 r416 into r417;
    and r383 r416 into r418;
    not r392 into r419;
    and r418 r419 into r420;
    and r384 r419 into r421;
    not r401 into r422;
    and r421 r422 into r423;
    and r385 r422 into r424;
    or r411 r414 into r425;
    or r425 r417 into r426;
    or r426 r420 into r427;
    or r427 r423 into r428;
    or r428 r424 into r429;
    ternary r414 r176 r172 into r430;
    ternary r417 r180 r430 into r431;
    ternary r420 r184 r431 into r432;
    ternary r423 r188 r432 into r433;
    ternary r424 r190 r433 into r434;
    and r405 r429 into r435;
    not r429 into r436;
    and r405 r436 into r437;
    not r405 into r438;
    and r429 r438 into r439;
    is.eq r167 0u8 into r440;
    cast r440 into r441 as u8;
    is.eq r171 0u8 into r442;
    cast r442 into r443 as u8;
    add r441 r443 into r444;
    is.eq r175 0u8 into r445;
    cast r445 into r446 as u8;
    add r444 r446 into r447;
    is.eq r179 0u8 into r448;
    cast r448 into r449 as u8;
    add r447 r449 into r450;
    is.eq r183 0u8 into r451;
    cast r451 into r452 as u8;
    add r450 r452 into r453;
    is.eq r187 0u8 into r454;
    cast r454 into r455 as u8;
    add r453 r455 into r456;
    is.eq r189 0u8 into r457;
    cast r457 into r458 as u8;
    add r456 r458 into r459;
    gte r459 5u8 into r460;
    is.eq r167 1u8 into r461;
    cast r461 into r462 as u8;
    is.eq r171 1u8 into r463;
    cast r463 into r464 as u8;
    add r462 r464 into r465;
    is.eq r175 1u8 into r466;
    cast r466 into r467 as u8;
    add r465 r467 into r468;
    is.eq r179 1u8 into r469;
    cast r469 into r470 as u8;
    add r468 r470 into r471;
    is.eq r183 1u8 into r472;
    cast r472 into r473 as u8;
    add r471 r473 into r474;
    is.eq r187 1u8 into r475;
    cast r475 into r476 as u8;
    add r474 r476 into r477;
    is.eq r189 1u8 into r478;
    cast r478 into r479 as u8;
    add r477 r479 into r480;
    gte r480 5u8 into r481;
    is.eq r167 2u8 into r482;
    cast r482 into r483 as u8;
    is.eq r171 2u8 into r484;
    cast r484 into r485 as u8;
    add r483 r485 into r486;
    is.eq r175 2u8 into r487;
    cast r487 into r488 as u8;
    add r486 r488 into r489;
    is.eq r179 2u8 into r490;
    cast r490 into r491 as u8;
    add r489 r491 into r492;
    is.eq r183 2u8 into r493;
    cast r493 into r494 as u8;
    add r492 r494 into r495;
    is.eq r187 2u8 into r496;
    cast r496 into r497 as u8;
    add r495 r497 into r498;
    is.eq r189 2u8 into r499;
    cast r499 into r500 as u8;
    add r498 r500 into r501;
    gte r501 5u8 into r502;
    is.eq r167 3u8 into r503;
    cast r503 into r504 as u8;
    is.eq r171 3u8 into r505;
    cast r505 into r506 as u8;
    add r504 r506 into r507;
    is.eq r175 3u8 into r508;
    cast r508 into r509 as u8;
    add r507 r509 into r510;
    is.eq r179 3u8 into r511;
    cast r511 into r512 as u8;
    add r510 r512 into r513;
    is.eq r183 3u8 into r514;
    cast r514 into r515 as u8;
    add r513 r515 into r516;
    is.eq r187 3u8 into r517;
    cast r517 into r518 as u8;
    add r516 r518 into r519;
    is.eq r189 3u8 into r520;
    cast r520 into r521 as u8;
    add r519 r521 into r522;
    gte r522 5u8 into r523;
    or r460 r481 into r524;
    or r524 r502 into r525;
    or r525 r523 into r526;
    ternary r481 1u8 0u8 into r527;
    ternary r502 2u8 r527 into r528;
    ternary r523 3u8 r528 into r529;
    is.eq r189 r529 into r530;
    cast r530 into r531 as u8;
    is.eq r187 r529 into r532;
    cast r532 into r533 as u8;
    is.eq r183 r529 into r534;
    cast r534 into r535 as u8;
    is.eq r179 r529 into r536;
    cast r536 into r537 as u8;
    is.eq r175 r529 into r538;
    cast r538 into r539 as u8;
    is.eq r171 r529 into r540;
    cast r540 into r541 as u8;
    is.eq r167 r529 into r542;
    cast r542 into r543 as u8;
    add r531 r533 into r544;
    add r544 r535 into r545;
    add r545 r537 into r546;
    add r546 r539 into r547;
    add r547 r541 into r548;
    is.eq r531 1u8 into r549;
    is.eq r544 1u8 into r550;
    is.eq r545 1u8 into r551;
    is.eq r546 1u8 into r552;
    is.eq r547 1u8 into r553;
    is.eq r548 1u8 into r554;
    is.eq r531 2u8 into r555;
    is.eq r544 2u8 into r556;
    is.eq r545 2u8 into r557;
    is.eq r546 2u8 into r558;
    is.eq r547 2u8 into r559;
    is.eq r548 2u8 into r560;
    is.eq r531 3u8 into r561;
    is.eq r544 3u8 into r562;
    is.eq r545 3u8 into r563;
    is.eq r546 3u8 into r564;
    is.eq r547 3u8 into r565;
    is.eq r548 3u8 into r566;
    is.eq r531 4u8 into r567;
    is.eq r544 4u8 into r568;
    is.eq r545 4u8 into r569;
    is.eq r546 4u8 into r570;
    is.eq r547 4u8 into r571;
    is.eq r548 4u8 into r572;
    is.eq r531 5u8 into r573;
    is.eq r544 5u8 into r574;
    is.eq r545 5u8 into r575;
    is.eq r546 5u8 into r576;
    is.eq r547 5u8 into r577;
    is.eq r548 5u8 into r578;
    ternary r554 r172 r168 into r579;
    ternary r553 r176 r579 into r580;
    ternary r552 r180 r580 into r581;
    ternary r551 r184 r581 into r582;
    ternary r550 r188 r582 into r583;
    ternary r549 r190 r583 into r584;
    ternary r560 r172 r168 into r585;
    ternary r559 r176 r585 into r586;
    ternary r558 r180 r586 into r587;
    ternary r557 r184 r587 into r588;
    ternary r556 r188 r588 into r589;
    ternary r555 r190 r589 into r590;
    ternary r566 r172 r168 into r591;
    ternary r565 r176 r591 into r592;
    ternary r564 r180 r592 into r593;
    ternary r563 r184 r593 into r594;
    ternary r562 r188 r594 into r595;
    ternary r561 r190 r595 into r596;
    ternary r572 r172 r168 into r597;
    ternary r571 r176 r597 into r598;
    ternary r570 r180 r598 into r599;
    ternary r569 r184 r599 into r600;
    ternary r568 r188 r600 into r601;
    ternary r567 r190 r601 into r602;
    ternary r578 r172 r168 into r603;
    ternary r577 r176 r603 into r604;
    ternary r576 r180 r604 into r605;
    ternary r575 r184 r605 into r606;
    ternary r574 r188 r606 into r607;
    ternary r573 r190 r607 into r608;
    or r325 r329 into r609;
    or r609 r333 into r610;
    or r610 r346 into r611;
    ternary r333 r184 3u8 into r612;
    ternary r329 r188 r612 into r613;
    ternary r325 r190 r613 into r614;
    cast r411 into r615 as u8;
    cast r414 into r616 as u8;
    add r615 r616 into r617;
    cast r417 into r618 as u8;
    add r617 r618 into r619;
    cast r420 into r620 as u8;
    add r619 r620 into r621;
    cast r423 into r622 as u8;
    add r621 r622 into r623;
    cast r424 into r624 as u8;
    add r623 r624 into r625;
    gte r625 2u8 into r626;
    not r424 into r627;
    not r423 into r628;
    not r420 into r629;
    and r423 r627 into r630;
    and r420 r628 into r631;
    and r631 r627 into r632;
    ternary r632 r184 r431 into r633;
    ternary r630 r188 r633 into r634;
    not r417 into r635;
    not r414 into r636;
    ternary r636 r176 r172 into r637;
    ternary r635 r180 r637 into r638;
    ternary r629 r184 r638 into r639;
    ternary r628 r188 r639 into r640;
    ternary r627 r190 r640 into r641;
    ternary r401 r180 r190 into r642;
    ternary r392 r176 r188 into r643;
    ternary r401 r176 r643 into r644;
    ternary r424 r184 r190 into r645;
    ternary r423 r180 r188 into r646;
    ternary r424 r180 r646 into r647;
    ternary r420 r176 r184 into r648;
    ternary r423 r176 r648 into r649;
    ternary r424 r176 r649 into r650;
    cast r356 into r651 as u32;
    or 2415919104u32 r651 into r652;
    cast r399 into r653 as u32;
    shl r653 4u8 into r654;
    or 2147483648u32 r654 into r655;
    cast r400 into r656 as u32;
    or r655 r656 into r657;
    cast r409 into r658 as u32;
    shl r658 4u8 into r659;
    or 1879048192u32 r659 into r660;
    cast r434 into r661 as u32;
    or r660 r661 into r662;
    cast r584 into r663 as u32;
    shl r663 16u8 into r664;
    or 1610612736u32 r664 into r665;
    cast r590 into r666 as u32;
    shl r666 12u8 into r667;
    or r665 r667 into r668;
    cast r596 into r669 as u32;
    shl r669 8u8 into r670;
    or r668 r670 into r671;
    cast r602 into r672 as u32;
    shl r672 4u8 into r673;
    or r671 r673 into r674;
    cast r608 into r675 as u32;
    or r674 r675 into r676;
    cast r614 into r677 as u32;
    or 1342177280u32 r677 into r678;
    cast r409 into r679 as u32;
    shl r679 8u8 into r680;
    or 1073741824u32 r680 into r681;
    cast r642 into r682 as u32;
    shl r682 4u8 into r683;
    or r681 r683 into r684;
    cast r644 into r685 as u32;
    or r684 r685 into r686;
    cast r434 into r687 as u32;
    shl r687 8u8 into r688;
    or 805306368u32 r688 into r689;
    cast r634 into r690 as u32;
    shl r690 4u8 into r691;
    or r689 r691 into r692;
    cast r641 into r693 as u32;
    or r692 r693 into r694;
    cast r434 into r695 as u32;
    shl r695 12u8 into r696;
    or 536870912u32 r696 into r697;
    cast r645 into r698 as u32;
    shl r698 8u8 into r699;
    or r697 r699 into r700;
    cast r647 into r701 as u32;
    shl r701 4u8 into r702;
    or r700 r702 into r703;
    cast r650 into r704 as u32;
    or r703 r704 into r705;
    cast r190 into r706 as u32;
    shl r706 16u8 into r707;
    or 268435456u32 r707 into r708;
    cast r188 into r709 as u32;
    shl r709 12u8 into r710;
    or r708 r710 into r711;
    cast r184 into r712 as u32;
    shl r712 8u8 into r713;
    or r711 r713 into r714;
    cast r180 into r715 as u32;
    shl r715 4u8 into r716;
    or r714 r716 into r717;
    cast r176 into r718 as u32;
    or r717 r718 into r719;
    ternary r439 r705 r719 into r720;
    ternary r626 r694 r720 into r721;
    ternary r437 r686 r721 into r722;
    ternary r611 r678 r722 into r723;
    ternary r526 r676 r723 into r724;
    ternary r435 r662 r724 into r725;
    ternary r396 r657 r725 into r726;
    ternary r379 r652 r726 into r727;
    add r229 1u8 into r728;
    add r233 1u8 into r729;
    add r237 1u8 into r730;
    add r241 1u8 into r731;
    add r245 1u8 into r732;
    add r249 1u8 into r733;
    is.eq r730 r241 into r734;
    is.eq r731 r245 into r735;
    and r734 r735 into r736;
    is.eq r732 r249 into r737;
    and r736 r737 into r738;
    is.eq r733 r251 into r739;
    and r738 r739 into r740;
    is.eq r729 r237 into r741;
    and r741 r734 into r742;
    and r742 r735 into r743;
    and r743 r737 into r744;
    is.eq r728 r233 into r745;
    and r745 r741 into r746;
    and r746 r734 into r747;
    and r747 r735 into r748;
    is.eq r229 0u8 into r749;
    is.eq r233 1u8 into r750;
    and r749 r750 into r751;
    is.eq r237 2u8 into r752;
    and r751 r752 into r753;
    is.eq r241 3u8 into r754;
    and r753 r754 into r755;
    is.eq r245 12u8 into r756;
    is.eq r249 12u8 into r757;
    or r756 r757 into r758;
    is.eq r251 12u8 into r759;
    or r758 r759 into r760;
    and r755 r760 into r761;
    is.eq r228 r232 into r762;
    is.eq r232 r236 into r763;
    is.eq r236 r240 into r764;
    is.eq r240 r244 into r765;
    is.eq r244 r248 into r766;
    is.eq r248 r250 into r767;
    and r740 r764 into r768;
    and r768 r765 into r769;
    and r769 r766 into r770;
    and r770 r767 into r771;
    and r744 r763 into r772;
    and r772 r764 into r773;
    and r773 r765 into r774;
    and r774 r766 into r775;
    and r748 r762 into r776;
    and r776 r763 into r777;
    and r777 r764 into r778;
    and r778 r765 into r779;
    and r762 r763 into r780;
    and r780 r764 into r781;
    is.eq r244 r228 into r782;
    and r756 r782 into r783;
    is.eq r248 r228 into r784;
    and r757 r784 into r785;
    or r783 r785 into r786;
    is.eq r250 r228 into r787;
    and r759 r787 into r788;
    or r786 r788 into r789;
    and r761 r781 into r790;
    and r790 r789 into r791;
    or r771 r775 into r792;
    or r792 r779 into r793;
    or r793 r791 into r794;
    is.eq r229 r233 into r795;
    is.eq r233 r237 into r796;
    is.eq r237 r241 into r797;
    is.eq r241 r245 into r798;
    is.eq r245 r249 into r799;
    is.eq r249 r251 into r800;
    and r795 r796 into r801;
    and r801 r797 into r802;
    and r796 r797 into r803;
    and r803 r798 into r804;
    and r797 r798 into r805;
    and r805 r799 into r806;
    and r798 r799 into r807;
    and r807 r800 into r808;
    or r802 r804 into r809;
    or r809 r806 into r810;
    or r810 r808 into r811;
    ternary r804 r245 r241 into r812;
    ternary r806 r249 r812 into r813;
    ternary r808 r251 r813 into r814;
    ternary r808 r237 r251 into r815;
    and r799 r800 into r816;
    or r801 r803 into r817;
    or r817 r805 into r818;
    or r818 r807 into r819;
    or r819 r816 into r820;
    ternary r803 r241 r237 into r821;
    ternary r805 r245 r821 into r822;
    ternary r807 r249 r822 into r823;
    ternary r816 r251 r823 into r824;
    not r801 into r825;
    and r795 r825 into r826;
    and r796 r825 into r827;
    not r803 into r828;
    and r827 r828 into r829;
    and r797 r828 into r830;
    not r805 into r831;
    and r830 r831 into r832;
    and r798 r831 into r833;
    not r807 into r834;
    and r833 r834 into r835;
    and r799 r834 into r836;
    not r816 into r837;
    and r836 r837 into r838;
    and r800 r837 into r839;
    or r826 r829 into r840;
    or r840 r832 into r841;
    or r841 r835 into r842;
    or r842 r838 into r843;
    or r843 r839 into r844;
    ternary r829 r237 r233 into r845;
    ternary r832 r241 r845 into r846;
    ternary r835 r245 r846 into r847;
    ternary r838 r249 r847 into r848;
    ternary r839 r251 r848 into r849;
    and r820 r844 into r850;
    not r844 into r851;
    and r820 r851 into r852;
    not r820 into r853;
    and r844 r853 into r854;
    is.eq r228 0u8 into r855;
    cast r855 into r856 as u8;
    is.eq r232 0u8 into r857;
    cast r857 into r858 as u8;
    add r856 r858 into r859;
    is.eq r236 0u8 into r860;
    cast r860 into r861 as u8;
    add r859 r861 into r862;
    is.eq r240 0u8 into r863;
    cast r863 into r864 as u8;
    add r862 r864 into r865;
    is.eq r244 0u8 into r866;
    cast r866 into r867 as u8;
    add r865 r867 into r868;
    is.eq r248 0u8 into r869;
    cast r869 into r870 as u8;
    add r868 r870 into r871;
    is.eq r250 0u8 into r872;
    cast r872 into r873 as u8;
    add r871 r873 into r874;
    gte r874 5u8 into r875;
    is.eq r228 1u8 into r876;
    cast r876 into r877 as u8;
    is.eq r232 1u8 into r878;
    cast r878 into r879 as u8;
    add r877 r879 into r880;
    is.eq r236 1u8 into r881;
    cast r881 into r882 as u8;
    add r880 r882 into r883;
    is.eq r240 1u8 into r884;
    cast r884 into r885 as u8;
    add r883 r885 into r886;
    is.eq r244 1u8 into r887;
    cast r887 into r888 as u8;
    add r886 r888 into r889;
    is.eq r248 1u8 into r890;
    cast r890 into r891 as u8;
    add r889 r891 into r892;
    is.eq r250 1u8 into r893;
    cast r893 into r894 as u8;
    add r892 r894 into r895;
    gte r895 5u8 into r896;
    is.eq r228 2u8 into r897;
    cast r897 into r898 as u8;
    is.eq r232 2u8 into r899;
    cast r899 into r900 as u8;
    add r898 r900 into r901;
    is.eq r236 2u8 into r902;
    cast r902 into r903 as u8;
    add r901 r903 into r904;
    is.eq r240 2u8 into r905;
    cast r905 into r906 as u8;
    add r904 r906 into r907;
    is.eq r244 2u8 into r908;
    cast r908 into r909 as u8;
    add r907 r909 into r910;
    is.eq r248 2u8 into r911;
    cast r911 into r912 as u8;
    add r910 r912 into r913;
    is.eq r250 2u8 into r914;
    cast r914 into r915 as u8;
    add r913 r915 into r916;
    gte r916 5u8 into r917;
    is.eq r228 3u8 into r918;
    cast r918 into r919 as u8;
    is.eq r232 3u8 into r920;
    cast r920 into r921 as u8;
    add r919 r921 into r922;
    is.eq r236 3u8 into r923;
    cast r923 into r924 as u8;
    add r922 r924 into r925;
    is.eq r240 3u8 into r926;
    cast r926 into r927 as u8;
    add r925 r927 into r928;
    is.eq r244 3u8 into r929;
    cast r929 into r930 as u8;
    add r928 r930 into r931;
    is.eq r248 3u8 into r932;
    cast r932 into r933 as u8;
    add r931 r933 into r934;
    is.eq r250 3u8 into r935;
    cast r935 into r936 as u8;
    add r934 r936 into r937;
    gte r937 5u8 into r938;
    or r875 r896 into r939;
    or r939 r917 into r940;
    or r940 r938 into r941;
    ternary r896 1u8 0u8 into r942;
    ternary r917 2u8 r942 into r943;
    ternary r938 3u8 r943 into r944;
    is.eq r250 r944 into r945;
    cast r945 into r946 as u8;
    is.eq r248 r944 into r947;
    cast r947 into r948 as u8;
    is.eq r244 r944 into r949;
    cast r949 into r950 as u8;
    is.eq r240 r944 into r951;
    cast r951 into r952 as u8;
    is.eq r236 r944 into r953;
    cast r953 into r954 as u8;
    is.eq r232 r944 into r955;
    cast r955 into r956 as u8;
    is.eq r228 r944 into r957;
    cast r957 into r958 as u8;
    add r946 r948 into r959;
    add r959 r950 into r960;
    add r960 r952 into r961;
    add r961 r954 into r962;
    add r962 r956 into r963;
    is.eq r946 1u8 into r964;
    is.eq r959 1u8 into r965;
    is.eq r960 1u8 into r966;
    is.eq r961 1u8 into r967;
    is.eq r962 1u8 into r968;
    is.eq r963 1u8 into r969;
    is.eq r946 2u8 into r970;
    is.eq r959 2u8 into r971;
    is.eq r960 2u8 into r972;
    is.eq r961 2u8 into r973;
    is.eq r962 2u8 into r974;
    is.eq r963 2u8 into r975;
    is.eq r946 3u8 into r976;
    is.eq r959 3u8 into r977;
    is.eq r960 3u8 into r978;
    is.eq r961 3u8 into r979;
    is.eq r962 3u8 into r980;
    is.eq r963 3u8 into r981;
    is.eq r946 4u8 into r982;
    is.eq r959 4u8 into r983;
    is.eq r960 4u8 into r984;
    is.eq r961 4u8 into r985;
    is.eq r962 4u8 into r986;
    is.eq r963 4u8 into r987;
    is.eq r946 5u8 into r988;
    is.eq r959 5u8 into r989;
    is.eq r960 5u8 into r990;
    is.eq r961 5u8 into r991;
    is.eq r962 5u8 into r992;
    is.eq r963 5u8 into r993;
    ternary r969 r233 r229 into r994;
    ternary r968 r237 r994 into r995;
    ternary r967 r241 r995 into r996;
    ternary r966 r245 r996 into r997;
    ternary r965 r249 r997 into r998;
    ternary r964 r251 r998 into r999;
    ternary r975 r233 r229 into r1000;
    ternary r974 r237 r1000 into r1001;
    ternary r973 r241 r1001 into r1002;
    ternary r972 r245 r1002 into r1003;
    ternary r971 r249 r1003 into r1004;
    ternary r970 r251 r1004 into r1005;
    ternary r981 r233 r229 into r1006;
    ternary r980 r237 r1006 into r1007;
    ternary r979 r241 r1007 into r1008;
    ternary r978 r245 r1008 into r1009;
    ternary r977 r249 r1009 into r1010;
    ternary r976 r251 r1010 into r1011;
    ternary r987 r233 r229 into r1012;
    ternary r986 r237 r1012 into r1013;
    ternary r985 r241 r1013 into r1014;
    ternary r984 r245 r1014 into r1015;
    ternary r983 r249 r1015 into r1016;
    ternary r982 r251 r1016 into r1017;
    ternary r993 r233 r229 into r1018;
    ternary r992 r237 r1018 into r1019;
    ternary r991 r241 r1019 into r1020;
    ternary r990 r245 r1020 into r1021;
    ternary r989 r249 r1021 into r1022;
    ternary r988 r251 r1022 into r1023;
    or r740 r744 into r1024;
    or r1024 r748 into r1025;
    or r1025 r761 into r1026;
    ternary r748 r245 3u8 into r1027;
    ternary r744 r249 r1027 into r1028;
    ternary r740 r251 r1028 into r1029;
    cast r826 into r1030 as u8;
    cast r829 into r1031 as u8;
    add r1030 r1031 into r1032;
    cast r832 into r1033 as u8;
    add r1032 r1033 into r1034;
    cast r835 into r1035 as u8;
    add r1034 r1035 into r1036;
    cast r838 into r1037 as u8;
    add r1036 r1037 into r1038;
    cast r839 into r1039 as u8;
    add r1038 r1039 into r1040;
    gte r1040 2u8 into r1041;
    not r839 into r1042;
    not r838 into r1043;
    not r835 into r1044;
    and r838 r1042 into r1045;
    and r835 r1043 into r1046;
    and r1046 r1042 into r1047;
    ternary r1047 r245 r846 into r1048;
    ternary r1045 r249 r1048 into r1049;
    not r832 into r1050;
    not r829 into r1051;
    ternary r1051 r237 r233 into r1052;
    ternary r1050 r241 r1052 into r1053;
    ternary r1044 r245 r1053 into r1054;
    ternary r1043 r249 r1054 into r1055;
    ternary r1042 r251 r1055 into r1056;
    ternary r816 r241 r251 into r1057;
    ternary r807 r237 r249 into r1058;
    ternary r816 r237 r1058 into r1059;
    ternary r839 r245 r251 into r1060;
    ternary r838 r241 r249 into r1061;
    ternary r839 r241 r1061 into r1062;
    ternary r835 r237 r245 into r1063;
    ternary r838 r237 r1063 into r1064;
    ternary r839 r237 r1064 into r1065;
    cast r771 into r1066 as u32;
    or 2415919104u32 r1066 into r1067;
    cast r814 into r1068 as u32;
    shl r1068 4u8 into r1069;
    or 2147483648u32 r1069 into r1070;
    cast r815 into r1071 as u32;
    or r1070 r1071 into r1072;
    cast r824 into r1073 as u32;
    shl r1073 4u8 into r1074;
    or 1879048192u32 r1074 into r1075;
    cast r849 into r1076 as u32;
    or r1075 r1076 into r1077;
    cast r999 into r1078 as u32;
    shl r1078 16u8 into r1079;
    or 1610612736u32 r1079 into r1080;
    cast r1005 into r1081 as u32;
    shl r1081 12u8 into r1082;
    or r1080 r1082 into r1083;
    cast r1011 into r1084 as u32;
    shl r1084 8u8 into r1085;
    or r1083 r1085 into r1086;
    cast r1017 into r1087 as u32;
    shl r1087 4u8 into r1088;
    or r1086 r1088 into r1089;
    cast r1023 into r1090 as u32;
    or r1089 r1090 into r1091;
    cast r1029 into r1092 as u32;
    or 1342177280u32 r1092 into r1093;
    cast r824 into r1094 as u32;
    shl r1094 8u8 into r1095;
    or 1073741824u32 r1095 into r1096;
    cast r1057 into r1097 as u32;
    shl r1097 4u8 into r1098;
    or r1096 r1098 into r1099;
    cast r1059 into r1100 as u32;
    or r1099 r1100 into r1101;
    cast r849 into r1102 as u32;
    shl r1102 8u8 into r1103;
    or 805306368u32 r1103 into r1104;
    cast r1049 into r1105 as u32;
    shl r1105 4u8 into r1106;
    or r1104 r1106 into r1107;
    cast r1056 into r1108 as u32;
    or r1107 r1108 into r1109;
    cast r849 into r1110 as u32;
    shl r1110 12u8 into r1111;
    or 536870912u32 r1111 into r1112;
    cast r1060 into r1113 as u32;
    shl r1113 8u8 into r1114;
    or r1112 r1114 into r1115;
    cast r1062 into r1116 as u32;
    shl r1116 4u8 into r1117;
    or r1115 r1117 into r1118;
    cast r1065 into r1119 as u32;
    or r1118 r1119 into r1120;
    cast r251 into r1121 as u32;
    shl r1121 16u8 into r1122;
    or 268435456u32 r1122 into r1123;
    cast r249 into r1124 as u32;
    shl r1124 12u8 into r1125;
    or r1123 r1125 into r1126;
    cast r245 into r1127 as u32;
    shl r1127 8u8 into r1128;
    or r1126 r1128 into r1129;
    cast r241 into r1130 as u32;
    shl r1130 4u8 into r1131;
    or r1129 r1131 into r1132;
    cast r237 into r1133 as u32;
    or r1132 r1133 into r1134;
    ternary r854 r1120 r1134 into r1135;
    ternary r1041 r1109 r1135 into r1136;
    ternary r852 r1101 r1136 into r1137;
    ternary r1026 r1093 r1137 into r1138;
    ternary r941 r1091 r1138 into r1139;
    ternary r850 r1077 r1139 into r1140;
    ternary r811 r1072 r1140 into r1141;
    ternary r794 r1067 r1141 into r1142;
    add r290 1u8 into r1143;
    add r294 1u8 into r1144;
    add r298 1u8 into r1145;
    add r302 1u8 into r1146;
    add r306 1u8 into r1147;
    add r310 1u8 into r1148;
    is.eq r1145 r302 into r1149;
    is.eq r1146 r306 into r1150;
    and r1149 r1150 into r1151;
    is.eq r1147 r310 into r1152;
    and r1151 r1152 into r1153;
    is.eq r1148 r312 into r1154;
    and r1153 r1154 into r1155;
    is.eq r1144 r298 into r1156;
    and r1156 r1149 into r1157;
    and r1157 r1150 into r1158;
    and r1158 r1152 into r1159;
    is.eq r1143 r294 into r1160;
    and r1160 r1156 into r1161;
    and r1161 r1149 into r1162;
    and r1162 r1150 into r1163;
    is.eq r290 0u8 into r1164;
    is.eq r294 1u8 into r1165;
    and r1164 r1165 into r1166;
    is.eq r298 2u8 into r1167;
    and r1166 r1167 into r1168;
    is.eq r302 3u8 into r1169;
    and r1168 r1169 into r1170;
    is.eq r306 12u8 into r1171;
    is.eq r310 12u8 into r1172;
    or r1171 r1172 into r1173;
    is.eq r312 12u8 into r1174;
    or r1173 r1174 into r1175;
    and r1170 r1175 into r1176;
    is.eq r289 r293 into r1177;
    is.eq r293 r297 into r1178;
    is.eq r297 r301 into r1179;
    is.eq r301 r305 into r1180;
    is.eq r305 r309 into r1181;
    is.eq r309 r311 into r1182;
    and r1155 r1179 into r1183;
    and r1183 r1180 into r1184;
    and r1184 r1181 into r1185;
    and r1185 r1182 into r1186;
    and r1159 r1178 into r1187;
    and r1187 r1179 into r1188;
    and r1188 r1180 into r1189;
    and r1189 r1181 into r1190;
    and r1163 r1177 into r1191;
    and r1191 r1178 into r1192;
    and r1192 r1179 into r1193;
    and r1193 r1180 into r1194;
    and r1177 r1178 into r1195;
    and r1195 r1179 into r1196;
    is.eq r305 r289 into r1197;
    and r1171 r1197 into r1198;
    is.eq r309 r289 into r1199;
    and r1172 r1199 into r1200;
    or r1198 r1200 into r1201;
    is.eq r311 r289 into r1202;
    and r1174 r1202 into r1203;
    or r1201 r1203 into r1204;
    and r1176 r1196 into r1205;
    and r1205 r1204 into r1206;
    or r1186 r1190 into r1207;
    or r1207 r1194 into r1208;
    or r1208 r1206 into r1209;
    is.eq r290 r294 into r1210;
    is.eq r294 r298 into r1211;
    is.eq r298 r302 into r1212;
    is.eq r302 r306 into r1213;
    is.eq r306 r310 into r1214;
    is.eq r310 r312 into r1215;
    and r1210 r1211 into r1216;
    and r1216 r1212 into r1217;
    and r1211 r1212 into r1218;
    and r1218 r1213 into r1219;
    and r1212 r1213 into r1220;
    and r1220 r1214 into r1221;
    and r1213 r1214 into r1222;
    and r1222 r1215 into r1223;
    or r1217 r1219 into r1224;
    or r1224 r1221 into r1225;
    or r1225 r1223 into r1226;
    ternary r1219 r306 r302 into r1227;
    ternary r1221 r310 r1227 into r1228;
    ternary r1223 r312 r1228 into r1229;
    ternary r1223 r298 r312 into r1230;
    and r1214 r1215 into r1231;
    or r1216 r1218 into r1232;
    or r1232 r1220 into r1233;
    or r1233 r1222 into r1234;
    or r1234 r1231 into r1235;
    ternary r1218 r302 r298 into r1236;
    ternary r1220 r306 r1236 into r1237;
    ternary r1222 r310 r1237 into r1238;
    ternary r1231 r312 r1238 into r1239;
    not r1216 into r1240;
    and r1210 r1240 into r1241;
    and r1211 r1240 into r1242;
    not r1218 into r1243;
    and r1242 r1243 into r1244;
    and r1212 r1243 into r1245;
    not r1220 into r1246;
    and r1245 r1246 into r1247;
    and r1213 r1246 into r1248;
    not r1222 into r1249;
    and r1248 r1249 into r1250;
    and r1214 r1249 into r1251;
    not r1231 into r1252;
    and r1251 r1252 into r1253;
    and r1215 r1252 into r1254;
    or r1241 r1244 into r1255;
    or r1255 r1247 into r1256;
    or r1256 r1250 into r1257;
    or r1257 r1253 into r1258;
    or r1258 r1254 into r1259;
    ternary r1244 r298 r294 into r1260;
    ternary r1247 r302 r1260 into r1261;
    ternary r1250 r306 r1261 into r1262;
    ternary r1253 r310 r1262 into r1263;
    ternary r1254 r312 r1263 into r1264;
    and r1235 r1259 into r1265;
    not r1259 into r1266;
    and r1235 r1266 into r1267;
    not r1235 into r1268;
    and r1259 r1268 into r1269;
    is.eq r289 0u8 into r1270;
    cast r1270 into r1271 as u8;
    is.eq r293 0u8 into r1272;
    cast r1272 into r1273 as u8;
    add r1271 r1273 into r1274;
    is.eq r297 0u8 into r1275;
    cast r1275 into r1276 as u8;
    add r1274 r1276 into r1277;
    is.eq r301 0u8 into r1278;
    cast r1278 into r1279 as u8;
    add r1277 r1279 into r1280;
    is.eq r305 0u8 into r1281;
    cast r1281 into r1282 as u8;
    add r1280 r1282 into r1283;
    is.eq r309 0u8 into r1284;
    cast r1284 into r1285 as u8;
    add r1283 r1285 into r1286;
    is.eq r311 0u8 into r1287;
    cast r1287 into r1288 as u8;
    add r1286 r1288 into r1289;
    gte r1289 5u8 into r1290;
    is.eq r289 1u8 into r1291;
    cast r1291 into r1292 as u8;
    is.eq r293 1u8 into r1293;
    cast r1293 into r1294 as u8;
    add r1292 r1294 into r1295;
    is.eq r297 1u8 into r1296;
    cast r1296 into r1297 as u8;
    add r1295 r1297 into r1298;
    is.eq r301 1u8 into r1299;
    cast r1299 into r1300 as u8;
    add r1298 r1300 into r1301;
    is.eq r305 1u8 into r1302;
    cast r1302 into r1303 as u8;
    add r1301 r1303 into r1304;
    is.eq r309 1u8 into r1305;
    cast r1305 into r1306 as u8;
    add r1304 r1306 into r1307;
    is.eq r311 1u8 into r1308;
    cast r1308 into r1309 as u8;
    add r1307 r1309 into r1310;
    gte r1310 5u8 into r1311;
    is.eq r289 2u8 into r1312;
    cast r1312 into r1313 as u8;
    is.eq r293 2u8 into r1314;
    cast r1314 into r1315 as u8;
    add r1313 r1315 into r1316;
    is.eq r297 2u8 into r1317;
    cast r1317 into r1318 as u8;
    add r1316 r1318 into r1319;
    is.eq r301 2u8 into r1320;
    cast r1320 into r1321 as u8;
    add r1319 r1321 into r1322;
    is.eq r305 2u8 into r1323;
    cast r1323 into r1324 as u8;
    add r1322 r1324 into r1325;
    is.eq r309 2u8 into r1326;
    cast r1326 into r1327 as u8;
    add r1325 r1327 into r1328;
    is.eq r311 2u8 into r1329;
    cast r1329 into r1330 as u8;
    add r1328 r1330 into r1331;
    gte r1331 5u8 into r1332;
    is.eq r289 3u8 into r1333;
    cast r1333 into r1334 as u8;
    is.eq r293 3u8 into r1335;
    cast r1335 into r1336 as u8;
    add r1334 r1336 into r1337;
    is.eq r297 3u8 into r1338;
    cast r1338 into r1339 as u8;
    add r1337 r1339 into r1340;
    is.eq r301 3u8 into r1341;
    cast r1341 into r1342 as u8;
    add r1340 r1342 into r1343;
    is.eq r305 3u8 into r1344;
    cast r1344 into r1345 as u8;
    add r1343 r1345 into r1346;
    is.eq r309 3u8 into r1347;
    cast r1347 into r1348 as u8;
    add r1346 r1348 into r1349;
    is.eq r311 3u8 into r1350;
    cast r1350 into r1351 as u8;
    add r1349 r1351 into r1352;
    gte r1352 5u8 into r1353;
    or r1290 r1311 into r1354;
    or r1354 r1332 into r1355;
    or r1355 r1353 into r1356;
    ternary r1311 1u8 0u8 into r1357;
    ternary r1332 2u8 r1357 into r1358;
    ternary r1353 3u8 r1358 into r1359;
    is.eq r311 r1359 into r1360;
    cast r1360 into r1361 as u8;
    is.eq r309 r1359 into r1362;
    cast r1362 into r1363 as u8;
    is.eq r305 r1359 into r1364;
    cast r1364 into r1365 as u8;
    is.eq r301 r1359 into r1366;
    cast r1366 into r1367 as u8;
    is.eq r297 r1359 into r1368;
    cast r1368 into r1369 as u8;
    is.eq r293 r1359 into r1370;
    cast r1370 into r1371 as u8;
    is.eq r289 r1359 into r1372;
    cast r1372 into r1373 as u8;
    add r1361 r1363 into r1374;
    add r1374 r1365 into r1375;
    add r1375 r1367 into r1376;
    add r1376 r1369 into r1377;
    add r1377 r1371 into r1378;
    is.eq r1361 1u8 into r1379;
    is.eq r1374 1u8 into r1380;
    is.eq r1375 1u8 into r1381;
    is.eq r1376 1u8 into r1382;
    is.eq r1377 1u8 into r1383;
    is.eq r1378 1u8 into r1384;
    is.eq r1361 2u8 into r1385;
    is.eq r1374 2u8 into r1386;
    is.eq r1375 2u8 into r1387;
    is.eq r1376 2u8 into r1388;
    is.eq r1377 2u8 into r1389;
    is.eq r1378 2u8 into r1390;
    is.eq r1361 3u8 into r1391;
    is.eq r1374 3u8 into r1392;
    is.eq r1375 3u8 into r1393;
    is.eq r1376 3u8 into r1394;
    is.eq r1377 3u8 into r1395;
    is.eq r1378 3u8 into r1396;
    is.eq r1361 4u8 into r1397;
    is.eq r1374 4u8 into r1398;
    is.eq r1375 4u8 into r1399;
    is.eq r1376 4u8 into r1400;
    is.eq r1377 4u8 into r1401;
    is.eq r1378 4u8 into r1402;
    is.eq r1361 5u8 into r1403;
    is.eq r1374 5u8 into r1404;
    is.eq r1375 5u8 into r1405;
    is.eq r1376 5u8 into r1406;
    is.eq r1377 5u8 into r1407;
    is.eq r1378 5u8 into r1408;
    ternary r1384 r294 r290 into r1409;
    ternary r1383 r298 r1409 into r1410;
    ternary r1382 r302 r1410 into r1411;
    ternary r1381 r306 r1411 into r1412;
    ternary r1380 r310 r1412 into r1413;
    ternary r1379 r312 r1413 into r1414;
    ternary r1390 r294 r290 into r1415;
    ternary r1389 r298 r1415 into r1416;
    ternary r1388 r302 r1416 into r1417;
    ternary r1387 r306 r1417 into r1418;
    ternary r1386 r310 r1418 into r1419;
    ternary r1385 r312 r1419 into r1420;
    ternary r1396 r294 r290 into r1421;
    ternary r1395 r298 r1421 into r1422;
    ternary r1394 r302 r1422 into r1423;
    ternary r1393 r306 r1423 into r1424;
    ternary r1392 r310 r1424 into r1425;
    ternary r1391 r312 r1425 into r1426;
    ternary r1402 r294 r290 into r1427;
    ternary r1401 r298 r1427 into r1428;
    ternary r1400 r302 r1428 into r1429;
    ternary r1399 r306 r1429 into r1430;
    ternary r1398 r310 r1430 into r1431;
    ternary r1397 r312 r1431 into r1432;
    ternary r1408 r294 r290 into r1433;
    ternary r1407 r298 r1433 into r1434;
    ternary r1406 r302 r1434 into r1435;
    ternary r1405 r306 r1435 into r1436;
    ternary r1404 r310 r1436 into r1437;
    ternary r1403 r312 r1437 into r1438;
    or r1155 r1159 into r1439;
    or r1439 r1163 into r1440;
    or r1440 r1176 into r1441;
    ternary r1163 r306 3u8 into r1442;
    ternary r1159 r310 r1442 into r1443;
    ternary r1155 r312 r1443 into r1444;
    cast r1241 into r1445 as u8;
    cast r1244 into r1446 as u8;
    add r1445 r1446 into r1447;
    cast r1247 into r1448 as u8;
    add r1447 r1448 into r1449;
    cast r1250 into r1450 as u8;
    add r1449 r1450 into r1451;
    cast r1253 into r1452 as u8;
    add r1451 r1452 into r1453;
    cast r1254 into r1454 as u8;
    add r1453 r1454 into r1455;
    gte r1455 2u8 into r1456;
    not r1254 into r1457;
    not r1253 into r1458;
    not r1250 into r1459;
    and r1253 r1457 into r1460;
    and r1250 r1458 into r1461;
    and r1461 r1457 into r1462;
    ternary r1462 r306 r1261 into r1463;
    ternary r1460 r310 r1463 into r1464;
    not r1247 into r1465;
    not r1244 into r1466;
    ternary r1466 r298 r294 into r1467;
    ternary r1465 r302 r1467 into r1468;
    ternary r1459 r306 r1468 into r1469;
    ternary r1458 r310 r1469 into r1470;
    ternary r1457 r312 r1470 into r1471;
    ternary r1231 r302 r312 into r1472;
    ternary r1222 r298 r310 into r1473;
    ternary r1231 r298 r1473 into r1474;
    ternary r1254 r306 r312 into r1475;
    ternary r1253 r302 r310 into r1476;
    ternary r1254 r302 r1476 into r1477;
    ternary r1250 r298 r306 into r1478;
    ternary r1253 r298 r1478 into r1479;
    ternary r1254 r298 r1479 into r1480;
    cast r1186 into r1481 as u32;
    or 2415919104u32 r1481 into r1482;
    cast r1229 into r1483 as u32;
    shl r1483 4u8 into r1484;
    or 2147483648u32 r1484 into r1485;
    cast r1230 into r1486 as u32;
    or r1485 r1486 into r1487;
    cast r1239 into r1488 as u32;
    shl r1488 4u8 into r1489;
    or 1879048192u32 r1489 into r1490;
    cast r1264 into r1491 as u32;
    or r1490 r1491 into r1492;
    cast r1414 into r1493 as u32;
    shl r1493 16u8 into r1494;
    or 1610612736u32 r1494 into r1495;
    cast r1420 into r1496 as u32;
    shl r1496 12u8 into r1497;
    or r1495 r1497 into r1498;
    cast r1426 into r1499 as u32;
    shl r1499 8u8 into r1500;
    or r1498 r1500 into r1501;
    cast r1432 into r1502 as u32;
    shl r1502 4u8 into r1503;
    or r1501 r1503 into r1504;
    cast r1438 into r1505 as u32;
    or r1504 r1505 into r1506;
    cast r1444 into r1507 as u32;
    or 1342177280u32 r1507 into r1508;
    cast r1239 into r1509 as u32;
    shl r1509 8u8 into r1510;
    or 1073741824u32 r1510 into r1511;
    cast r1472 into r1512 as u32;
    shl r1512 4u8 into r1513;
    or r1511 r1513 into r1514;
    cast r1474 into r1515 as u32;
    or r1514 r1515 into r1516;
    cast r1264 into r1517 as u32;
    shl r1517 8u8 into r1518;
    or 805306368u32 r1518 into r1519;
    cast r1464 into r1520 as u32;
    shl r1520 4u8 into r1521;
    or r1519 r1521 into r1522;
    cast r1471 into r1523 as u32;
    or r1522 r1523 into r1524;
    cast r1264 into r1525 as u32;
    shl r1525 12u8 into r1526;
    or 536870912u32 r1526 into r1527;
    cast r1475 into r1528 as u32;
    shl r1528 8u8 into r1529;
    or r1527 r1529 into r1530;
    cast r1477 into r1531 as u32;
    shl r1531 4u8 into r1532;
    or r1530 r1532 into r1533;
    cast r1480 into r1534 as u32;
    or r1533 r1534 into r1535;
    cast r312 into r1536 as u32;
    shl r1536 16u8 into r1537;
    or 268435456u32 r1537 into r1538;
    cast r310 into r1539 as u32;
    shl r1539 12u8 into r1540;
    or r1538 r1540 into r1541;
    cast r306 into r1542 as u32;
    shl r1542 8u8 into r1543;
    or r1541 r1543 into r1544;
    cast r302 into r1545 as u32;
    shl r1545 4u8 into r1546;
    or r1544 r1546 into r1547;
    cast r298 into r1548 as u32;
    or r1547 r1548 into r1549;
    ternary r1269 r1535 r1549 into r1550;
    ternary r1456 r1524 r1550 into r1551;
    ternary r1267 r1516 r1551 into r1552;
    ternary r1441 r1508 r1552 into r1553;
    ternary r1356 r1506 r1553 into r1554;
    ternary r1265 r1492 r1554 into r1555;
    ternary r1226 r1487 r1555 into r1556;
    ternary r1209 r1482 r1556 into r1557;
    lte r18.player1_bet r18.player2_bet into r1558;
    lte r18.player1_bet r18.player3_bet into r1559;
    and r1558 r1559 into r1560;
    lte r18.player2_bet r18.player3_bet into r1561;
    ternary r1561 r18.player2_bet r18.player3_bet into r1562;
    ternary r1560 r18.player1_bet r1562 into r1563;
    gte r18.player1_bet r18.player2_bet into r1564;
    gte r18.player1_bet r18.player3_bet into r1565;
    and r1564 r1565 into r1566;
    gte r18.player2_bet r18.player3_bet into r1567;
    ternary r1567 r18.player2_bet r18.player3_bet into r1568;
    ternary r1566 r18.player1_bet r1568 into r1569;
    is.neq r18.player1_bet r1563 into r1570;
    is.neq r18.player1_bet r1569 into r1571;
    and r1570 r1571 into r1572;
    is.neq r18.player2_bet r1563 into r1573;
    is.neq r18.player2_bet r1569 into r1574;
    and r1573 r1574 into r1575;
    ternary r1575 r18.player2_bet r18.player3_bet into r1576;
    ternary r1572 r18.player1_bet r1576 into r1577;
    gte r18.player1_bet r1563 into r1578;
    cast r1578 into r1579 as u8;
    gte r18.player2_bet r1563 into r1580;
    cast r1580 into r1581 as u8;
    add r1579 r1581 into r1582;
    gte r18.player3_bet r1563 into r1583;
    cast r1583 into r1584 as u8;
    add r1582 r1584 into r1585;
    gte r18.player1_bet r1577 into r1586;
    cast r1586 into r1587 as u8;
    gte r18.player2_bet r1577 into r1588;
    cast r1588 into r1589 as u8;
    add r1587 r1589 into r1590;
    gte r18.player3_bet r1577 into r1591;
    cast r1591 into r1592 as u8;
    add r1590 r1592 into r1593;
    gte r18.player1_bet r1569 into r1594;
    cast r1594 into r1595 as u8;
    gte r18.player2_bet r1569 into r1596;
    cast r1596 into r1597 as u8;
    add r1595 r1597 into r1598;
    gte r18.player3_bet r1569 into r1599;
    cast r1599 into r1600 as u8;
    add r1598 r1600 into r1601;
    cast r1585 into r1602 as u16;
    mul r1563 r1602 into r1603;
    is.eq r1563 r1577 into r1604;
    sub r1577 r1563 into r1605;
    cast r1593 into r1606 as u16;
    mul r1605 r1606 into r1607;
    ternary r1604 0u16 r1607 into r1608;
    is.eq r1577 r1569 into r1609;
    sub r1569 r1577 into r1610;
    cast r1601 into r1611 as u16;
    mul r1610 r1611 into r1612;
    ternary r1609 0u16 r1612 into r1613;
    gte r727 r1142 into r1614;
    and r25 r1614 into r1615;
    gte r727 r1557 into r1616;
    and r1615 r1616 into r1617;
    gte r1142 r727 into r1618;
    and r32 r1618 into r1619;
    gte r1142 r1557 into r1620;
    and r1619 r1620 into r1621;
    gte r1557 r727 into r1622;
    and r39 r1622 into r1623;
    gte r1557 r1142 into r1624;
    and r1623 r1624 into r1625;
    cast r1617 into r1626 as u8;
    cast r1621 into r1627 as u8;
    add r1626 r1627 into r1628;
    cast r1625 into r1629 as u8;
    add r1628 r1629 into r1630;
    cast r1630 into r1631 as u16;
    div r1603 r1631 into r1632;
    ternary r1617 r1632 0u16 into r1633;
    cast r1630 into r1634 as u16;
    div r1603 r1634 into r1635;
    ternary r1621 r1635 0u16 into r1636;
    cast r1630 into r1637 as u16;
    div r1603 r1637 into r1638;
    ternary r1625 r1638 0u16 into r1639;
    gte r18.player1_bet r1577 into r1640;
    and r25 r1640 into r1641;
    gte r18.player2_bet r1577 into r1642;
    and r32 r1642 into r1643;
    gte r18.player3_bet r1577 into r1644;
    and r39 r1644 into r1645;
    and r1617 r1641 into r1646;
    cast r1646 into r1647 as u8;
    and r1621 r1643 into r1648;
    cast r1648 into r1649 as u8;
    add r1647 r1649 into r1650;
    and r1625 r1645 into r1651;
    cast r1651 into r1652 as u8;
    add r1650 r1652 into r1653;
    gt r1653 0u8 into r1654;
    and r1646 r1654 into r1655;
    cast r1653 into r1656 as u16;
    div r1608 r1656 into r1657;
    ternary r1655 r1657 0u16 into r1658;
    and r1648 r1654 into r1659;
    cast r1653 into r1660 as u16;
    div r1608 r1660 into r1661;
    ternary r1659 r1661 0u16 into r1662;
    and r1651 r1654 into r1663;
    cast r1653 into r1664 as u16;
    div r1608 r1664 into r1665;
    ternary r1663 r1665 0u16 into r1666;
    gte r18.player1_bet r1569 into r1667;
    and r25 r1667 into r1668;
    gte r18.player2_bet r1569 into r1669;
    and r32 r1669 into r1670;
    gte r18.player3_bet r1569 into r1671;
    and r39 r1671 into r1672;
    and r1617 r1668 into r1673;
    cast r1673 into r1674 as u8;
    and r1621 r1670 into r1675;
    cast r1675 into r1676 as u8;
    add r1674 r1676 into r1677;
    and r1625 r1672 into r1678;
    cast r1678 into r1679 as u8;
    add r1677 r1679 into r1680;
    gt r1680 0u8 into r1681;
    and r1673 r1681 into r1682;
    cast r1680 into r1683 as u16;
    div r1613 r1683 into r1684;
    ternary r1682 r1684 0u16 into r1685;
    and r1675 r1681 into r1686;
    cast r1680 into r1687 as u16;
    div r1613 r1687 into r1688;
    ternary r1686 r1688 0u16 into r1689;
    and r1678 r1681 into r1690;
    cast r1680 into r1691 as u16;
    div r1613 r1691 into r1692;
    ternary r1690 r1692 0u16 into r1693;
    add r1633 r1658 into r1694;
    add r1694 r1685 into r1695;
    add r1636 r1662 into r1696;
    add r1696 r1689 into r1697;
    add r1639 r1666 into r1698;
    add r1698 r1693 into r1699;
    add r18.player1 r1695 into r1700;
    add r18.player2 r1697 into r1701;
    add r18.player3 r1699 into r1702;
    cast r1700 r1701 r1702 0u16 0u16 0u16 into r1703 as Chips;
    is.eq r1703.player1 0u16 into r1704;
    ternary r1704 1u8 0u8 into r1705;
    is.eq r1703.player2 0u16 into r1706;
    ternary r1706 2u8 0u8 into r1707;
    or r1705 r1707 into r1708;
    is.eq r1703.player3 0u16 into r1709;
    ternary r1709 4u8 0u8 into r1710;
    or r1708 r1710 into r1711;
    is.eq r1711 6u8 into r1712;
    branch.eq r1712 false to end_then_0_6;
    set r1703 into chips[r0];
    branch.eq true true to end_otherwise_0_7;
    position end_then_0_6;
    is.eq r1711 5u8 into r1713;
    branch.eq r1713 false to end_then_1_8;
    set r1703 into chips[r0];
    branch.eq true true to end_otherwise_1_9;
    position end_then_1_8;
    is.eq r1711 3u8 into r1714;
    branch.eq r1714 false to end_then_2_10;
    set r1703 into chips[r0];
    branch.eq true true to end_otherwise_2_11;
    position end_then_2_10;
    position end_otherwise_2_11;
    position end_otherwise_1_9;
    position end_otherwise_0_7;
    and r2.dealer_button 1u8 into r1715;
    is.neq r1715 0u8 into r1716;
    and r2.dealer_button 2u8 into r1717;
    is.neq r1717 0u8 into r1718;
    ternary r1718 4u8 1u8 into r1719;
    ternary r1716 2u8 r1719 into r1720;
    sub r2.remaining_hands 1u8 into r1721;
    is.eq r1721 0u8 into r1722;
    shl r2.sb 1u8 into r1723;
    shl r2.bb 1u8 into r1724;
    ternary r1722 r1723 r2.sb into r1725;
    ternary r1722 r1724 r2.bb into r1726;
    and r1711 1u8 into r1727;
    is.neq r1727 0u8 into r1728;
    not r1728 into r1729;
    and r1711 2u8 into r1730;
    is.neq r1730 0u8 into r1731;
    not r1731 into r1732;
    ternary r1732 31u8 32u8 into r1733;
    ternary r1729 30u8 r1733 into r1734;
    ternary r1722 10u8 r1721 into r1735;
    add r2.hands_played 1u8 into r1736;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r1734 r1720 r1711 r1711 0u8 r1725 r1726 r1735 r1736 0u16 into r1737 as Game;
    set r1703 into chips[r0];
    set r1737 into games[r0];

constructor:
    assert.eq edition 0u16;
