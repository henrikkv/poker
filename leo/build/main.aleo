import commutative_encryption.aleo;
program mental_poker.aleo;

record Keys:
    owner as address.private;
    secret as scalar.private;
    secret_inv as scalar.private;

struct Game:
    player1 as address;
    player2 as address;
    player3 as address;
    buy_in as u64;
    state as u8;
    dealer_button as u8;
    players_out as u8;
    players_folded as u8;
    last_bet as u8;
    sb as u16;
    bb as u16;
    remaining_hands as u8;
    hands_played as u8;
    last_raise_size as u16;

struct Chips:
    player1 as u16;
    player2 as u16;
    player3 as u16;
    player1_bet as u16;
    player2_bet as u16;
    player3_bet as u16;

struct Cards:
    player1 as [group; 2u32];
    player2 as [group; 2u32];
    player3 as [group; 2u32];
    flop as [group; 3u32];
    turn as group;
    river as group;

struct RevealedCards:
    player1 as [u8; 2u32];
    player2 as [u8; 2u32];
    player3 as [u8; 2u32];
    flop as [u8; 3u32];
    turn as u8;
    river as u8;

mapping games:
    key as u32.public;
    value as Game.public;

mapping decks:
    key as u32.public;
    value as [[group; 26u32]; 2u32].public;

mapping chips:
    key as u32.public;
    value as Chips.public;

mapping cards:
    key as u32.public;
    value as Cards.public;

mapping revealed_cards:
    key as u32.public;
    value as RevealedCards.public;

function create_game:
    input r0 as u32.private;
    input r1 as [[group; 26u32]; 2u32].private;
    input r2 as scalar.private;
    input r3 as scalar.private;
    call commutative_encryption.aleo/initialize_deck into r4;
    call commutative_encryption.aleo/verify_permutation r4 r1;
    call commutative_encryption.aleo/encrypt_deck r2 r1 into r5;
    call commutative_encryption.aleo/decrypt_card r3 r5[0u32][0u32] into r6;
    assert.eq r6 r1[0u32][0u32];
    cast self.signer r2 r3 into r7 as Keys.record;
    async create_game r0 r5 self.signer into r8;
    output r7 as Keys.record;
    output r8 as mental_poker.aleo/create_game.future;

finalize create_game:
    input r0 as u32.public;
    input r1 as [[group; 26u32]; 2u32].public;
    input r2 as address.public;
    cast r2 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc 10u64 0u8 1u8 0u8 0u8 0u8 5u16 10u16 10u8 0u8 0u16 into r3 as Game;
    set r3 into games[r0];
    set r1 into decks[r0];

function join_game:
    input r0 as u32.private;
    input r1 as [[group; 26u32]; 2u32].private;
    input r2 as [[group; 26u32]; 2u32].private;
    input r3 as scalar.private;
    input r4 as scalar.private;
    call commutative_encryption.aleo/verify_permutation r1 r2;
    call commutative_encryption.aleo/encrypt_deck r3 r2 into r5;
    call commutative_encryption.aleo/decrypt_card r4 r5[0u32][0u32] into r6;
    assert.eq r6 r2[0u32][0u32];
    cast self.signer r3 r4 into r7 as Keys.record;
    async join_game r0 r1 r5 self.signer into r8;
    output r7 as Keys.record;
    output r8 as mental_poker.aleo/join_game.future;

finalize join_game:
    input r0 as u32.public;
    input r1 as [[group; 26u32]; 2u32].public;
    input r2 as [[group; 26u32]; 2u32].public;
    input r3 as address.public;
    get games[r0] into r4;
    get decks[r0] into r5;
    is.eq r5 r1 into r6;
    assert.eq r6 true;
    is.eq r4.state 0u8 into r7;
    is.eq r4.state 1u8 into r8;
    or r7 r8 into r9;
    assert.eq r9 true;
    ternary r7 r3 r4.player2 into r10;
    not r7 into r11;
    ternary r11 r3 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r12;
    ternary r7 1u8 2u8 into r13;
    cast r4.player1 r10 r12 r4.buy_in r13 r4.dealer_button 0u8 0u8 0u8 r4.sb r4.bb r4.remaining_hands 0u8 0u16 into r14 as Game;
    set r14 into games[r0];
    set r2 into decks[r0];
    not r7 into r15;
    branch.eq r15 false to end_then_0_0;
    sub 1000u16 r4.sb into r16;
    sub 1000u16 r4.bb into r17;
    cast r16 r17 1000u16 r4.sb r4.bb 0u16 into r18 as Chips;
    cast r2[0u32][0u32] r2[0u32][3u32] into r19 as [group; 2u32];
    cast r2[0u32][1u32] r2[0u32][4u32] into r20 as [group; 2u32];
    cast r2[0u32][2u32] r2[0u32][5u32] into r21 as [group; 2u32];
    cast r2[0u32][7u32] r2[0u32][8u32] r2[0u32][9u32] into r22 as [group; 3u32];
    cast r19 r20 r21 r22 r2[0u32][11u32] r2[0u32][13u32] into r23 as Cards;
    cast 255u8 255u8 into r24 as [u8; 2u32];
    cast 255u8 255u8 into r25 as [u8; 2u32];
    cast 255u8 255u8 into r26 as [u8; 2u32];
    cast 255u8 255u8 255u8 into r27 as [u8; 3u32];
    cast r24 r25 r26 r27 255u8 255u8 into r28 as RevealedCards;
    set r18 into chips[r0];
    set r23 into cards[r0];
    set r28 into revealed_cards[r0];
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;

function bet:
    input r0 as u32.private;
    input r1 as u16.private;
    async bet r0 r1 self.signer into r2;
    output r2 as mental_poker.aleo/bet.future;

finalize bet:
    input r0 as u32.public;
    input r1 as u16.public;
    input r2 as address.public;
    get games[r0] into r3;
    get chips[r0] into r4;
    is.eq r3.player1 r2 into r5;
    is.eq r3.state 5u8 into r6;
    is.eq r3.state 11u8 into r7;
    or r6 r7 into r8;
    is.eq r3.state 17u8 into r9;
    or r8 r9 into r10;
    is.eq r3.state 23u8 into r11;
    or r10 r11 into r12;
    and r5 r12 into r13;
    is.eq r3.player2 r2 into r14;
    is.eq r3.state 6u8 into r15;
    is.eq r3.state 12u8 into r16;
    or r15 r16 into r17;
    is.eq r3.state 18u8 into r18;
    or r17 r18 into r19;
    is.eq r3.state 24u8 into r20;
    or r19 r20 into r21;
    and r14 r21 into r22;
    is.eq r3.player3 r2 into r23;
    is.eq r3.state 7u8 into r24;
    is.eq r3.state 13u8 into r25;
    or r24 r25 into r26;
    is.eq r3.state 19u8 into r27;
    or r26 r27 into r28;
    is.eq r3.state 25u8 into r29;
    or r28 r29 into r30;
    and r23 r30 into r31;
    or r13 r22 into r32;
    or r32 r31 into r33;
    assert.eq r33 true;
    ternary r22 r4.player2 r4.player3 into r34;
    ternary r22 r4.player2_bet r4.player3_bet into r35;
    ternary r13 r4.player1 r34 into r36;
    ternary r13 r4.player1_bet r35 into r37;
    gte r4.player1_bet r4.player2_bet into r38;
    gte r4.player1_bet r4.player3_bet into r39;
    and r38 r39 into r40;
    gte r4.player2_bet r4.player3_bet into r41;
    ternary r41 r4.player2_bet r4.player3_bet into r42;
    ternary r40 r4.player1_bet r42 into r43;
    is.eq r43 0u16 into r44;
    is.eq r3.last_raise_size 0u16 into r45;
    ternary r45 r3.bb r3.last_raise_size into r46;
    ternary r44 r3.bb r46 into r47;
    add r43 r47 into r48;
    sub r43 r37 into r49;
    is.eq r43 0u16 into r50;
    ternary r50 r3.bb r49 into r51;
    is.eq r1 r36 into r52;
    gte r1 r51 into r53;
    or r52 r53 into r54;
    assert.eq r54 true;
    add r37 r1 into r55;
    sub r36 r1 into r56;
    is.eq r56 0u16 into r57;
    gte r55 r48 into r58;
    gt r55 r43 into r59;
    not r58 into r60;
    and r59 r60 into r61;
    and r61 r57 into r62;
    is.eq r4.player1 0u16 into r63;
    and r3.players_folded 1u8 into r64;
    is.neq r64 0u8 into r65;
    or r63 r65 into r66;
    and r3.players_out 1u8 into r67;
    is.neq r67 0u8 into r68;
    or r66 r68 into r69;
    is.eq r4.player2 0u16 into r70;
    and r3.players_folded 2u8 into r71;
    is.neq r71 0u8 into r72;
    or r70 r72 into r73;
    and r3.players_out 2u8 into r74;
    is.neq r74 0u8 into r75;
    or r73 r75 into r76;
    is.eq r4.player3 0u16 into r77;
    and r3.players_folded 4u8 into r78;
    is.neq r78 0u8 into r79;
    or r77 r79 into r80;
    and r3.players_out 4u8 into r81;
    is.neq r81 0u8 into r82;
    or r80 r82 into r83;
    not r69 into r84;
    cast r84 into r85 as u8;
    not r76 into r86;
    cast r86 into r87 as u8;
    add r85 r87 into r88;
    not r83 into r89;
    cast r89 into r90 as u8;
    add r88 r90 into r91;
    gt r91 1u8 into r92;
    is.eq r91 1u8 into r93;
    lt r37 r43 into r94;
    and r93 r94 into r95;
    or r92 r95 into r96;
    assert.eq r96 true;
    cast r57 into r97 as u8;
    sub r91 r97 into r98;
    is.eq r4.player1 0u16 into r99;
    lt r4.player1_bet r43 into r100;
    and r99 r100 into r101;
    is.eq r4.player2 0u16 into r102;
    lt r4.player2_bet r43 into r103;
    and r102 r103 into r104;
    or r101 r104 into r105;
    is.eq r4.player3 0u16 into r106;
    lt r4.player3_bet r43 into r107;
    and r106 r107 into r108;
    or r105 r108 into r109;
    and r3.last_bet 1u8 into r110;
    is.neq r110 0u8 into r111;
    and r13 r111 into r112;
    and r3.last_bet 2u8 into r113;
    is.neq r113 0u8 into r114;
    and r22 r114 into r115;
    or r112 r115 into r116;
    and r3.last_bet 4u8 into r117;
    is.neq r117 0u8 into r118;
    and r31 r118 into r119;
    or r116 r119 into r120;
    is.eq r55 r43 into r121;
    is.eq r4.player1_bet r43 into r122;
    ternary r13 r121 r122 into r123;
    or r69 r123 into r124;
    is.eq r55 r43 into r125;
    is.eq r4.player2_bet r43 into r126;
    ternary r22 r125 r126 into r127;
    or r76 r127 into r128;
    is.eq r55 r43 into r129;
    is.eq r4.player3_bet r43 into r130;
    ternary r31 r129 r130 into r131;
    or r83 r131 into r132;
    and r124 r128 into r133;
    and r133 r132 into r134;
    lte r3.state 7u8 into r135;
    gte r3.state 11u8 into r136;
    lte r3.state 13u8 into r137;
    and r136 r137 into r138;
    gte r3.state 17u8 into r139;
    lte r3.state 19u8 into r140;
    and r139 r140 into r141;
    and r3.players_out 1u8 into r142;
    is.neq r142 0u8 into r143;
    and r3.players_out 2u8 into r144;
    is.neq r144 0u8 into r145;
    ternary r145 10u8 9u8 into r146;
    ternary r143 r146 8u8 into r147;
    ternary r145 16u8 15u8 into r148;
    ternary r143 r148 14u8 into r149;
    ternary r145 22u8 21u8 into r150;
    ternary r143 r150 20u8 into r151;
    ternary r76 28u8 27u8 into r152;
    ternary r69 r152 26u8 into r153;
    ternary r141 r151 r153 into r154;
    ternary r138 r149 r154 into r155;
    ternary r135 r147 r155 into r156;
    ternary r141 17u8 23u8 into r157;
    ternary r138 11u8 r157 into r158;
    ternary r135 5u8 r158 into r159;
    ternary r76 2u8 1u8 into r160;
    ternary r83 0u8 2u8 into r161;
    ternary r69 1u8 0u8 into r162;
    ternary r22 r161 r162 into r163;
    ternary r13 r160 r163 into r164;
    add r159 r164 into r165;
    lte r98 1u8 into r166;
    gte r55 r43 into r167;
    and r167 r134 into r168;
    is.eq r3.last_bet 0u8 into r169;
    or r120 r169 into r170;
    or r170 r62 into r171;
    not r58 into r172;
    and r109 r172 into r173;
    and r173 r120 into r174;
    or r171 r174 into r175;
    and r168 r175 into r176;
    or r166 r176 into r177;
    ternary r177 r156 r165 into r178;
    ternary r22 2u8 4u8 into r179;
    ternary r13 1u8 r179 into r180;
    ternary r58 r180 r3.last_bet into r181;
    add r4.player1_bet r4.player2_bet into r182;
    add r182 r4.player3_bet into r183;
    add r183 r1 into r184;
    ternary r13 r56 r4.player1 into r185;
    ternary r22 r56 r4.player2 into r186;
    ternary r31 r56 r4.player3 into r187;
    ternary r13 r55 r4.player1_bet into r188;
    ternary r22 r55 r4.player2_bet into r189;
    ternary r31 r55 r4.player3_bet into r190;
    cast r185 r186 r187 r188 r189 r190 into r191 as Chips;
    sub r55 r43 into r192;
    ternary r58 r192 r3.last_raise_size into r193;
    cast r3.player1 r3.player2 r3.player3 r3.buy_in r178 r3.dealer_button r3.players_out r3.players_folded r181 r3.sb r3.bb r3.remaining_hands r3.hands_played r193 into r194 as Game;
    set r191 into chips[r0];
    set r194 into games[r0];

function decrypt_hands:
    input r0 as u32.private;
    input r1 as [group; 2u32].private;
    input r2 as [group; 2u32].private;
    input r3 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r1[0u32] into r4;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r1[1u32] into r5;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r2[0u32] into r6;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r2[1u32] into r7;
    cast r4 r5 into r8 as [group; 2u32];
    cast r6 r7 into r9 as [group; 2u32];
    async decrypt_hands r0 r1 r2 r8 r9 self.signer into r10;
    cast r3.owner r3.secret r3.secret_inv into r11 as Keys.record;
    output r11 as Keys.record;
    output r10 as mental_poker.aleo/decrypt_hands.future;

finalize decrypt_hands:
    input r0 as u32.public;
    input r1 as [group; 2u32].public;
    input r2 as [group; 2u32].public;
    input r3 as [group; 2u32].public;
    input r4 as [group; 2u32].public;
    input r5 as address.public;
    get cards[r0] into r6;
    get games[r0] into r7;
    is.eq r7.player1 r5 into r8;
    is.eq r7.state 2u8 into r9;
    and r8 r9 into r10;
    is.eq r7.player2 r5 into r11;
    is.eq r7.state 3u8 into r12;
    and r11 r12 into r13;
    is.eq r7.player3 r5 into r14;
    is.eq r7.state 4u8 into r15;
    and r14 r15 into r16;
    or r10 r13 into r17;
    or r17 r16 into r18;
    assert.eq r18 true;
    is.eq r6.player2 r1 into r19;
    and r10 r19 into r20;
    is.eq r6.player3 r2 into r21;
    and r20 r21 into r22;
    is.eq r6.player1 r1 into r23;
    and r13 r23 into r24;
    is.eq r6.player3 r2 into r25;
    and r24 r25 into r26;
    or r22 r26 into r27;
    is.eq r6.player1 r1 into r28;
    and r16 r28 into r29;
    is.eq r6.player2 r2 into r30;
    and r29 r30 into r31;
    or r27 r31 into r32;
    assert.eq r32 true;
    ternary r10 r6.player1[0u32] r3[0u32] into r33;
    ternary r10 r6.player1[1u32] r3[1u32] into r34;
    cast r33 r34 into r35 as [group; 2u32];
    ternary r10 r3[0u32] r4[0u32] into r36;
    ternary r10 r3[1u32] r4[1u32] into r37;
    cast r36 r37 into r38 as [group; 2u32];
    ternary r13 r6.player2[0u32] r38[0u32] into r39;
    ternary r13 r6.player2[1u32] r38[1u32] into r40;
    cast r39 r40 into r41 as [group; 2u32];
    ternary r16 r6.player3[0u32] r4[0u32] into r42;
    ternary r16 r6.player3[1u32] r4[1u32] into r43;
    cast r42 r43 into r44 as [group; 2u32];
    cast r35 r41 r44 r6.flop r6.turn r6.river into r45 as Cards;
    and r7.players_out 1u8 into r46;
    is.neq r46 0u8 into r47;
    and r7.players_out 2u8 into r48;
    is.neq r48 0u8 into r49;
    and r7.players_out 4u8 into r50;
    is.neq r50 0u8 into r51;
    and r7.players_folded 1u8 into r52;
    is.neq r52 0u8 into r53;
    and r7.players_folded 2u8 into r54;
    is.neq r54 0u8 into r55;
    and r7.players_folded 4u8 into r56;
    is.neq r56 0u8 into r57;
    and r7.dealer_button 1u8 into r58;
    is.neq r58 0u8 into r59;
    and r7.dealer_button 2u8 into r60;
    is.neq r60 0u8 into r61;
    or r47 r53 into r62;
    ternary r61 2u8 1u8 into r63;
    or r49 r55 into r64;
    ternary r59 2u8 0u8 into r65;
    or r51 r57 into r66;
    ternary r61 0u8 1u8 into r67;
    ternary r61 0u8 1u8 into r68;
    ternary r59 2u8 r68 into r69;
    ternary r66 r67 r69 into r70;
    ternary r64 r65 r70 into r71;
    ternary r62 r63 r71 into r72;
    add 5u8 r72 into r73;
    ternary r61 4u8 1u8 into r74;
    ternary r59 2u8 r74 into r75;
    ternary r49 r73 3u8 into r76;
    ternary r51 r73 4u8 into r77;
    ternary r13 r77 r73 into r78;
    ternary r10 r76 r78 into r79;
    ternary r51 r75 r7.last_bet into r80;
    ternary r13 r80 r75 into r81;
    ternary r10 r7.last_bet r81 into r82;
    cast r7.player1 r7.player2 r7.player3 r7.buy_in r79 r7.dealer_button r7.players_out r7.players_folded r82 r7.sb r7.bb r7.remaining_hands r7.hands_played r7.last_raise_size into r83 as Game;
    set r45 into cards[r0];
    set r83 into games[r0];

function decrypt_flop:
    input r0 as u32.private;
    input r1 as [group; 3u32].private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[0u32] into r3;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[1u32] into r4;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[2u32] into r5;
    cast r3 r4 r5 into r6 as [group; 3u32];
    call commutative_encryption.aleo/to_u8 r3 into r7;
    call commutative_encryption.aleo/to_u8 r4 into r8;
    call commutative_encryption.aleo/to_u8 r5 into r9;
    cast r7 r8 r9 into r10 as [u8; 3u32];
    async decrypt_flop r0 r1 r6 r10 self.signer into r11;
    cast r2.owner r2.secret r2.secret_inv into r12 as Keys.record;
    output r12 as Keys.record;
    output r11 as mental_poker.aleo/decrypt_flop.future;

finalize decrypt_flop:
    input r0 as u32.public;
    input r1 as [group; 3u32].public;
    input r2 as [group; 3u32].public;
    input r3 as [u8; 3u32].public;
    input r4 as address.public;
    get cards[r0] into r5;
    get games[r0] into r6;
    is.eq r4 r6.player1 into r7;
    is.eq r6.state 8u8 into r8;
    and r7 r8 into r9;
    is.eq r4 r6.player2 into r10;
    is.eq r6.state 9u8 into r11;
    and r10 r11 into r12;
    is.eq r4 r6.player3 into r13;
    is.eq r6.state 10u8 into r14;
    and r13 r14 into r15;
    or r9 r12 into r16;
    or r16 r15 into r17;
    assert.eq r17 true;
    assert.eq r1 r5.flop;
    cast r5.player1 r5.player2 r5.player3 r2 r5.turn r5.river into r18 as Cards;
    get revealed_cards[r0] into r19;
    cast r19.player1 r19.player2 r19.player3 r3 r19.turn r19.river into r20 as RevealedCards;
    set r20 into revealed_cards[r0];
    get chips[r0] into r21;
    is.eq r21.player1 0u16 into r22;
    and r6.players_folded 1u8 into r23;
    is.neq r23 0u8 into r24;
    or r22 r24 into r25;
    is.eq r21.player2 0u16 into r26;
    and r6.players_folded 2u8 into r27;
    is.neq r27 0u8 into r28;
    or r26 r28 into r29;
    is.eq r21.player3 0u16 into r30;
    and r6.players_folded 4u8 into r31;
    is.neq r31 0u8 into r32;
    or r30 r32 into r33;
    not r25 into r34;
    cast r34 into r35 as u8;
    not r29 into r36;
    cast r36 into r37 as u8;
    add r35 r37 into r38;
    not r33 into r39;
    cast r39 into r40 as u8;
    add r38 r40 into r41;
    lte r41 1u8 into r42;
    is.eq r21.player1 0u16 into r43;
    is.eq r21.player2 0u16 into r44;
    and r43 r44 into r45;
    is.eq r21.player3 0u16 into r46;
    and r45 r46 into r47;
    or r42 r47 into r48;
    and r6.players_out 2u8 into r49;
    is.neq r49 0u8 into r50;
    not r50 into r51;
    ternary r51 9u8 10u8 into r52;
    and r6.players_out 4u8 into r53;
    is.neq r53 0u8 into r54;
    not r54 into r55;
    and r6.dealer_button 1u8 into r56;
    is.neq r56 0u8 into r57;
    not r29 into r58;
    not r33 into r59;
    ternary r59 13u8 11u8 into r60;
    ternary r58 12u8 r60 into r61;
    and r6.dealer_button 2u8 into r62;
    is.neq r62 0u8 into r63;
    not r33 into r64;
    not r25 into r65;
    ternary r65 11u8 12u8 into r66;
    ternary r64 13u8 r66 into r67;
    not r25 into r68;
    not r29 into r69;
    ternary r69 12u8 13u8 into r70;
    ternary r68 11u8 r70 into r71;
    ternary r63 r67 r71 into r72;
    ternary r57 r61 r72 into r73;
    ternary r48 14u8 r73 into r74;
    ternary r55 10u8 r74 into r75;
    and r6.dealer_button 1u8 into r76;
    is.neq r76 0u8 into r77;
    not r29 into r78;
    not r33 into r79;
    ternary r79 13u8 11u8 into r80;
    ternary r78 12u8 r80 into r81;
    and r6.dealer_button 2u8 into r82;
    is.neq r82 0u8 into r83;
    not r33 into r84;
    not r25 into r85;
    ternary r85 11u8 12u8 into r86;
    ternary r84 13u8 r86 into r87;
    not r25 into r88;
    not r29 into r89;
    ternary r89 12u8 13u8 into r90;
    ternary r88 11u8 r90 into r91;
    ternary r83 r87 r91 into r92;
    ternary r77 r81 r92 into r93;
    ternary r48 14u8 r93 into r94;
    ternary r12 r75 r94 into r95;
    ternary r9 r52 r95 into r96;
    or r9 r12 into r97;
    and r6.dealer_button 1u8 into r98;
    is.neq r98 0u8 into r99;
    not r25 into r100;
    not r33 into r101;
    ternary r101 4u8 2u8 into r102;
    ternary r100 1u8 r102 into r103;
    and r6.dealer_button 2u8 into r104;
    is.neq r104 0u8 into r105;
    not r29 into r106;
    not r25 into r107;
    ternary r107 1u8 4u8 into r108;
    ternary r106 2u8 r108 into r109;
    not r33 into r110;
    not r29 into r111;
    ternary r111 2u8 1u8 into r112;
    ternary r110 4u8 r112 into r113;
    ternary r105 r109 r113 into r114;
    ternary r99 r103 r114 into r115;
    ternary r97 0u8 r115 into r116;
    ternary r15 0u16 r6.last_raise_size into r117;
    cast r6.player1 r6.player2 r6.player3 r6.buy_in r96 r6.dealer_button r6.players_out r6.players_folded r116 r6.sb r6.bb r6.remaining_hands r6.hands_played r117 into r118 as Game;
    set r18 into cards[r0];
    set r118 into games[r0];

function fold:
    input r0 as u32.private;
    async fold r0 self.signer into r1;
    output r1 as mental_poker.aleo/fold.future;

finalize fold:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    get chips[r0] into r3;
    gte r2.state 5u8 into r4;
    lte r2.state 7u8 into r5;
    and r4 r5 into r6;
    gte r2.state 11u8 into r7;
    lte r2.state 13u8 into r8;
    and r7 r8 into r9;
    or r6 r9 into r10;
    gte r2.state 17u8 into r11;
    lte r2.state 19u8 into r12;
    and r11 r12 into r13;
    or r10 r13 into r14;
    gte r2.state 23u8 into r15;
    lte r2.state 25u8 into r16;
    and r15 r16 into r17;
    or r14 r17 into r18;
    assert.eq r18 true;
    is.eq r2.player1 r1 into r19;
    is.eq r2.player2 r1 into r20;
    is.eq r2.player3 r1 into r21;
    or r19 r20 into r22;
    or r22 r21 into r23;
    assert.eq r23 true;
    ternary r20 2u8 4u8 into r24;
    ternary r19 1u8 r24 into r25;
    or r2.players_folded r25 into r26;
    and r26 1u8 into r27;
    is.neq r27 0u8 into r28;
    ternary r28 1u8 0u8 into r29;
    sub 3u8 r29 into r30;
    and r26 2u8 into r31;
    is.neq r31 0u8 into r32;
    ternary r32 1u8 0u8 into r33;
    sub r30 r33 into r34;
    and r26 4u8 into r35;
    is.neq r35 0u8 into r36;
    ternary r36 1u8 0u8 into r37;
    sub r34 r37 into r38;
    is.eq r38 1u8 into r39;
    branch.eq r39 false to end_then_0_2;
    add r3.player1_bet r3.player2_bet into r40;
    add r40 r3.player3_bet into r41;
    and r26 1u8 into r42;
    is.neq r42 0u8 into r43;
    not r43 into r44;
    add r3.player1 r41 into r45;
    ternary r44 r45 r3.player1 into r46;
    and r26 2u8 into r47;
    is.neq r47 0u8 into r48;
    not r48 into r49;
    add r3.player2 r41 into r50;
    ternary r49 r50 r3.player2 into r51;
    and r26 4u8 into r52;
    is.neq r52 0u8 into r53;
    not r53 into r54;
    add r3.player3 r41 into r55;
    ternary r54 r55 r3.player3 into r56;
    cast r46 r51 r56 0u16 0u16 0u16 into r57 as Chips;
    and r2.players_out 1u8 into r58;
    is.neq r58 0u8 into r59;
    not r59 into r60;
    and r2.players_out 2u8 into r61;
    is.neq r61 0u8 into r62;
    not r62 into r63;
    ternary r63 31u8 32u8 into r64;
    ternary r60 30u8 r64 into r65;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r65 r2.dealer_button r2.players_out r26 0u8 r2.sb r2.bb r2.remaining_hands r2.hands_played 0u16 into r66 as Game;
    set r57 into chips[r0];
    set r66 into games[r0];
    branch.eq true true to end_otherwise_0_3;
    position end_then_0_2;
    position end_otherwise_0_3;
    gte r3.player1_bet r3.player2_bet into r67;
    gte r3.player1_bet r3.player3_bet into r68;
    and r67 r68 into r69;
    gte r3.player2_bet r3.player3_bet into r70;
    ternary r70 r3.player2_bet r3.player3_bet into r71;
    ternary r69 r3.player1_bet r71 into r72;
    and r26 1u8 into r73;
    is.neq r73 0u8 into r74;
    is.eq r3.player1_bet r72 into r75;
    or r74 r75 into r76;
    and r26 2u8 into r77;
    is.neq r77 0u8 into r78;
    is.eq r3.player2_bet r72 into r79;
    or r78 r79 into r80;
    and r76 r80 into r81;
    and r26 4u8 into r82;
    is.neq r82 0u8 into r83;
    is.eq r3.player3_bet r72 into r84;
    or r83 r84 into r85;
    and r81 r85 into r86;
    lte r2.state 7u8 into r87;
    lte r2.state 13u8 into r88;
    lte r2.state 19u8 into r89;
    ternary r89 17u8 23u8 into r90;
    ternary r88 11u8 r90 into r91;
    ternary r87 5u8 r91 into r92;
    lte r2.state 7u8 into r93;
    and r2.players_out 1u8 into r94;
    is.neq r94 0u8 into r95;
    ternary r95 9u8 8u8 into r96;
    lte r2.state 13u8 into r97;
    and r2.players_out 1u8 into r98;
    is.neq r98 0u8 into r99;
    ternary r99 15u8 14u8 into r100;
    lte r2.state 19u8 into r101;
    and r2.players_out 1u8 into r102;
    is.neq r102 0u8 into r103;
    ternary r103 21u8 20u8 into r104;
    and r2.players_out 1u8 into r105;
    is.neq r105 0u8 into r106;
    ternary r106 27u8 26u8 into r107;
    ternary r101 r104 r107 into r108;
    ternary r97 r100 r108 into r109;
    ternary r93 r96 r109 into r110;
    and r26 2u8 into r111;
    is.neq r111 0u8 into r112;
    add r92 2u8 into r113;
    add r92 1u8 into r114;
    ternary r112 r113 r114 into r115;
    and r26 4u8 into r116;
    is.neq r116 0u8 into r117;
    add r92 2u8 into r118;
    ternary r117 r92 r118 into r119;
    and r26 1u8 into r120;
    is.neq r120 0u8 into r121;
    add r92 1u8 into r122;
    ternary r121 r122 r92 into r123;
    ternary r20 r119 r123 into r124;
    ternary r19 r115 r124 into r125;
    ternary r86 r110 r125 into r126;
    ternary r86 0u8 r2.last_bet into r127;
    ternary r86 0u16 r2.last_raise_size into r128;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r126 r2.dealer_button r2.players_out r26 r127 r2.sb r2.bb r2.remaining_hands r2.hands_played r128 into r129 as Game;
    set r129 into games[r0];

function decrypt_turn_river:
    input r0 as u32.private;
    input r1 as group.private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1 into r3;
    call commutative_encryption.aleo/to_u8 r3 into r4;
    async decrypt_turn_river r0 r1 r3 r4 self.signer into r5;
    cast r2.owner r2.secret r2.secret_inv into r6 as Keys.record;
    output r6 as Keys.record;
    output r5 as mental_poker.aleo/decrypt_turn_river.future;

finalize decrypt_turn_river:
    input r0 as u32.public;
    input r1 as group.public;
    input r2 as group.public;
    input r3 as u8.public;
    input r4 as address.public;
    get cards[r0] into r5;
    get games[r0] into r6;
    is.eq r4 r6.player1 into r7;
    is.eq r4 r6.player2 into r8;
    is.eq r4 r6.player3 into r9;
    is.eq r6.state 14u8 into r10;
    and r7 r10 into r11;
    is.eq r6.state 15u8 into r12;
    and r8 r12 into r13;
    is.eq r6.state 16u8 into r14;
    and r9 r14 into r15;
    is.eq r6.state 20u8 into r16;
    and r7 r16 into r17;
    is.eq r6.state 21u8 into r18;
    and r8 r18 into r19;
    is.eq r6.state 22u8 into r20;
    and r9 r20 into r21;
    or r17 r19 into r22;
    or r22 r21 into r23;
    or r11 r13 into r24;
    or r24 r15 into r25;
    or r25 r23 into r26;
    assert.eq r26 true;
    ternary r23 r5.river r5.turn into r27;
    assert.eq r1 r27;
    ternary r23 r5.turn r2 into r28;
    ternary r23 r2 r5.river into r29;
    cast r5.player1 r5.player2 r5.player3 r5.flop r28 r29 into r30 as Cards;
    or r15 r21 into r31;
    branch.eq r31 false to end_then_0_4;
    get revealed_cards[r0] into r32;
    ternary r15 r3 r32.turn into r33;
    ternary r21 r3 r32.river into r34;
    cast r32.player1 r32.player2 r32.player3 r32.flop r33 r34 into r35 as RevealedCards;
    set r35 into revealed_cards[r0];
    branch.eq true true to end_otherwise_0_5;
    position end_then_0_4;
    position end_otherwise_0_5;
    get chips[r0] into r36;
    is.eq r36.player1 0u16 into r37;
    and r6.players_folded 1u8 into r38;
    is.neq r38 0u8 into r39;
    or r37 r39 into r40;
    is.eq r36.player2 0u16 into r41;
    and r6.players_folded 2u8 into r42;
    is.neq r42 0u8 into r43;
    or r41 r43 into r44;
    is.eq r36.player3 0u16 into r45;
    and r6.players_folded 4u8 into r46;
    is.neq r46 0u8 into r47;
    or r45 r47 into r48;
    not r40 into r49;
    cast r49 into r50 as u8;
    not r44 into r51;
    cast r51 into r52 as u8;
    add r50 r52 into r53;
    not r48 into r54;
    cast r54 into r55 as u8;
    add r53 r55 into r56;
    lte r56 1u8 into r57;
    is.eq r36.player1 0u16 into r58;
    is.eq r36.player2 0u16 into r59;
    and r58 r59 into r60;
    is.eq r36.player3 0u16 into r61;
    and r60 r61 into r62;
    or r57 r62 into r63;
    and r6.players_out 2u8 into r64;
    is.neq r64 0u8 into r65;
    not r65 into r66;
    ternary r66 15u8 16u8 into r67;
    and r6.players_out 4u8 into r68;
    is.neq r68 0u8 into r69;
    not r69 into r70;
    and r6.dealer_button 1u8 into r71;
    is.neq r71 0u8 into r72;
    not r44 into r73;
    not r48 into r74;
    ternary r74 19u8 17u8 into r75;
    ternary r73 18u8 r75 into r76;
    and r6.dealer_button 2u8 into r77;
    is.neq r77 0u8 into r78;
    not r48 into r79;
    not r40 into r80;
    ternary r80 17u8 18u8 into r81;
    ternary r79 19u8 r81 into r82;
    not r40 into r83;
    not r44 into r84;
    ternary r84 18u8 19u8 into r85;
    ternary r83 17u8 r85 into r86;
    ternary r78 r82 r86 into r87;
    ternary r72 r76 r87 into r88;
    ternary r63 20u8 r88 into r89;
    ternary r70 16u8 r89 into r90;
    and r6.dealer_button 1u8 into r91;
    is.neq r91 0u8 into r92;
    not r44 into r93;
    not r48 into r94;
    ternary r94 19u8 17u8 into r95;
    ternary r93 18u8 r95 into r96;
    and r6.dealer_button 2u8 into r97;
    is.neq r97 0u8 into r98;
    not r48 into r99;
    not r40 into r100;
    ternary r100 17u8 18u8 into r101;
    ternary r99 19u8 r101 into r102;
    not r40 into r103;
    not r44 into r104;
    ternary r104 18u8 19u8 into r105;
    ternary r103 17u8 r105 into r106;
    ternary r98 r102 r106 into r107;
    ternary r92 r96 r107 into r108;
    ternary r63 20u8 r108 into r109;
    and r6.players_out 2u8 into r110;
    is.neq r110 0u8 into r111;
    not r111 into r112;
    ternary r112 21u8 22u8 into r113;
    and r6.players_out 4u8 into r114;
    is.neq r114 0u8 into r115;
    not r115 into r116;
    and r6.dealer_button 1u8 into r117;
    is.neq r117 0u8 into r118;
    not r44 into r119;
    not r48 into r120;
    ternary r120 25u8 23u8 into r121;
    ternary r119 24u8 r121 into r122;
    and r6.dealer_button 2u8 into r123;
    is.neq r123 0u8 into r124;
    not r48 into r125;
    not r40 into r126;
    ternary r126 23u8 24u8 into r127;
    ternary r125 25u8 r127 into r128;
    not r40 into r129;
    not r44 into r130;
    ternary r130 24u8 25u8 into r131;
    ternary r129 23u8 r131 into r132;
    ternary r124 r128 r132 into r133;
    ternary r118 r122 r133 into r134;
    ternary r63 26u8 r134 into r135;
    ternary r116 22u8 r135 into r136;
    and r6.dealer_button 1u8 into r137;
    is.neq r137 0u8 into r138;
    not r44 into r139;
    not r48 into r140;
    ternary r140 25u8 23u8 into r141;
    ternary r139 24u8 r141 into r142;
    and r6.dealer_button 2u8 into r143;
    is.neq r143 0u8 into r144;
    not r48 into r145;
    not r40 into r146;
    ternary r146 23u8 24u8 into r147;
    ternary r145 25u8 r147 into r148;
    not r40 into r149;
    not r44 into r150;
    ternary r150 24u8 25u8 into r151;
    ternary r149 23u8 r151 into r152;
    ternary r144 r148 r152 into r153;
    ternary r138 r142 r153 into r154;
    ternary r63 26u8 r154 into r155;
    ternary r19 r136 r155 into r156;
    ternary r17 r113 r156 into r157;
    ternary r15 r109 r157 into r158;
    ternary r13 r90 r158 into r159;
    ternary r11 r67 r159 into r160;
    or r11 r13 into r161;
    or r161 r17 into r162;
    or r162 r19 into r163;
    and r6.dealer_button 1u8 into r164;
    is.neq r164 0u8 into r165;
    not r40 into r166;
    not r48 into r167;
    ternary r167 4u8 2u8 into r168;
    ternary r166 1u8 r168 into r169;
    and r6.dealer_button 2u8 into r170;
    is.neq r170 0u8 into r171;
    not r44 into r172;
    not r40 into r173;
    ternary r173 1u8 4u8 into r174;
    ternary r172 2u8 r174 into r175;
    not r48 into r176;
    not r44 into r177;
    ternary r177 2u8 1u8 into r178;
    ternary r176 4u8 r178 into r179;
    ternary r171 r175 r179 into r180;
    ternary r165 r169 r180 into r181;
    ternary r163 0u8 r181 into r182;
    or r15 r21 into r183;
    ternary r183 0u16 r6.last_raise_size into r184;
    cast r6.player1 r6.player2 r6.player3 r6.buy_in r160 r6.dealer_button r6.players_out r6.players_folded r182 r6.sb r6.bb r6.remaining_hands r6.hands_played r184 into r185 as Game;
    set r30 into cards[r0];
    set r185 into games[r0];

function showdown:
    input r0 as u32.private;
    input r1 as [group; 2u32].private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[0u32] into r3;
    call commutative_encryption.aleo/to_u8 r3 into r4;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[1u32] into r5;
    call commutative_encryption.aleo/to_u8 r5 into r6;
    cast r4 r6 into r7 as [u8; 2u32];
    async showdown r0 self.signer r1 r7 into r8;
    cast r2.owner r2.secret r2.secret_inv into r9 as Keys.record;
    output r9 as Keys.record;
    output r8 as mental_poker.aleo/showdown.future;

finalize showdown:
    input r0 as u32.public;
    input r1 as address.public;
    input r2 as [group; 2u32].public;
    input r3 as [u8; 2u32].public;
    get cards[r0] into r4;
    get games[r0] into r5;
    is.eq r5.state 26u8 into r6;
    is.eq r5.state 27u8 into r7;
    is.eq r5.state 28u8 into r8;
    is.eq r1 r5.player1 into r9;
    is.eq r1 r5.player2 into r10;
    is.eq r1 r5.player3 into r11;
    ternary r11 28u8 255u8 into r12;
    ternary r10 27u8 r12 into r13;
    ternary r9 26u8 r13 into r14;
    assert.eq r5.state r14;
    ternary r7 r4.player2[0u32] r4.player3[0u32] into r15;
    ternary r7 r4.player2[1u32] r4.player3[1u32] into r16;
    cast r15 r16 into r17 as [group; 2u32];
    ternary r6 r4.player1[0u32] r17[0u32] into r18;
    ternary r6 r4.player1[1u32] r17[1u32] into r19;
    cast r18 r19 into r20 as [group; 2u32];
    assert.eq r2 r20;
    get revealed_cards[r0] into r21;
    ternary r6 r3[0u32] r21.player1[0u32] into r22;
    ternary r6 r3[1u32] r21.player1[1u32] into r23;
    cast r22 r23 into r24 as [u8; 2u32];
    ternary r7 r3[0u32] r21.player2[0u32] into r25;
    ternary r7 r3[1u32] r21.player2[1u32] into r26;
    cast r25 r26 into r27 as [u8; 2u32];
    ternary r8 r3[0u32] r21.player3[0u32] into r28;
    ternary r8 r3[1u32] r21.player3[1u32] into r29;
    cast r28 r29 into r30 as [u8; 2u32];
    cast r24 r27 r30 r21.flop r21.turn r21.river into r31 as RevealedCards;
    and r5.players_out 2u8 into r32;
    is.neq r32 0u8 into r33;
    not r33 into r34;
    and r5.players_folded 2u8 into r35;
    is.neq r35 0u8 into r36;
    not r36 into r37;
    and r34 r37 into r38;
    and r5.players_out 4u8 into r39;
    is.neq r39 0u8 into r40;
    not r40 into r41;
    and r5.players_folded 4u8 into r42;
    is.neq r42 0u8 into r43;
    not r43 into r44;
    and r41 r44 into r45;
    ternary r45 28u8 29u8 into r46;
    ternary r38 27u8 r46 into r47;
    ternary r45 28u8 29u8 into r48;
    ternary r7 r48 29u8 into r49;
    ternary r6 r47 r49 into r50;
    cast r5.player1 r5.player2 r5.player3 r5.buy_in r50 r5.dealer_button r5.players_out r5.players_folded r5.last_bet r5.sb r5.bb r5.remaining_hands r5.hands_played r5.last_raise_size into r51 as Game;
    set r31 into revealed_cards[r0];
    set r51 into games[r0];

function compare_hands:
    input r0 as u32.private;
    async compare_hands r0 self.signer into r1;
    output r1 as mental_poker.aleo/compare_hands.future;

finalize compare_hands:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    assert.eq r2.state 29u8;
    and r2.dealer_button 1u8 into r3;
    is.neq r3 0u8 into r4;
    is.eq r2.player1 r1 into r5;
    and r4 r5 into r6;
    and r2.dealer_button 2u8 into r7;
    is.neq r7 0u8 into r8;
    is.eq r2.player2 r1 into r9;
    and r8 r9 into r10;
    or r6 r10 into r11;
    and r2.dealer_button 4u8 into r12;
    is.neq r12 0u8 into r13;
    is.eq r2.player3 r1 into r14;
    and r13 r14 into r15;
    or r11 r15 into r16;
    assert.eq r16 true;
    get revealed_cards[r0] into r17;
    get chips[r0] into r18;
    and r2.players_out 1u8 into r19;
    is.neq r19 0u8 into r20;
    not r20 into r21;
    and r2.players_folded 1u8 into r22;
    is.neq r22 0u8 into r23;
    not r23 into r24;
    and r21 r24 into r25;
    and r2.players_out 2u8 into r26;
    is.neq r26 0u8 into r27;
    not r27 into r28;
    and r2.players_folded 2u8 into r29;
    is.neq r29 0u8 into r30;
    not r30 into r31;
    and r28 r31 into r32;
    and r2.players_out 4u8 into r33;
    is.neq r33 0u8 into r34;
    not r34 into r35;
    and r2.players_folded 4u8 into r36;
    is.neq r36 0u8 into r37;
    not r37 into r38;
    and r35 r38 into r39;
    div r17.flop[0u32] 13u8 into r40;
    rem r17.flop[0u32] 13u8 into r41;
    div r17.flop[1u32] 13u8 into r42;
    rem r17.flop[1u32] 13u8 into r43;
    div r17.flop[2u32] 13u8 into r44;
    rem r17.flop[2u32] 13u8 into r45;
    div r17.turn 13u8 into r46;
    rem r17.turn 13u8 into r47;
    div r17.river 13u8 into r48;
    rem r17.river 13u8 into r49;
    lt r41 r43 into r50;
    ternary r50 r40 r42 into r51;
    ternary r50 r41 r43 into r52;
    ternary r50 r42 r40 into r53;
    ternary r50 r43 r41 into r54;
    lt r54 r45 into r55;
    ternary r55 r53 r44 into r56;
    ternary r55 r54 r45 into r57;
    ternary r55 r44 r53 into r58;
    ternary r55 r45 r54 into r59;
    lt r59 r47 into r60;
    ternary r60 r58 r46 into r61;
    ternary r60 r59 r47 into r62;
    ternary r60 r46 r58 into r63;
    ternary r60 r47 r59 into r64;
    lt r64 r49 into r65;
    ternary r65 r63 r48 into r66;
    ternary r65 r64 r49 into r67;
    ternary r65 r48 r63 into r68;
    ternary r65 r49 r64 into r69;
    lt r52 r57 into r70;
    ternary r70 r51 r56 into r71;
    ternary r70 r52 r57 into r72;
    ternary r70 r56 r51 into r73;
    ternary r70 r57 r52 into r74;
    lt r74 r62 into r75;
    ternary r75 r73 r61 into r76;
    ternary r75 r74 r62 into r77;
    ternary r75 r61 r73 into r78;
    ternary r75 r62 r74 into r79;
    lt r79 r67 into r80;
    ternary r80 r78 r66 into r81;
    ternary r80 r79 r67 into r82;
    ternary r80 r66 r78 into r83;
    ternary r80 r67 r79 into r84;
    lt r84 r69 into r85;
    ternary r85 r83 r68 into r86;
    ternary r85 r84 r69 into r87;
    ternary r85 r68 r83 into r88;
    ternary r85 r69 r84 into r89;
    lt r72 r77 into r90;
    ternary r90 r71 r76 into r91;
    ternary r90 r72 r77 into r92;
    ternary r90 r76 r71 into r93;
    ternary r90 r77 r72 into r94;
    lt r94 r82 into r95;
    ternary r95 r93 r81 into r96;
    ternary r95 r94 r82 into r97;
    ternary r95 r81 r93 into r98;
    ternary r95 r82 r94 into r99;
    lt r99 r87 into r100;
    ternary r100 r98 r86 into r101;
    ternary r100 r99 r87 into r102;
    ternary r100 r86 r98 into r103;
    ternary r100 r87 r99 into r104;
    lt r104 r89 into r105;
    ternary r105 r103 r88 into r106;
    ternary r105 r104 r89 into r107;
    ternary r105 r88 r103 into r108;
    ternary r105 r89 r104 into r109;
    lt r92 r97 into r110;
    ternary r110 r91 r96 into r111;
    ternary r110 r92 r97 into r112;
    ternary r110 r96 r91 into r113;
    ternary r110 r97 r92 into r114;
    lt r114 r102 into r115;
    ternary r115 r113 r101 into r116;
    ternary r115 r114 r102 into r117;
    ternary r115 r101 r113 into r118;
    ternary r115 r102 r114 into r119;
    lt r119 r107 into r120;
    ternary r120 r118 r106 into r121;
    ternary r120 r119 r107 into r122;
    ternary r120 r106 r118 into r123;
    ternary r120 r107 r119 into r124;
    lt r124 r109 into r125;
    ternary r125 r123 r108 into r126;
    ternary r125 r124 r109 into r127;
    ternary r125 r108 r123 into r128;
    ternary r125 r109 r124 into r129;
    ternary r25 r17.player1[0u32] 0u8 into r130;
    ternary r25 r17.player1[1u32] 0u8 into r131;
    div r130 13u8 into r132;
    rem r130 13u8 into r133;
    div r131 13u8 into r134;
    rem r131 13u8 into r135;
    lt r133 r112 into r136;
    lt r133 r117 into r137;
    lt r133 r122 into r138;
    lt r133 r127 into r139;
    lt r133 r129 into r140;
    ternary r136 r132 r111 into r141;
    ternary r136 r133 r112 into r142;
    ternary r137 r132 r116 into r143;
    ternary r137 r133 r117 into r144;
    ternary r136 r111 r143 into r145;
    ternary r136 r112 r144 into r146;
    ternary r138 r132 r121 into r147;
    ternary r138 r133 r122 into r148;
    ternary r137 r116 r147 into r149;
    ternary r137 r117 r148 into r150;
    ternary r139 r132 r126 into r151;
    ternary r139 r133 r127 into r152;
    ternary r138 r121 r151 into r153;
    ternary r138 r122 r152 into r154;
    ternary r140 r132 r128 into r155;
    ternary r140 r133 r129 into r156;
    ternary r139 r126 r155 into r157;
    ternary r139 r127 r156 into r158;
    ternary r140 r128 r132 into r159;
    ternary r140 r129 r133 into r160;
    lt r135 r142 into r161;
    lt r135 r146 into r162;
    lt r135 r150 into r163;
    lt r135 r154 into r164;
    lt r135 r158 into r165;
    lt r135 r160 into r166;
    ternary r161 r134 r141 into r167;
    ternary r161 r135 r142 into r168;
    ternary r162 r134 r145 into r169;
    ternary r162 r135 r146 into r170;
    ternary r161 r141 r169 into r171;
    ternary r161 r142 r170 into r172;
    ternary r163 r134 r149 into r173;
    ternary r163 r135 r150 into r174;
    ternary r162 r145 r173 into r175;
    ternary r162 r146 r174 into r176;
    ternary r164 r134 r153 into r177;
    ternary r164 r135 r154 into r178;
    ternary r163 r149 r177 into r179;
    ternary r163 r150 r178 into r180;
    ternary r165 r134 r157 into r181;
    ternary r165 r135 r158 into r182;
    ternary r164 r153 r181 into r183;
    ternary r164 r154 r182 into r184;
    ternary r166 r134 r159 into r185;
    ternary r166 r135 r160 into r186;
    ternary r165 r157 r185 into r187;
    ternary r165 r158 r186 into r188;
    ternary r166 r159 r134 into r189;
    ternary r166 r160 r135 into r190;
    ternary r32 r17.player2[0u32] 0u8 into r191;
    ternary r32 r17.player2[1u32] 0u8 into r192;
    div r191 13u8 into r193;
    rem r191 13u8 into r194;
    div r192 13u8 into r195;
    rem r192 13u8 into r196;
    lt r194 r112 into r197;
    lt r194 r117 into r198;
    lt r194 r122 into r199;
    lt r194 r127 into r200;
    lt r194 r129 into r201;
    ternary r197 r193 r111 into r202;
    ternary r197 r194 r112 into r203;
    ternary r198 r193 r116 into r204;
    ternary r198 r194 r117 into r205;
    ternary r197 r111 r204 into r206;
    ternary r197 r112 r205 into r207;
    ternary r199 r193 r121 into r208;
    ternary r199 r194 r122 into r209;
    ternary r198 r116 r208 into r210;
    ternary r198 r117 r209 into r211;
    ternary r200 r193 r126 into r212;
    ternary r200 r194 r127 into r213;
    ternary r199 r121 r212 into r214;
    ternary r199 r122 r213 into r215;
    ternary r201 r193 r128 into r216;
    ternary r201 r194 r129 into r217;
    ternary r200 r126 r216 into r218;
    ternary r200 r127 r217 into r219;
    ternary r201 r128 r193 into r220;
    ternary r201 r129 r194 into r221;
    lt r196 r203 into r222;
    lt r196 r207 into r223;
    lt r196 r211 into r224;
    lt r196 r215 into r225;
    lt r196 r219 into r226;
    lt r196 r221 into r227;
    ternary r222 r195 r202 into r228;
    ternary r222 r196 r203 into r229;
    ternary r223 r195 r206 into r230;
    ternary r223 r196 r207 into r231;
    ternary r222 r202 r230 into r232;
    ternary r222 r203 r231 into r233;
    ternary r224 r195 r210 into r234;
    ternary r224 r196 r211 into r235;
    ternary r223 r206 r234 into r236;
    ternary r223 r207 r235 into r237;
    ternary r225 r195 r214 into r238;
    ternary r225 r196 r215 into r239;
    ternary r224 r210 r238 into r240;
    ternary r224 r211 r239 into r241;
    ternary r226 r195 r218 into r242;
    ternary r226 r196 r219 into r243;
    ternary r225 r214 r242 into r244;
    ternary r225 r215 r243 into r245;
    ternary r227 r195 r220 into r246;
    ternary r227 r196 r221 into r247;
    ternary r226 r218 r246 into r248;
    ternary r226 r219 r247 into r249;
    ternary r227 r220 r195 into r250;
    ternary r227 r221 r196 into r251;
    ternary r39 r17.player3[0u32] 0u8 into r252;
    ternary r39 r17.player3[1u32] 0u8 into r253;
    div r252 13u8 into r254;
    rem r252 13u8 into r255;
    div r253 13u8 into r256;
    rem r253 13u8 into r257;
    lt r255 r112 into r258;
    lt r255 r117 into r259;
    lt r255 r122 into r260;
    lt r255 r127 into r261;
    lt r255 r129 into r262;
    ternary r258 r254 r111 into r263;
    ternary r258 r255 r112 into r264;
    ternary r259 r254 r116 into r265;
    ternary r259 r255 r117 into r266;
    ternary r258 r111 r265 into r267;
    ternary r258 r112 r266 into r268;
    ternary r260 r254 r121 into r269;
    ternary r260 r255 r122 into r270;
    ternary r259 r116 r269 into r271;
    ternary r259 r117 r270 into r272;
    ternary r261 r254 r126 into r273;
    ternary r261 r255 r127 into r274;
    ternary r260 r121 r273 into r275;
    ternary r260 r122 r274 into r276;
    ternary r262 r254 r128 into r277;
    ternary r262 r255 r129 into r278;
    ternary r261 r126 r277 into r279;
    ternary r261 r127 r278 into r280;
    ternary r262 r128 r254 into r281;
    ternary r262 r129 r255 into r282;
    lt r257 r264 into r283;
    lt r257 r268 into r284;
    lt r257 r272 into r285;
    lt r257 r276 into r286;
    lt r257 r280 into r287;
    lt r257 r282 into r288;
    ternary r283 r256 r263 into r289;
    ternary r283 r257 r264 into r290;
    ternary r284 r256 r267 into r291;
    ternary r284 r257 r268 into r292;
    ternary r283 r263 r291 into r293;
    ternary r283 r264 r292 into r294;
    ternary r285 r256 r271 into r295;
    ternary r285 r257 r272 into r296;
    ternary r284 r267 r295 into r297;
    ternary r284 r268 r296 into r298;
    ternary r286 r256 r275 into r299;
    ternary r286 r257 r276 into r300;
    ternary r285 r271 r299 into r301;
    ternary r285 r272 r300 into r302;
    ternary r287 r256 r279 into r303;
    ternary r287 r257 r280 into r304;
    ternary r286 r275 r303 into r305;
    ternary r286 r276 r304 into r306;
    ternary r288 r256 r281 into r307;
    ternary r288 r257 r282 into r308;
    ternary r287 r279 r307 into r309;
    ternary r287 r280 r308 into r310;
    ternary r288 r281 r256 into r311;
    ternary r288 r282 r257 into r312;
    add r168 1u8 into r313;
    add r172 1u8 into r314;
    add r176 1u8 into r315;
    add r180 1u8 into r316;
    add r184 1u8 into r317;
    add r188 1u8 into r318;
    is.eq r315 r180 into r319;
    is.eq r316 r184 into r320;
    and r319 r320 into r321;
    is.eq r317 r188 into r322;
    and r321 r322 into r323;
    is.eq r318 r190 into r324;
    and r323 r324 into r325;
    is.eq r314 r176 into r326;
    is.eq r315 r180 into r327;
    and r326 r327 into r328;
    is.eq r316 r184 into r329;
    and r328 r329 into r330;
    is.eq r317 r188 into r331;
    and r330 r331 into r332;
    is.eq r313 r172 into r333;
    is.eq r314 r176 into r334;
    and r333 r334 into r335;
    is.eq r315 r180 into r336;
    and r335 r336 into r337;
    is.eq r316 r184 into r338;
    and r337 r338 into r339;
    is.eq r168 0u8 into r340;
    is.eq r172 1u8 into r341;
    and r340 r341 into r342;
    is.eq r176 2u8 into r343;
    and r342 r343 into r344;
    is.eq r180 3u8 into r345;
    and r344 r345 into r346;
    is.eq r184 12u8 into r347;
    is.eq r188 12u8 into r348;
    or r347 r348 into r349;
    is.eq r190 12u8 into r350;
    or r349 r350 into r351;
    and r346 r351 into r352;
    is.eq r167 r171 into r353;
    is.eq r171 r175 into r354;
    is.eq r175 r179 into r355;
    is.eq r179 r183 into r356;
    is.eq r183 r187 into r357;
    is.eq r187 r189 into r358;
    and r325 r355 into r359;
    and r359 r356 into r360;
    and r360 r357 into r361;
    and r361 r358 into r362;
    and r332 r354 into r363;
    and r363 r355 into r364;
    and r364 r356 into r365;
    and r365 r357 into r366;
    and r339 r353 into r367;
    and r367 r354 into r368;
    and r368 r355 into r369;
    and r369 r356 into r370;
    and r353 r354 into r371;
    and r371 r355 into r372;
    is.eq r184 12u8 into r373;
    is.eq r183 r167 into r374;
    and r373 r374 into r375;
    is.eq r188 12u8 into r376;
    is.eq r187 r167 into r377;
    and r376 r377 into r378;
    or r375 r378 into r379;
    is.eq r190 12u8 into r380;
    is.eq r189 r167 into r381;
    and r380 r381 into r382;
    or r379 r382 into r383;
    and r352 r372 into r384;
    and r384 r383 into r385;
    or r362 r366 into r386;
    or r386 r370 into r387;
    or r387 r385 into r388;
    is.eq r168 r172 into r389;
    is.eq r172 r176 into r390;
    is.eq r176 r180 into r391;
    is.eq r180 r184 into r392;
    is.eq r184 r188 into r393;
    is.eq r188 r190 into r394;
    and r389 r390 into r395;
    and r395 r391 into r396;
    and r390 r391 into r397;
    and r397 r392 into r398;
    and r391 r392 into r399;
    and r399 r393 into r400;
    and r392 r393 into r401;
    and r401 r394 into r402;
    or r396 r398 into r403;
    or r403 r400 into r404;
    or r404 r402 into r405;
    ternary r398 r184 r180 into r406;
    ternary r400 r188 r406 into r407;
    ternary r402 r190 r407 into r408;
    ternary r402 r176 r190 into r409;
    and r389 r390 into r410;
    and r390 r391 into r411;
    and r391 r392 into r412;
    and r392 r393 into r413;
    and r393 r394 into r414;
    or r410 r411 into r415;
    or r415 r412 into r416;
    or r416 r413 into r417;
    or r417 r414 into r418;
    ternary r411 r180 r176 into r419;
    ternary r412 r184 r419 into r420;
    ternary r413 r188 r420 into r421;
    ternary r414 r190 r421 into r422;
    not r410 into r423;
    and r389 r423 into r424;
    not r410 into r425;
    and r390 r425 into r426;
    not r411 into r427;
    and r426 r427 into r428;
    not r411 into r429;
    and r391 r429 into r430;
    not r412 into r431;
    and r430 r431 into r432;
    not r412 into r433;
    and r392 r433 into r434;
    not r413 into r435;
    and r434 r435 into r436;
    not r413 into r437;
    and r393 r437 into r438;
    not r414 into r439;
    and r438 r439 into r440;
    not r414 into r441;
    and r394 r441 into r442;
    or r424 r428 into r443;
    or r443 r432 into r444;
    or r444 r436 into r445;
    or r445 r440 into r446;
    or r446 r442 into r447;
    ternary r428 r176 r172 into r448;
    ternary r432 r180 r448 into r449;
    ternary r436 r184 r449 into r450;
    ternary r440 r188 r450 into r451;
    ternary r442 r190 r451 into r452;
    and r418 r447 into r453;
    not r447 into r454;
    and r418 r454 into r455;
    not r418 into r456;
    and r447 r456 into r457;
    is.eq r167 0u8 into r458;
    cast r458 into r459 as u8;
    is.eq r171 0u8 into r460;
    cast r460 into r461 as u8;
    add r459 r461 into r462;
    is.eq r175 0u8 into r463;
    cast r463 into r464 as u8;
    add r462 r464 into r465;
    is.eq r179 0u8 into r466;
    cast r466 into r467 as u8;
    add r465 r467 into r468;
    is.eq r183 0u8 into r469;
    cast r469 into r470 as u8;
    add r468 r470 into r471;
    is.eq r187 0u8 into r472;
    cast r472 into r473 as u8;
    add r471 r473 into r474;
    is.eq r189 0u8 into r475;
    cast r475 into r476 as u8;
    add r474 r476 into r477;
    gte r477 5u8 into r478;
    is.eq r167 1u8 into r479;
    cast r479 into r480 as u8;
    is.eq r171 1u8 into r481;
    cast r481 into r482 as u8;
    add r480 r482 into r483;
    is.eq r175 1u8 into r484;
    cast r484 into r485 as u8;
    add r483 r485 into r486;
    is.eq r179 1u8 into r487;
    cast r487 into r488 as u8;
    add r486 r488 into r489;
    is.eq r183 1u8 into r490;
    cast r490 into r491 as u8;
    add r489 r491 into r492;
    is.eq r187 1u8 into r493;
    cast r493 into r494 as u8;
    add r492 r494 into r495;
    is.eq r189 1u8 into r496;
    cast r496 into r497 as u8;
    add r495 r497 into r498;
    gte r498 5u8 into r499;
    is.eq r167 2u8 into r500;
    cast r500 into r501 as u8;
    is.eq r171 2u8 into r502;
    cast r502 into r503 as u8;
    add r501 r503 into r504;
    is.eq r175 2u8 into r505;
    cast r505 into r506 as u8;
    add r504 r506 into r507;
    is.eq r179 2u8 into r508;
    cast r508 into r509 as u8;
    add r507 r509 into r510;
    is.eq r183 2u8 into r511;
    cast r511 into r512 as u8;
    add r510 r512 into r513;
    is.eq r187 2u8 into r514;
    cast r514 into r515 as u8;
    add r513 r515 into r516;
    is.eq r189 2u8 into r517;
    cast r517 into r518 as u8;
    add r516 r518 into r519;
    gte r519 5u8 into r520;
    is.eq r167 3u8 into r521;
    cast r521 into r522 as u8;
    is.eq r171 3u8 into r523;
    cast r523 into r524 as u8;
    add r522 r524 into r525;
    is.eq r175 3u8 into r526;
    cast r526 into r527 as u8;
    add r525 r527 into r528;
    is.eq r179 3u8 into r529;
    cast r529 into r530 as u8;
    add r528 r530 into r531;
    is.eq r183 3u8 into r532;
    cast r532 into r533 as u8;
    add r531 r533 into r534;
    is.eq r187 3u8 into r535;
    cast r535 into r536 as u8;
    add r534 r536 into r537;
    is.eq r189 3u8 into r538;
    cast r538 into r539 as u8;
    add r537 r539 into r540;
    gte r540 5u8 into r541;
    or r478 r499 into r542;
    or r542 r520 into r543;
    or r543 r541 into r544;
    ternary r499 1u8 0u8 into r545;
    ternary r520 2u8 r545 into r546;
    ternary r541 3u8 r546 into r547;
    is.eq r189 r547 into r548;
    cast r548 into r549 as u8;
    is.eq r187 r547 into r550;
    cast r550 into r551 as u8;
    is.eq r183 r547 into r552;
    cast r552 into r553 as u8;
    is.eq r179 r547 into r554;
    cast r554 into r555 as u8;
    is.eq r175 r547 into r556;
    cast r556 into r557 as u8;
    is.eq r171 r547 into r558;
    cast r558 into r559 as u8;
    is.eq r167 r547 into r560;
    cast r560 into r561 as u8;
    add r549 r551 into r562;
    add r562 r553 into r563;
    add r563 r555 into r564;
    add r564 r557 into r565;
    add r565 r559 into r566;
    is.eq r549 1u8 into r567;
    is.eq r562 1u8 into r568;
    is.eq r563 1u8 into r569;
    is.eq r564 1u8 into r570;
    is.eq r565 1u8 into r571;
    is.eq r566 1u8 into r572;
    is.eq r549 2u8 into r573;
    is.eq r562 2u8 into r574;
    is.eq r563 2u8 into r575;
    is.eq r564 2u8 into r576;
    is.eq r565 2u8 into r577;
    is.eq r566 2u8 into r578;
    is.eq r549 3u8 into r579;
    is.eq r562 3u8 into r580;
    is.eq r563 3u8 into r581;
    is.eq r564 3u8 into r582;
    is.eq r565 3u8 into r583;
    is.eq r566 3u8 into r584;
    is.eq r549 4u8 into r585;
    is.eq r562 4u8 into r586;
    is.eq r563 4u8 into r587;
    is.eq r564 4u8 into r588;
    is.eq r565 4u8 into r589;
    is.eq r566 4u8 into r590;
    is.eq r549 5u8 into r591;
    is.eq r562 5u8 into r592;
    is.eq r563 5u8 into r593;
    is.eq r564 5u8 into r594;
    is.eq r565 5u8 into r595;
    is.eq r566 5u8 into r596;
    ternary r572 r172 r168 into r597;
    ternary r571 r176 r597 into r598;
    ternary r570 r180 r598 into r599;
    ternary r569 r184 r599 into r600;
    ternary r568 r188 r600 into r601;
    ternary r567 r190 r601 into r602;
    ternary r578 r172 r168 into r603;
    ternary r577 r176 r603 into r604;
    ternary r576 r180 r604 into r605;
    ternary r575 r184 r605 into r606;
    ternary r574 r188 r606 into r607;
    ternary r573 r190 r607 into r608;
    ternary r584 r172 r168 into r609;
    ternary r583 r176 r609 into r610;
    ternary r582 r180 r610 into r611;
    ternary r581 r184 r611 into r612;
    ternary r580 r188 r612 into r613;
    ternary r579 r190 r613 into r614;
    ternary r590 r172 r168 into r615;
    ternary r589 r176 r615 into r616;
    ternary r588 r180 r616 into r617;
    ternary r587 r184 r617 into r618;
    ternary r586 r188 r618 into r619;
    ternary r585 r190 r619 into r620;
    ternary r596 r172 r168 into r621;
    ternary r595 r176 r621 into r622;
    ternary r594 r180 r622 into r623;
    ternary r593 r184 r623 into r624;
    ternary r592 r188 r624 into r625;
    ternary r591 r190 r625 into r626;
    or r325 r332 into r627;
    or r627 r339 into r628;
    or r628 r352 into r629;
    ternary r339 r184 3u8 into r630;
    ternary r332 r188 r630 into r631;
    ternary r325 r190 r631 into r632;
    cast r424 into r633 as u8;
    cast r428 into r634 as u8;
    add r633 r634 into r635;
    cast r432 into r636 as u8;
    add r635 r636 into r637;
    cast r436 into r638 as u8;
    add r637 r638 into r639;
    cast r440 into r640 as u8;
    add r639 r640 into r641;
    cast r442 into r642 as u8;
    add r641 r642 into r643;
    gte r643 2u8 into r644;
    not r442 into r645;
    not r440 into r646;
    not r436 into r647;
    and r440 r645 into r648;
    and r436 r646 into r649;
    and r649 r645 into r650;
    ternary r428 r176 r172 into r651;
    ternary r432 r180 r651 into r652;
    ternary r650 r184 r652 into r653;
    ternary r648 r188 r653 into r654;
    not r432 into r655;
    not r428 into r656;
    ternary r656 r176 r172 into r657;
    ternary r655 r180 r657 into r658;
    ternary r647 r184 r658 into r659;
    ternary r646 r188 r659 into r660;
    ternary r645 r190 r660 into r661;
    ternary r414 r180 r190 into r662;
    ternary r413 r176 r188 into r663;
    ternary r414 r176 r663 into r664;
    ternary r442 r184 r190 into r665;
    ternary r440 r180 r188 into r666;
    ternary r442 r180 r666 into r667;
    ternary r436 r176 r184 into r668;
    ternary r440 r176 r668 into r669;
    ternary r442 r176 r669 into r670;
    cast r362 into r671 as u32;
    or 2415919104u32 r671 into r672;
    cast r408 into r673 as u32;
    mul r673 16u32 into r674;
    or 2147483648u32 r674 into r675;
    cast r409 into r676 as u32;
    or r675 r676 into r677;
    cast r422 into r678 as u32;
    mul r678 16u32 into r679;
    or 1879048192u32 r679 into r680;
    cast r452 into r681 as u32;
    or r680 r681 into r682;
    cast r602 into r683 as u32;
    mul r683 65536u32 into r684;
    or 1610612736u32 r684 into r685;
    cast r608 into r686 as u32;
    mul r686 4096u32 into r687;
    or r685 r687 into r688;
    cast r614 into r689 as u32;
    mul r689 256u32 into r690;
    or r688 r690 into r691;
    cast r620 into r692 as u32;
    mul r692 16u32 into r693;
    or r691 r693 into r694;
    cast r626 into r695 as u32;
    or r694 r695 into r696;
    cast r632 into r697 as u32;
    or 1342177280u32 r697 into r698;
    cast r422 into r699 as u32;
    mul r699 256u32 into r700;
    or 1073741824u32 r700 into r701;
    cast r662 into r702 as u32;
    mul r702 16u32 into r703;
    or r701 r703 into r704;
    cast r664 into r705 as u32;
    or r704 r705 into r706;
    cast r452 into r707 as u32;
    mul r707 256u32 into r708;
    or 805306368u32 r708 into r709;
    cast r654 into r710 as u32;
    mul r710 16u32 into r711;
    or r709 r711 into r712;
    cast r661 into r713 as u32;
    or r712 r713 into r714;
    cast r452 into r715 as u32;
    mul r715 4096u32 into r716;
    or 536870912u32 r716 into r717;
    cast r665 into r718 as u32;
    mul r718 256u32 into r719;
    or r717 r719 into r720;
    cast r667 into r721 as u32;
    mul r721 16u32 into r722;
    or r720 r722 into r723;
    cast r670 into r724 as u32;
    or r723 r724 into r725;
    cast r190 into r726 as u32;
    mul r726 65536u32 into r727;
    or 268435456u32 r727 into r728;
    cast r188 into r729 as u32;
    mul r729 4096u32 into r730;
    or r728 r730 into r731;
    cast r184 into r732 as u32;
    mul r732 256u32 into r733;
    or r731 r733 into r734;
    cast r180 into r735 as u32;
    mul r735 16u32 into r736;
    or r734 r736 into r737;
    cast r176 into r738 as u32;
    or r737 r738 into r739;
    ternary r457 r725 r739 into r740;
    ternary r644 r714 r740 into r741;
    ternary r455 r706 r741 into r742;
    ternary r629 r698 r742 into r743;
    ternary r544 r696 r743 into r744;
    ternary r453 r682 r744 into r745;
    ternary r405 r677 r745 into r746;
    ternary r388 r672 r746 into r747;
    add r229 1u8 into r748;
    add r233 1u8 into r749;
    add r237 1u8 into r750;
    add r241 1u8 into r751;
    add r245 1u8 into r752;
    add r249 1u8 into r753;
    is.eq r750 r241 into r754;
    is.eq r751 r245 into r755;
    and r754 r755 into r756;
    is.eq r752 r249 into r757;
    and r756 r757 into r758;
    is.eq r753 r251 into r759;
    and r758 r759 into r760;
    is.eq r749 r237 into r761;
    is.eq r750 r241 into r762;
    and r761 r762 into r763;
    is.eq r751 r245 into r764;
    and r763 r764 into r765;
    is.eq r752 r249 into r766;
    and r765 r766 into r767;
    is.eq r748 r233 into r768;
    is.eq r749 r237 into r769;
    and r768 r769 into r770;
    is.eq r750 r241 into r771;
    and r770 r771 into r772;
    is.eq r751 r245 into r773;
    and r772 r773 into r774;
    is.eq r229 0u8 into r775;
    is.eq r233 1u8 into r776;
    and r775 r776 into r777;
    is.eq r237 2u8 into r778;
    and r777 r778 into r779;
    is.eq r241 3u8 into r780;
    and r779 r780 into r781;
    is.eq r245 12u8 into r782;
    is.eq r249 12u8 into r783;
    or r782 r783 into r784;
    is.eq r251 12u8 into r785;
    or r784 r785 into r786;
    and r781 r786 into r787;
    is.eq r228 r232 into r788;
    is.eq r232 r236 into r789;
    is.eq r236 r240 into r790;
    is.eq r240 r244 into r791;
    is.eq r244 r248 into r792;
    is.eq r248 r250 into r793;
    and r760 r790 into r794;
    and r794 r791 into r795;
    and r795 r792 into r796;
    and r796 r793 into r797;
    and r767 r789 into r798;
    and r798 r790 into r799;
    and r799 r791 into r800;
    and r800 r792 into r801;
    and r774 r788 into r802;
    and r802 r789 into r803;
    and r803 r790 into r804;
    and r804 r791 into r805;
    and r788 r789 into r806;
    and r806 r790 into r807;
    is.eq r245 12u8 into r808;
    is.eq r244 r228 into r809;
    and r808 r809 into r810;
    is.eq r249 12u8 into r811;
    is.eq r248 r228 into r812;
    and r811 r812 into r813;
    or r810 r813 into r814;
    is.eq r251 12u8 into r815;
    is.eq r250 r228 into r816;
    and r815 r816 into r817;
    or r814 r817 into r818;
    and r787 r807 into r819;
    and r819 r818 into r820;
    or r797 r801 into r821;
    or r821 r805 into r822;
    or r822 r820 into r823;
    is.eq r229 r233 into r824;
    is.eq r233 r237 into r825;
    is.eq r237 r241 into r826;
    is.eq r241 r245 into r827;
    is.eq r245 r249 into r828;
    is.eq r249 r251 into r829;
    and r824 r825 into r830;
    and r830 r826 into r831;
    and r825 r826 into r832;
    and r832 r827 into r833;
    and r826 r827 into r834;
    and r834 r828 into r835;
    and r827 r828 into r836;
    and r836 r829 into r837;
    or r831 r833 into r838;
    or r838 r835 into r839;
    or r839 r837 into r840;
    ternary r833 r245 r241 into r841;
    ternary r835 r249 r841 into r842;
    ternary r837 r251 r842 into r843;
    ternary r837 r237 r251 into r844;
    and r824 r825 into r845;
    and r825 r826 into r846;
    and r826 r827 into r847;
    and r827 r828 into r848;
    and r828 r829 into r849;
    or r845 r846 into r850;
    or r850 r847 into r851;
    or r851 r848 into r852;
    or r852 r849 into r853;
    ternary r846 r241 r237 into r854;
    ternary r847 r245 r854 into r855;
    ternary r848 r249 r855 into r856;
    ternary r849 r251 r856 into r857;
    not r845 into r858;
    and r824 r858 into r859;
    not r845 into r860;
    and r825 r860 into r861;
    not r846 into r862;
    and r861 r862 into r863;
    not r846 into r864;
    and r826 r864 into r865;
    not r847 into r866;
    and r865 r866 into r867;
    not r847 into r868;
    and r827 r868 into r869;
    not r848 into r870;
    and r869 r870 into r871;
    not r848 into r872;
    and r828 r872 into r873;
    not r849 into r874;
    and r873 r874 into r875;
    not r849 into r876;
    and r829 r876 into r877;
    or r859 r863 into r878;
    or r878 r867 into r879;
    or r879 r871 into r880;
    or r880 r875 into r881;
    or r881 r877 into r882;
    ternary r863 r237 r233 into r883;
    ternary r867 r241 r883 into r884;
    ternary r871 r245 r884 into r885;
    ternary r875 r249 r885 into r886;
    ternary r877 r251 r886 into r887;
    and r853 r882 into r888;
    not r882 into r889;
    and r853 r889 into r890;
    not r853 into r891;
    and r882 r891 into r892;
    is.eq r228 0u8 into r893;
    cast r893 into r894 as u8;
    is.eq r232 0u8 into r895;
    cast r895 into r896 as u8;
    add r894 r896 into r897;
    is.eq r236 0u8 into r898;
    cast r898 into r899 as u8;
    add r897 r899 into r900;
    is.eq r240 0u8 into r901;
    cast r901 into r902 as u8;
    add r900 r902 into r903;
    is.eq r244 0u8 into r904;
    cast r904 into r905 as u8;
    add r903 r905 into r906;
    is.eq r248 0u8 into r907;
    cast r907 into r908 as u8;
    add r906 r908 into r909;
    is.eq r250 0u8 into r910;
    cast r910 into r911 as u8;
    add r909 r911 into r912;
    gte r912 5u8 into r913;
    is.eq r228 1u8 into r914;
    cast r914 into r915 as u8;
    is.eq r232 1u8 into r916;
    cast r916 into r917 as u8;
    add r915 r917 into r918;
    is.eq r236 1u8 into r919;
    cast r919 into r920 as u8;
    add r918 r920 into r921;
    is.eq r240 1u8 into r922;
    cast r922 into r923 as u8;
    add r921 r923 into r924;
    is.eq r244 1u8 into r925;
    cast r925 into r926 as u8;
    add r924 r926 into r927;
    is.eq r248 1u8 into r928;
    cast r928 into r929 as u8;
    add r927 r929 into r930;
    is.eq r250 1u8 into r931;
    cast r931 into r932 as u8;
    add r930 r932 into r933;
    gte r933 5u8 into r934;
    is.eq r228 2u8 into r935;
    cast r935 into r936 as u8;
    is.eq r232 2u8 into r937;
    cast r937 into r938 as u8;
    add r936 r938 into r939;
    is.eq r236 2u8 into r940;
    cast r940 into r941 as u8;
    add r939 r941 into r942;
    is.eq r240 2u8 into r943;
    cast r943 into r944 as u8;
    add r942 r944 into r945;
    is.eq r244 2u8 into r946;
    cast r946 into r947 as u8;
    add r945 r947 into r948;
    is.eq r248 2u8 into r949;
    cast r949 into r950 as u8;
    add r948 r950 into r951;
    is.eq r250 2u8 into r952;
    cast r952 into r953 as u8;
    add r951 r953 into r954;
    gte r954 5u8 into r955;
    is.eq r228 3u8 into r956;
    cast r956 into r957 as u8;
    is.eq r232 3u8 into r958;
    cast r958 into r959 as u8;
    add r957 r959 into r960;
    is.eq r236 3u8 into r961;
    cast r961 into r962 as u8;
    add r960 r962 into r963;
    is.eq r240 3u8 into r964;
    cast r964 into r965 as u8;
    add r963 r965 into r966;
    is.eq r244 3u8 into r967;
    cast r967 into r968 as u8;
    add r966 r968 into r969;
    is.eq r248 3u8 into r970;
    cast r970 into r971 as u8;
    add r969 r971 into r972;
    is.eq r250 3u8 into r973;
    cast r973 into r974 as u8;
    add r972 r974 into r975;
    gte r975 5u8 into r976;
    or r913 r934 into r977;
    or r977 r955 into r978;
    or r978 r976 into r979;
    ternary r934 1u8 0u8 into r980;
    ternary r955 2u8 r980 into r981;
    ternary r976 3u8 r981 into r982;
    is.eq r250 r982 into r983;
    cast r983 into r984 as u8;
    is.eq r248 r982 into r985;
    cast r985 into r986 as u8;
    is.eq r244 r982 into r987;
    cast r987 into r988 as u8;
    is.eq r240 r982 into r989;
    cast r989 into r990 as u8;
    is.eq r236 r982 into r991;
    cast r991 into r992 as u8;
    is.eq r232 r982 into r993;
    cast r993 into r994 as u8;
    is.eq r228 r982 into r995;
    cast r995 into r996 as u8;
    add r984 r986 into r997;
    add r997 r988 into r998;
    add r998 r990 into r999;
    add r999 r992 into r1000;
    add r1000 r994 into r1001;
    is.eq r984 1u8 into r1002;
    is.eq r997 1u8 into r1003;
    is.eq r998 1u8 into r1004;
    is.eq r999 1u8 into r1005;
    is.eq r1000 1u8 into r1006;
    is.eq r1001 1u8 into r1007;
    is.eq r984 2u8 into r1008;
    is.eq r997 2u8 into r1009;
    is.eq r998 2u8 into r1010;
    is.eq r999 2u8 into r1011;
    is.eq r1000 2u8 into r1012;
    is.eq r1001 2u8 into r1013;
    is.eq r984 3u8 into r1014;
    is.eq r997 3u8 into r1015;
    is.eq r998 3u8 into r1016;
    is.eq r999 3u8 into r1017;
    is.eq r1000 3u8 into r1018;
    is.eq r1001 3u8 into r1019;
    is.eq r984 4u8 into r1020;
    is.eq r997 4u8 into r1021;
    is.eq r998 4u8 into r1022;
    is.eq r999 4u8 into r1023;
    is.eq r1000 4u8 into r1024;
    is.eq r1001 4u8 into r1025;
    is.eq r984 5u8 into r1026;
    is.eq r997 5u8 into r1027;
    is.eq r998 5u8 into r1028;
    is.eq r999 5u8 into r1029;
    is.eq r1000 5u8 into r1030;
    is.eq r1001 5u8 into r1031;
    ternary r1007 r233 r229 into r1032;
    ternary r1006 r237 r1032 into r1033;
    ternary r1005 r241 r1033 into r1034;
    ternary r1004 r245 r1034 into r1035;
    ternary r1003 r249 r1035 into r1036;
    ternary r1002 r251 r1036 into r1037;
    ternary r1013 r233 r229 into r1038;
    ternary r1012 r237 r1038 into r1039;
    ternary r1011 r241 r1039 into r1040;
    ternary r1010 r245 r1040 into r1041;
    ternary r1009 r249 r1041 into r1042;
    ternary r1008 r251 r1042 into r1043;
    ternary r1019 r233 r229 into r1044;
    ternary r1018 r237 r1044 into r1045;
    ternary r1017 r241 r1045 into r1046;
    ternary r1016 r245 r1046 into r1047;
    ternary r1015 r249 r1047 into r1048;
    ternary r1014 r251 r1048 into r1049;
    ternary r1025 r233 r229 into r1050;
    ternary r1024 r237 r1050 into r1051;
    ternary r1023 r241 r1051 into r1052;
    ternary r1022 r245 r1052 into r1053;
    ternary r1021 r249 r1053 into r1054;
    ternary r1020 r251 r1054 into r1055;
    ternary r1031 r233 r229 into r1056;
    ternary r1030 r237 r1056 into r1057;
    ternary r1029 r241 r1057 into r1058;
    ternary r1028 r245 r1058 into r1059;
    ternary r1027 r249 r1059 into r1060;
    ternary r1026 r251 r1060 into r1061;
    or r760 r767 into r1062;
    or r1062 r774 into r1063;
    or r1063 r787 into r1064;
    ternary r774 r245 3u8 into r1065;
    ternary r767 r249 r1065 into r1066;
    ternary r760 r251 r1066 into r1067;
    cast r859 into r1068 as u8;
    cast r863 into r1069 as u8;
    add r1068 r1069 into r1070;
    cast r867 into r1071 as u8;
    add r1070 r1071 into r1072;
    cast r871 into r1073 as u8;
    add r1072 r1073 into r1074;
    cast r875 into r1075 as u8;
    add r1074 r1075 into r1076;
    cast r877 into r1077 as u8;
    add r1076 r1077 into r1078;
    gte r1078 2u8 into r1079;
    not r877 into r1080;
    not r875 into r1081;
    not r871 into r1082;
    and r875 r1080 into r1083;
    and r871 r1081 into r1084;
    and r1084 r1080 into r1085;
    ternary r863 r237 r233 into r1086;
    ternary r867 r241 r1086 into r1087;
    ternary r1085 r245 r1087 into r1088;
    ternary r1083 r249 r1088 into r1089;
    not r867 into r1090;
    not r863 into r1091;
    ternary r1091 r237 r233 into r1092;
    ternary r1090 r241 r1092 into r1093;
    ternary r1082 r245 r1093 into r1094;
    ternary r1081 r249 r1094 into r1095;
    ternary r1080 r251 r1095 into r1096;
    ternary r849 r241 r251 into r1097;
    ternary r848 r237 r249 into r1098;
    ternary r849 r237 r1098 into r1099;
    ternary r877 r245 r251 into r1100;
    ternary r875 r241 r249 into r1101;
    ternary r877 r241 r1101 into r1102;
    ternary r871 r237 r245 into r1103;
    ternary r875 r237 r1103 into r1104;
    ternary r877 r237 r1104 into r1105;
    cast r797 into r1106 as u32;
    or 2415919104u32 r1106 into r1107;
    cast r843 into r1108 as u32;
    mul r1108 16u32 into r1109;
    or 2147483648u32 r1109 into r1110;
    cast r844 into r1111 as u32;
    or r1110 r1111 into r1112;
    cast r857 into r1113 as u32;
    mul r1113 16u32 into r1114;
    or 1879048192u32 r1114 into r1115;
    cast r887 into r1116 as u32;
    or r1115 r1116 into r1117;
    cast r1037 into r1118 as u32;
    mul r1118 65536u32 into r1119;
    or 1610612736u32 r1119 into r1120;
    cast r1043 into r1121 as u32;
    mul r1121 4096u32 into r1122;
    or r1120 r1122 into r1123;
    cast r1049 into r1124 as u32;
    mul r1124 256u32 into r1125;
    or r1123 r1125 into r1126;
    cast r1055 into r1127 as u32;
    mul r1127 16u32 into r1128;
    or r1126 r1128 into r1129;
    cast r1061 into r1130 as u32;
    or r1129 r1130 into r1131;
    cast r1067 into r1132 as u32;
    or 1342177280u32 r1132 into r1133;
    cast r857 into r1134 as u32;
    mul r1134 256u32 into r1135;
    or 1073741824u32 r1135 into r1136;
    cast r1097 into r1137 as u32;
    mul r1137 16u32 into r1138;
    or r1136 r1138 into r1139;
    cast r1099 into r1140 as u32;
    or r1139 r1140 into r1141;
    cast r887 into r1142 as u32;
    mul r1142 256u32 into r1143;
    or 805306368u32 r1143 into r1144;
    cast r1089 into r1145 as u32;
    mul r1145 16u32 into r1146;
    or r1144 r1146 into r1147;
    cast r1096 into r1148 as u32;
    or r1147 r1148 into r1149;
    cast r887 into r1150 as u32;
    mul r1150 4096u32 into r1151;
    or 536870912u32 r1151 into r1152;
    cast r1100 into r1153 as u32;
    mul r1153 256u32 into r1154;
    or r1152 r1154 into r1155;
    cast r1102 into r1156 as u32;
    mul r1156 16u32 into r1157;
    or r1155 r1157 into r1158;
    cast r1105 into r1159 as u32;
    or r1158 r1159 into r1160;
    cast r251 into r1161 as u32;
    mul r1161 65536u32 into r1162;
    or 268435456u32 r1162 into r1163;
    cast r249 into r1164 as u32;
    mul r1164 4096u32 into r1165;
    or r1163 r1165 into r1166;
    cast r245 into r1167 as u32;
    mul r1167 256u32 into r1168;
    or r1166 r1168 into r1169;
    cast r241 into r1170 as u32;
    mul r1170 16u32 into r1171;
    or r1169 r1171 into r1172;
    cast r237 into r1173 as u32;
    or r1172 r1173 into r1174;
    ternary r892 r1160 r1174 into r1175;
    ternary r1079 r1149 r1175 into r1176;
    ternary r890 r1141 r1176 into r1177;
    ternary r1064 r1133 r1177 into r1178;
    ternary r979 r1131 r1178 into r1179;
    ternary r888 r1117 r1179 into r1180;
    ternary r840 r1112 r1180 into r1181;
    ternary r823 r1107 r1181 into r1182;
    add r290 1u8 into r1183;
    add r294 1u8 into r1184;
    add r298 1u8 into r1185;
    add r302 1u8 into r1186;
    add r306 1u8 into r1187;
    add r310 1u8 into r1188;
    is.eq r1185 r302 into r1189;
    is.eq r1186 r306 into r1190;
    and r1189 r1190 into r1191;
    is.eq r1187 r310 into r1192;
    and r1191 r1192 into r1193;
    is.eq r1188 r312 into r1194;
    and r1193 r1194 into r1195;
    is.eq r1184 r298 into r1196;
    is.eq r1185 r302 into r1197;
    and r1196 r1197 into r1198;
    is.eq r1186 r306 into r1199;
    and r1198 r1199 into r1200;
    is.eq r1187 r310 into r1201;
    and r1200 r1201 into r1202;
    is.eq r1183 r294 into r1203;
    is.eq r1184 r298 into r1204;
    and r1203 r1204 into r1205;
    is.eq r1185 r302 into r1206;
    and r1205 r1206 into r1207;
    is.eq r1186 r306 into r1208;
    and r1207 r1208 into r1209;
    is.eq r290 0u8 into r1210;
    is.eq r294 1u8 into r1211;
    and r1210 r1211 into r1212;
    is.eq r298 2u8 into r1213;
    and r1212 r1213 into r1214;
    is.eq r302 3u8 into r1215;
    and r1214 r1215 into r1216;
    is.eq r306 12u8 into r1217;
    is.eq r310 12u8 into r1218;
    or r1217 r1218 into r1219;
    is.eq r312 12u8 into r1220;
    or r1219 r1220 into r1221;
    and r1216 r1221 into r1222;
    is.eq r289 r293 into r1223;
    is.eq r293 r297 into r1224;
    is.eq r297 r301 into r1225;
    is.eq r301 r305 into r1226;
    is.eq r305 r309 into r1227;
    is.eq r309 r311 into r1228;
    and r1195 r1225 into r1229;
    and r1229 r1226 into r1230;
    and r1230 r1227 into r1231;
    and r1231 r1228 into r1232;
    and r1202 r1224 into r1233;
    and r1233 r1225 into r1234;
    and r1234 r1226 into r1235;
    and r1235 r1227 into r1236;
    and r1209 r1223 into r1237;
    and r1237 r1224 into r1238;
    and r1238 r1225 into r1239;
    and r1239 r1226 into r1240;
    and r1223 r1224 into r1241;
    and r1241 r1225 into r1242;
    is.eq r306 12u8 into r1243;
    is.eq r305 r289 into r1244;
    and r1243 r1244 into r1245;
    is.eq r310 12u8 into r1246;
    is.eq r309 r289 into r1247;
    and r1246 r1247 into r1248;
    or r1245 r1248 into r1249;
    is.eq r312 12u8 into r1250;
    is.eq r311 r289 into r1251;
    and r1250 r1251 into r1252;
    or r1249 r1252 into r1253;
    and r1222 r1242 into r1254;
    and r1254 r1253 into r1255;
    or r1232 r1236 into r1256;
    or r1256 r1240 into r1257;
    or r1257 r1255 into r1258;
    is.eq r290 r294 into r1259;
    is.eq r294 r298 into r1260;
    is.eq r298 r302 into r1261;
    is.eq r302 r306 into r1262;
    is.eq r306 r310 into r1263;
    is.eq r310 r312 into r1264;
    and r1259 r1260 into r1265;
    and r1265 r1261 into r1266;
    and r1260 r1261 into r1267;
    and r1267 r1262 into r1268;
    and r1261 r1262 into r1269;
    and r1269 r1263 into r1270;
    and r1262 r1263 into r1271;
    and r1271 r1264 into r1272;
    or r1266 r1268 into r1273;
    or r1273 r1270 into r1274;
    or r1274 r1272 into r1275;
    ternary r1268 r306 r302 into r1276;
    ternary r1270 r310 r1276 into r1277;
    ternary r1272 r312 r1277 into r1278;
    ternary r1272 r298 r312 into r1279;
    and r1259 r1260 into r1280;
    and r1260 r1261 into r1281;
    and r1261 r1262 into r1282;
    and r1262 r1263 into r1283;
    and r1263 r1264 into r1284;
    or r1280 r1281 into r1285;
    or r1285 r1282 into r1286;
    or r1286 r1283 into r1287;
    or r1287 r1284 into r1288;
    ternary r1281 r302 r298 into r1289;
    ternary r1282 r306 r1289 into r1290;
    ternary r1283 r310 r1290 into r1291;
    ternary r1284 r312 r1291 into r1292;
    not r1280 into r1293;
    and r1259 r1293 into r1294;
    not r1280 into r1295;
    and r1260 r1295 into r1296;
    not r1281 into r1297;
    and r1296 r1297 into r1298;
    not r1281 into r1299;
    and r1261 r1299 into r1300;
    not r1282 into r1301;
    and r1300 r1301 into r1302;
    not r1282 into r1303;
    and r1262 r1303 into r1304;
    not r1283 into r1305;
    and r1304 r1305 into r1306;
    not r1283 into r1307;
    and r1263 r1307 into r1308;
    not r1284 into r1309;
    and r1308 r1309 into r1310;
    not r1284 into r1311;
    and r1264 r1311 into r1312;
    or r1294 r1298 into r1313;
    or r1313 r1302 into r1314;
    or r1314 r1306 into r1315;
    or r1315 r1310 into r1316;
    or r1316 r1312 into r1317;
    ternary r1298 r298 r294 into r1318;
    ternary r1302 r302 r1318 into r1319;
    ternary r1306 r306 r1319 into r1320;
    ternary r1310 r310 r1320 into r1321;
    ternary r1312 r312 r1321 into r1322;
    and r1288 r1317 into r1323;
    not r1317 into r1324;
    and r1288 r1324 into r1325;
    not r1288 into r1326;
    and r1317 r1326 into r1327;
    is.eq r289 0u8 into r1328;
    cast r1328 into r1329 as u8;
    is.eq r293 0u8 into r1330;
    cast r1330 into r1331 as u8;
    add r1329 r1331 into r1332;
    is.eq r297 0u8 into r1333;
    cast r1333 into r1334 as u8;
    add r1332 r1334 into r1335;
    is.eq r301 0u8 into r1336;
    cast r1336 into r1337 as u8;
    add r1335 r1337 into r1338;
    is.eq r305 0u8 into r1339;
    cast r1339 into r1340 as u8;
    add r1338 r1340 into r1341;
    is.eq r309 0u8 into r1342;
    cast r1342 into r1343 as u8;
    add r1341 r1343 into r1344;
    is.eq r311 0u8 into r1345;
    cast r1345 into r1346 as u8;
    add r1344 r1346 into r1347;
    gte r1347 5u8 into r1348;
    is.eq r289 1u8 into r1349;
    cast r1349 into r1350 as u8;
    is.eq r293 1u8 into r1351;
    cast r1351 into r1352 as u8;
    add r1350 r1352 into r1353;
    is.eq r297 1u8 into r1354;
    cast r1354 into r1355 as u8;
    add r1353 r1355 into r1356;
    is.eq r301 1u8 into r1357;
    cast r1357 into r1358 as u8;
    add r1356 r1358 into r1359;
    is.eq r305 1u8 into r1360;
    cast r1360 into r1361 as u8;
    add r1359 r1361 into r1362;
    is.eq r309 1u8 into r1363;
    cast r1363 into r1364 as u8;
    add r1362 r1364 into r1365;
    is.eq r311 1u8 into r1366;
    cast r1366 into r1367 as u8;
    add r1365 r1367 into r1368;
    gte r1368 5u8 into r1369;
    is.eq r289 2u8 into r1370;
    cast r1370 into r1371 as u8;
    is.eq r293 2u8 into r1372;
    cast r1372 into r1373 as u8;
    add r1371 r1373 into r1374;
    is.eq r297 2u8 into r1375;
    cast r1375 into r1376 as u8;
    add r1374 r1376 into r1377;
    is.eq r301 2u8 into r1378;
    cast r1378 into r1379 as u8;
    add r1377 r1379 into r1380;
    is.eq r305 2u8 into r1381;
    cast r1381 into r1382 as u8;
    add r1380 r1382 into r1383;
    is.eq r309 2u8 into r1384;
    cast r1384 into r1385 as u8;
    add r1383 r1385 into r1386;
    is.eq r311 2u8 into r1387;
    cast r1387 into r1388 as u8;
    add r1386 r1388 into r1389;
    gte r1389 5u8 into r1390;
    is.eq r289 3u8 into r1391;
    cast r1391 into r1392 as u8;
    is.eq r293 3u8 into r1393;
    cast r1393 into r1394 as u8;
    add r1392 r1394 into r1395;
    is.eq r297 3u8 into r1396;
    cast r1396 into r1397 as u8;
    add r1395 r1397 into r1398;
    is.eq r301 3u8 into r1399;
    cast r1399 into r1400 as u8;
    add r1398 r1400 into r1401;
    is.eq r305 3u8 into r1402;
    cast r1402 into r1403 as u8;
    add r1401 r1403 into r1404;
    is.eq r309 3u8 into r1405;
    cast r1405 into r1406 as u8;
    add r1404 r1406 into r1407;
    is.eq r311 3u8 into r1408;
    cast r1408 into r1409 as u8;
    add r1407 r1409 into r1410;
    gte r1410 5u8 into r1411;
    or r1348 r1369 into r1412;
    or r1412 r1390 into r1413;
    or r1413 r1411 into r1414;
    ternary r1369 1u8 0u8 into r1415;
    ternary r1390 2u8 r1415 into r1416;
    ternary r1411 3u8 r1416 into r1417;
    is.eq r311 r1417 into r1418;
    cast r1418 into r1419 as u8;
    is.eq r309 r1417 into r1420;
    cast r1420 into r1421 as u8;
    is.eq r305 r1417 into r1422;
    cast r1422 into r1423 as u8;
    is.eq r301 r1417 into r1424;
    cast r1424 into r1425 as u8;
    is.eq r297 r1417 into r1426;
    cast r1426 into r1427 as u8;
    is.eq r293 r1417 into r1428;
    cast r1428 into r1429 as u8;
    is.eq r289 r1417 into r1430;
    cast r1430 into r1431 as u8;
    add r1419 r1421 into r1432;
    add r1432 r1423 into r1433;
    add r1433 r1425 into r1434;
    add r1434 r1427 into r1435;
    add r1435 r1429 into r1436;
    is.eq r1419 1u8 into r1437;
    is.eq r1432 1u8 into r1438;
    is.eq r1433 1u8 into r1439;
    is.eq r1434 1u8 into r1440;
    is.eq r1435 1u8 into r1441;
    is.eq r1436 1u8 into r1442;
    is.eq r1419 2u8 into r1443;
    is.eq r1432 2u8 into r1444;
    is.eq r1433 2u8 into r1445;
    is.eq r1434 2u8 into r1446;
    is.eq r1435 2u8 into r1447;
    is.eq r1436 2u8 into r1448;
    is.eq r1419 3u8 into r1449;
    is.eq r1432 3u8 into r1450;
    is.eq r1433 3u8 into r1451;
    is.eq r1434 3u8 into r1452;
    is.eq r1435 3u8 into r1453;
    is.eq r1436 3u8 into r1454;
    is.eq r1419 4u8 into r1455;
    is.eq r1432 4u8 into r1456;
    is.eq r1433 4u8 into r1457;
    is.eq r1434 4u8 into r1458;
    is.eq r1435 4u8 into r1459;
    is.eq r1436 4u8 into r1460;
    is.eq r1419 5u8 into r1461;
    is.eq r1432 5u8 into r1462;
    is.eq r1433 5u8 into r1463;
    is.eq r1434 5u8 into r1464;
    is.eq r1435 5u8 into r1465;
    is.eq r1436 5u8 into r1466;
    ternary r1442 r294 r290 into r1467;
    ternary r1441 r298 r1467 into r1468;
    ternary r1440 r302 r1468 into r1469;
    ternary r1439 r306 r1469 into r1470;
    ternary r1438 r310 r1470 into r1471;
    ternary r1437 r312 r1471 into r1472;
    ternary r1448 r294 r290 into r1473;
    ternary r1447 r298 r1473 into r1474;
    ternary r1446 r302 r1474 into r1475;
    ternary r1445 r306 r1475 into r1476;
    ternary r1444 r310 r1476 into r1477;
    ternary r1443 r312 r1477 into r1478;
    ternary r1454 r294 r290 into r1479;
    ternary r1453 r298 r1479 into r1480;
    ternary r1452 r302 r1480 into r1481;
    ternary r1451 r306 r1481 into r1482;
    ternary r1450 r310 r1482 into r1483;
    ternary r1449 r312 r1483 into r1484;
    ternary r1460 r294 r290 into r1485;
    ternary r1459 r298 r1485 into r1486;
    ternary r1458 r302 r1486 into r1487;
    ternary r1457 r306 r1487 into r1488;
    ternary r1456 r310 r1488 into r1489;
    ternary r1455 r312 r1489 into r1490;
    ternary r1466 r294 r290 into r1491;
    ternary r1465 r298 r1491 into r1492;
    ternary r1464 r302 r1492 into r1493;
    ternary r1463 r306 r1493 into r1494;
    ternary r1462 r310 r1494 into r1495;
    ternary r1461 r312 r1495 into r1496;
    or r1195 r1202 into r1497;
    or r1497 r1209 into r1498;
    or r1498 r1222 into r1499;
    ternary r1209 r306 3u8 into r1500;
    ternary r1202 r310 r1500 into r1501;
    ternary r1195 r312 r1501 into r1502;
    cast r1294 into r1503 as u8;
    cast r1298 into r1504 as u8;
    add r1503 r1504 into r1505;
    cast r1302 into r1506 as u8;
    add r1505 r1506 into r1507;
    cast r1306 into r1508 as u8;
    add r1507 r1508 into r1509;
    cast r1310 into r1510 as u8;
    add r1509 r1510 into r1511;
    cast r1312 into r1512 as u8;
    add r1511 r1512 into r1513;
    gte r1513 2u8 into r1514;
    not r1312 into r1515;
    not r1310 into r1516;
    not r1306 into r1517;
    and r1310 r1515 into r1518;
    and r1306 r1516 into r1519;
    and r1519 r1515 into r1520;
    ternary r1298 r298 r294 into r1521;
    ternary r1302 r302 r1521 into r1522;
    ternary r1520 r306 r1522 into r1523;
    ternary r1518 r310 r1523 into r1524;
    not r1302 into r1525;
    not r1298 into r1526;
    ternary r1526 r298 r294 into r1527;
    ternary r1525 r302 r1527 into r1528;
    ternary r1517 r306 r1528 into r1529;
    ternary r1516 r310 r1529 into r1530;
    ternary r1515 r312 r1530 into r1531;
    ternary r1284 r302 r312 into r1532;
    ternary r1283 r298 r310 into r1533;
    ternary r1284 r298 r1533 into r1534;
    ternary r1312 r306 r312 into r1535;
    ternary r1310 r302 r310 into r1536;
    ternary r1312 r302 r1536 into r1537;
    ternary r1306 r298 r306 into r1538;
    ternary r1310 r298 r1538 into r1539;
    ternary r1312 r298 r1539 into r1540;
    cast r1232 into r1541 as u32;
    or 2415919104u32 r1541 into r1542;
    cast r1278 into r1543 as u32;
    mul r1543 16u32 into r1544;
    or 2147483648u32 r1544 into r1545;
    cast r1279 into r1546 as u32;
    or r1545 r1546 into r1547;
    cast r1292 into r1548 as u32;
    mul r1548 16u32 into r1549;
    or 1879048192u32 r1549 into r1550;
    cast r1322 into r1551 as u32;
    or r1550 r1551 into r1552;
    cast r1472 into r1553 as u32;
    mul r1553 65536u32 into r1554;
    or 1610612736u32 r1554 into r1555;
    cast r1478 into r1556 as u32;
    mul r1556 4096u32 into r1557;
    or r1555 r1557 into r1558;
    cast r1484 into r1559 as u32;
    mul r1559 256u32 into r1560;
    or r1558 r1560 into r1561;
    cast r1490 into r1562 as u32;
    mul r1562 16u32 into r1563;
    or r1561 r1563 into r1564;
    cast r1496 into r1565 as u32;
    or r1564 r1565 into r1566;
    cast r1502 into r1567 as u32;
    or 1342177280u32 r1567 into r1568;
    cast r1292 into r1569 as u32;
    mul r1569 256u32 into r1570;
    or 1073741824u32 r1570 into r1571;
    cast r1532 into r1572 as u32;
    mul r1572 16u32 into r1573;
    or r1571 r1573 into r1574;
    cast r1534 into r1575 as u32;
    or r1574 r1575 into r1576;
    cast r1322 into r1577 as u32;
    mul r1577 256u32 into r1578;
    or 805306368u32 r1578 into r1579;
    cast r1524 into r1580 as u32;
    mul r1580 16u32 into r1581;
    or r1579 r1581 into r1582;
    cast r1531 into r1583 as u32;
    or r1582 r1583 into r1584;
    cast r1322 into r1585 as u32;
    mul r1585 4096u32 into r1586;
    or 536870912u32 r1586 into r1587;
    cast r1535 into r1588 as u32;
    mul r1588 256u32 into r1589;
    or r1587 r1589 into r1590;
    cast r1537 into r1591 as u32;
    mul r1591 16u32 into r1592;
    or r1590 r1592 into r1593;
    cast r1540 into r1594 as u32;
    or r1593 r1594 into r1595;
    cast r312 into r1596 as u32;
    mul r1596 65536u32 into r1597;
    or 268435456u32 r1597 into r1598;
    cast r310 into r1599 as u32;
    mul r1599 4096u32 into r1600;
    or r1598 r1600 into r1601;
    cast r306 into r1602 as u32;
    mul r1602 256u32 into r1603;
    or r1601 r1603 into r1604;
    cast r302 into r1605 as u32;
    mul r1605 16u32 into r1606;
    or r1604 r1606 into r1607;
    cast r298 into r1608 as u32;
    or r1607 r1608 into r1609;
    ternary r1327 r1595 r1609 into r1610;
    ternary r1514 r1584 r1610 into r1611;
    ternary r1325 r1576 r1611 into r1612;
    ternary r1499 r1568 r1612 into r1613;
    ternary r1414 r1566 r1613 into r1614;
    ternary r1323 r1552 r1614 into r1615;
    ternary r1275 r1547 r1615 into r1616;
    ternary r1258 r1542 r1616 into r1617;
    gte r747 r1182 into r1618;
    and r25 r1618 into r1619;
    gte r747 r1617 into r1620;
    and r1619 r1620 into r1621;
    gte r1182 r747 into r1622;
    and r32 r1622 into r1623;
    gte r1182 r1617 into r1624;
    and r1623 r1624 into r1625;
    gte r1617 r747 into r1626;
    and r39 r1626 into r1627;
    gte r1617 r1182 into r1628;
    and r1627 r1628 into r1629;
    ternary r1621 1u8 0u8 into r1630;
    ternary r1625 2u8 0u8 into r1631;
    add r1630 r1631 into r1632;
    ternary r1629 4u8 0u8 into r1633;
    add r1632 r1633 into r1634;
    add r18.player1_bet r18.player2_bet into r1635;
    add r1635 r18.player3_bet into r1636;
    div r1636 2u16 into r1637;
    div r1636 3u16 into r1638;
    is.eq r1634 1u8 into r1639;
    is.eq r1634 3u8 into r1640;
    is.eq r1634 5u8 into r1641;
    is.eq r1634 7u8 into r1642;
    ternary r1642 r1638 0u16 into r1643;
    ternary r1641 r1637 r1643 into r1644;
    ternary r1640 r1637 r1644 into r1645;
    ternary r1639 r1636 r1645 into r1646;
    is.eq r1634 2u8 into r1647;
    is.eq r1634 3u8 into r1648;
    is.eq r1634 6u8 into r1649;
    is.eq r1634 7u8 into r1650;
    ternary r1650 r1638 0u16 into r1651;
    ternary r1649 r1637 r1651 into r1652;
    ternary r1648 r1637 r1652 into r1653;
    ternary r1647 r1636 r1653 into r1654;
    is.eq r1634 4u8 into r1655;
    is.eq r1634 5u8 into r1656;
    is.eq r1634 6u8 into r1657;
    is.eq r1634 7u8 into r1658;
    ternary r1658 r1638 0u16 into r1659;
    ternary r1657 r1637 r1659 into r1660;
    ternary r1656 r1637 r1660 into r1661;
    ternary r1655 r1636 r1661 into r1662;
    add r18.player1 r1646 into r1663;
    add r18.player2 r1654 into r1664;
    add r18.player3 r1662 into r1665;
    cast r1663 r1664 r1665 0u16 0u16 0u16 into r1666 as Chips;
    is.eq r1666.player1 0u16 into r1667;
    ternary r1667 1u8 0u8 into r1668;
    is.eq r1666.player2 0u16 into r1669;
    ternary r1669 2u8 0u8 into r1670;
    or r1668 r1670 into r1671;
    is.eq r1666.player3 0u16 into r1672;
    ternary r1672 4u8 0u8 into r1673;
    or r1671 r1673 into r1674;
    is.eq r1674 6u8 into r1675;
    branch.eq r1675 false to end_then_0_6;
    set r1666 into chips[r0];
    branch.eq true true to end_otherwise_0_7;
    position end_then_0_6;
    is.eq r1674 5u8 into r1676;
    branch.eq r1676 false to end_then_1_8;
    set r1666 into chips[r0];
    branch.eq true true to end_otherwise_1_9;
    position end_then_1_8;
    is.eq r1674 3u8 into r1677;
    branch.eq r1677 false to end_then_2_10;
    set r1666 into chips[r0];
    branch.eq true true to end_otherwise_2_11;
    position end_then_2_10;
    position end_otherwise_2_11;
    position end_otherwise_1_9;
    position end_otherwise_0_7;
    and r2.dealer_button 1u8 into r1678;
    is.neq r1678 0u8 into r1679;
    and r2.dealer_button 2u8 into r1680;
    is.neq r1680 0u8 into r1681;
    ternary r1681 4u8 1u8 into r1682;
    ternary r1679 2u8 r1682 into r1683;
    sub r2.remaining_hands 1u8 into r1684;
    is.eq r1684 0u8 into r1685;
    mul r2.sb 2u16 into r1686;
    mul r2.bb 2u16 into r1687;
    ternary r1685 r1686 r2.sb into r1688;
    ternary r1685 r1687 r2.bb into r1689;
    and r1674 1u8 into r1690;
    is.neq r1690 0u8 into r1691;
    not r1691 into r1692;
    and r1674 2u8 into r1693;
    is.neq r1693 0u8 into r1694;
    not r1694 into r1695;
    ternary r1695 31u8 32u8 into r1696;
    ternary r1692 30u8 r1696 into r1697;
    is.eq r1684 0u8 into r1698;
    ternary r1698 10u8 r1684 into r1699;
    add r2.hands_played 1u8 into r1700;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r1697 r1683 r1674 r1674 0u8 r1688 r1689 r1699 r1700 0u16 into r1701 as Game;
    set r1666 into chips[r0];
    set r1701 into games[r0];

constructor:
    assert.eq edition 0u16;
