import commutative_encryption.aleo;
program mental_poker.aleo;

record Keys:
    owner as address.private;
    secret as scalar.private;
    secret_inv as scalar.private;

struct Game:
    player1 as address;
    player2 as address;
    player3 as address;
    buy_in as u64;
    state as u8;
    dealer_button as u8;
    players_out as u8;
    players_folded as u8;
    last_bet as u8;
    sb as u16;
    bb as u16;
    remaining_hands as u8;
    hands_played as u8;
    last_raise_size as u16;

struct Chips:
    player1 as u16;
    player2 as u16;
    player3 as u16;
    player1_bet as u16;
    player2_bet as u16;
    player3_bet as u16;

struct Cards:
    player1 as [group; 2u32];
    player2 as [group; 2u32];
    player3 as [group; 2u32];
    flop as [group; 3u32];
    turn as group;
    river as group;

struct RevealedCards:
    player1 as [u8; 2u32];
    player2 as [u8; 2u32];
    player3 as [u8; 2u32];
    flop as [u8; 3u32];
    turn as u8;
    river as u8;

mapping games:
    key as u32.public;
    value as Game.public;

mapping decks:
    key as u32.public;
    value as [group; 52u32].public;

mapping chips:
    key as u32.public;
    value as Chips.public;

mapping cards:
    key as u32.public;
    value as Cards.public;

mapping revealed_cards:
    key as u32.public;
    value as RevealedCards.public;

function create_game:
    input r0 as u32.private;
    input r1 as [group; 52u32].private;
    input r2 as scalar.private;
    input r3 as scalar.private;
    call commutative_encryption.aleo/initialize_deck into r4;
    call commutative_encryption.aleo/verify_permutation r4 r1;
    call commutative_encryption.aleo/encrypt_deck r2 r1 into r5;
    call commutative_encryption.aleo/decrypt_card r3 r5[0u32] into r6;
    assert.eq r6 r1[0u32];
    cast self.signer r2 r3 into r7 as Keys.record;
    async create_game r0 r5 self.signer into r8;
    output r7 as Keys.record;
    output r8 as mental_poker.aleo/create_game.future;

finalize create_game:
    input r0 as u32.public;
    input r1 as [group; 52u32].public;
    input r2 as address.public;
    cast r2 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc 10u64 0u8 1u8 0u8 0u8 0u8 5u16 10u16 10u8 0u8 0u16 into r3 as Game;
    set r3 into games[r0];
    set r1 into decks[r0];

function join_game:
    input r0 as u32.private;
    input r1 as [group; 52u32].private;
    input r2 as [group; 52u32].private;
    input r3 as scalar.private;
    input r4 as scalar.private;
    call commutative_encryption.aleo/verify_permutation r1 r2;
    call commutative_encryption.aleo/encrypt_deck r3 r2 into r5;
    call commutative_encryption.aleo/decrypt_card r4 r5[0u32] into r6;
    assert.eq r6 r2[0u32];
    cast self.signer r3 r4 into r7 as Keys.record;
    async join_game r0 r1 r5 self.signer into r8;
    output r7 as Keys.record;
    output r8 as mental_poker.aleo/join_game.future;

finalize join_game:
    input r0 as u32.public;
    input r1 as [group; 52u32].public;
    input r2 as [group; 52u32].public;
    input r3 as address.public;
    get games[r0] into r4;
    get decks[r0] into r5;
    is.eq r5 r1 into r6;
    assert.eq r6 true;
    is.eq r4.state 0u8 into r7;
    is.eq r4.state 1u8 into r8;
    or r7 r8 into r9;
    assert.eq r9 true;
    ternary r7 r3 r4.player2 into r10;
    not r7 into r11;
    ternary r11 r3 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r12;
    ternary r7 1u8 2u8 into r13;
    cast r4.player1 r10 r12 r4.buy_in r13 r4.dealer_button 0u8 0u8 0u8 r4.sb r4.bb r4.remaining_hands 0u8 0u16 into r14 as Game;
    set r14 into games[r0];
    set r2 into decks[r0];
    branch.eq r11 false to end_then_0_0;
    sub 1000u16 r4.sb into r15;
    sub 1000u16 r4.bb into r16;
    cast r15 r16 1000u16 r4.sb r4.bb 0u16 into r17 as Chips;
    cast r2[0u32] r2[3u32] into r18 as [group; 2u32];
    cast r2[1u32] r2[4u32] into r19 as [group; 2u32];
    cast r2[2u32] r2[5u32] into r20 as [group; 2u32];
    cast r2[7u32] r2[8u32] r2[9u32] into r21 as [group; 3u32];
    cast r18 r19 r20 r21 r2[11u32] r2[13u32] into r22 as Cards;
    cast 255u8 255u8 into r23 as [u8; 2u32];
    cast 255u8 255u8 255u8 into r24 as [u8; 3u32];
    cast r23 r23 r23 r24 255u8 255u8 into r25 as RevealedCards;
    set r17 into chips[r0];
    set r22 into cards[r0];
    set r25 into revealed_cards[r0];
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;

function bet:
    input r0 as u32.private;
    input r1 as u16.private;
    async bet r0 r1 self.signer into r2;
    output r2 as mental_poker.aleo/bet.future;

finalize bet:
    input r0 as u32.public;
    input r1 as u16.public;
    input r2 as address.public;
    get games[r0] into r3;
    get chips[r0] into r4;
    is.eq r3.player1 r2 into r5;
    is.eq r3.state 5u8 into r6;
    is.eq r3.state 11u8 into r7;
    or r6 r7 into r8;
    is.eq r3.state 17u8 into r9;
    or r8 r9 into r10;
    is.eq r3.state 23u8 into r11;
    or r10 r11 into r12;
    and r5 r12 into r13;
    is.eq r3.player2 r2 into r14;
    is.eq r3.state 6u8 into r15;
    is.eq r3.state 12u8 into r16;
    or r15 r16 into r17;
    is.eq r3.state 18u8 into r18;
    or r17 r18 into r19;
    is.eq r3.state 24u8 into r20;
    or r19 r20 into r21;
    and r14 r21 into r22;
    is.eq r3.player3 r2 into r23;
    is.eq r3.state 7u8 into r24;
    is.eq r3.state 13u8 into r25;
    or r24 r25 into r26;
    is.eq r3.state 19u8 into r27;
    or r26 r27 into r28;
    is.eq r3.state 25u8 into r29;
    or r28 r29 into r30;
    and r23 r30 into r31;
    or r13 r22 into r32;
    or r32 r31 into r33;
    assert.eq r33 true;
    ternary r22 r4.player2 r4.player3 into r34;
    ternary r22 r4.player2_bet r4.player3_bet into r35;
    ternary r13 r4.player1 r34 into r36;
    ternary r13 r4.player1_bet r35 into r37;
    gte r4.player1_bet r4.player2_bet into r38;
    gte r4.player1_bet r4.player3_bet into r39;
    and r38 r39 into r40;
    gte r4.player2_bet r4.player3_bet into r41;
    ternary r41 r4.player2_bet r4.player3_bet into r42;
    ternary r40 r4.player1_bet r42 into r43;
    is.eq r43 0u16 into r44;
    is.eq r3.last_raise_size 0u16 into r45;
    ternary r45 r3.bb r3.last_raise_size into r46;
    ternary r44 r3.bb r46 into r47;
    add r43 r47 into r48;
    sub r43 r37 into r49;
    ternary r44 r3.bb r49 into r50;
    is.eq r1 r36 into r51;
    gte r1 r50 into r52;
    or r51 r52 into r53;
    assert.eq r53 true;
    add r37 r1 into r54;
    sub r36 r1 into r55;
    is.eq r55 0u16 into r56;
    gte r54 r48 into r57;
    gt r54 r43 into r58;
    not r57 into r59;
    and r58 r59 into r60;
    and r60 r56 into r61;
    is.eq r4.player1 0u16 into r62;
    and r3.players_folded 1u8 into r63;
    is.neq r63 0u8 into r64;
    or r62 r64 into r65;
    and r3.players_out 1u8 into r66;
    is.neq r66 0u8 into r67;
    or r65 r67 into r68;
    is.eq r4.player2 0u16 into r69;
    and r3.players_folded 2u8 into r70;
    is.neq r70 0u8 into r71;
    or r69 r71 into r72;
    and r3.players_out 2u8 into r73;
    is.neq r73 0u8 into r74;
    or r72 r74 into r75;
    is.eq r4.player3 0u16 into r76;
    and r3.players_folded 4u8 into r77;
    is.neq r77 0u8 into r78;
    or r76 r78 into r79;
    and r3.players_out 4u8 into r80;
    is.neq r80 0u8 into r81;
    or r79 r81 into r82;
    not r68 into r83;
    cast r83 into r84 as u8;
    not r75 into r85;
    cast r85 into r86 as u8;
    add r84 r86 into r87;
    not r82 into r88;
    cast r88 into r89 as u8;
    add r87 r89 into r90;
    gt r90 1u8 into r91;
    is.eq r90 1u8 into r92;
    lt r37 r43 into r93;
    and r92 r93 into r94;
    or r91 r94 into r95;
    assert.eq r95 true;
    cast r56 into r96 as u8;
    sub r90 r96 into r97;
    is.eq r4.player1 0u16 into r98;
    lt r4.player1_bet r43 into r99;
    and r98 r99 into r100;
    is.eq r4.player2 0u16 into r101;
    lt r4.player2_bet r43 into r102;
    and r101 r102 into r103;
    or r100 r103 into r104;
    is.eq r4.player3 0u16 into r105;
    lt r4.player3_bet r43 into r106;
    and r105 r106 into r107;
    or r104 r107 into r108;
    and r3.last_bet 1u8 into r109;
    is.neq r109 0u8 into r110;
    and r13 r110 into r111;
    and r3.last_bet 2u8 into r112;
    is.neq r112 0u8 into r113;
    and r22 r113 into r114;
    or r111 r114 into r115;
    and r3.last_bet 4u8 into r116;
    is.neq r116 0u8 into r117;
    and r31 r117 into r118;
    or r115 r118 into r119;
    is.eq r54 r43 into r120;
    is.eq r4.player1_bet r43 into r121;
    ternary r13 r120 r121 into r122;
    or r68 r122 into r123;
    is.eq r4.player2_bet r43 into r124;
    ternary r22 r120 r124 into r125;
    or r75 r125 into r126;
    is.eq r4.player3_bet r43 into r127;
    ternary r31 r120 r127 into r128;
    or r82 r128 into r129;
    and r123 r126 into r130;
    and r130 r129 into r131;
    lte r97 1u8 into r132;
    gte r54 r43 into r133;
    and r133 r131 into r134;
    lte r3.state 7u8 into r135;
    gte r3.state 11u8 into r136;
    lte r3.state 13u8 into r137;
    and r136 r137 into r138;
    gte r3.state 17u8 into r139;
    lte r3.state 19u8 into r140;
    and r139 r140 into r141;
    and r3.players_out 1u8 into r142;
    is.neq r142 0u8 into r143;
    and r3.players_out 2u8 into r144;
    is.neq r144 0u8 into r145;
    ternary r145 10u8 9u8 into r146;
    ternary r143 r146 8u8 into r147;
    ternary r145 16u8 15u8 into r148;
    ternary r143 r148 14u8 into r149;
    ternary r145 22u8 21u8 into r150;
    ternary r143 r150 20u8 into r151;
    ternary r75 28u8 27u8 into r152;
    ternary r68 r152 26u8 into r153;
    ternary r141 r151 r153 into r154;
    ternary r138 r149 r154 into r155;
    ternary r135 r147 r155 into r156;
    ternary r141 17u8 23u8 into r157;
    ternary r138 11u8 r157 into r158;
    ternary r135 5u8 r158 into r159;
    ternary r75 2u8 1u8 into r160;
    ternary r82 0u8 2u8 into r161;
    ternary r68 1u8 0u8 into r162;
    ternary r22 r161 r162 into r163;
    ternary r13 r160 r163 into r164;
    add r159 r164 into r165;
    is.eq r3.last_bet 0u8 into r166;
    or r119 r166 into r167;
    or r167 r61 into r168;
    and r108 r59 into r169;
    and r169 r119 into r170;
    or r168 r170 into r171;
    and r134 r171 into r172;
    or r132 r172 into r173;
    ternary r173 r156 r165 into r174;
    ternary r22 2u8 4u8 into r175;
    ternary r13 1u8 r175 into r176;
    ternary r57 r176 r3.last_bet into r177;
    add r4.player1_bet r4.player2_bet into r178;
    add r178 r4.player3_bet into r179;
    add r179 r1 into r180;
    ternary r13 r55 r4.player1 into r181;
    ternary r22 r55 r4.player2 into r182;
    ternary r31 r55 r4.player3 into r183;
    ternary r13 r54 r4.player1_bet into r184;
    ternary r22 r54 r4.player2_bet into r185;
    ternary r31 r54 r4.player3_bet into r186;
    cast r181 r182 r183 r184 r185 r186 into r187 as Chips;
    sub r54 r43 into r188;
    ternary r57 r188 r3.last_raise_size into r189;
    cast r3.player1 r3.player2 r3.player3 r3.buy_in r174 r3.dealer_button r3.players_out r3.players_folded r177 r3.sb r3.bb r3.remaining_hands r3.hands_played r189 into r190 as Game;
    set r187 into chips[r0];
    set r190 into games[r0];

function decrypt_hands:
    input r0 as u32.private;
    input r1 as [group; 2u32].private;
    input r2 as [group; 2u32].private;
    input r3 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r1[0u32] into r4;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r1[1u32] into r5;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r2[0u32] into r6;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r2[1u32] into r7;
    cast r4 r5 into r8 as [group; 2u32];
    cast r6 r7 into r9 as [group; 2u32];
    async decrypt_hands r0 r1 r2 r8 r9 self.signer into r10;
    cast r3.owner r3.secret r3.secret_inv into r11 as Keys.record;
    output r11 as Keys.record;
    output r10 as mental_poker.aleo/decrypt_hands.future;

finalize decrypt_hands:
    input r0 as u32.public;
    input r1 as [group; 2u32].public;
    input r2 as [group; 2u32].public;
    input r3 as [group; 2u32].public;
    input r4 as [group; 2u32].public;
    input r5 as address.public;
    get cards[r0] into r6;
    get games[r0] into r7;
    is.eq r7.player1 r5 into r8;
    is.eq r7.state 2u8 into r9;
    and r8 r9 into r10;
    is.eq r7.player2 r5 into r11;
    is.eq r7.state 3u8 into r12;
    and r11 r12 into r13;
    is.eq r7.player3 r5 into r14;
    is.eq r7.state 4u8 into r15;
    and r14 r15 into r16;
    or r10 r13 into r17;
    or r17 r16 into r18;
    assert.eq r18 true;
    is.eq r6.player2 r1 into r19;
    and r10 r19 into r20;
    is.eq r6.player3 r2 into r21;
    and r20 r21 into r22;
    is.eq r6.player1 r1 into r23;
    and r13 r23 into r24;
    is.eq r6.player3 r2 into r25;
    and r24 r25 into r26;
    or r22 r26 into r27;
    is.eq r6.player1 r1 into r28;
    and r16 r28 into r29;
    is.eq r6.player2 r2 into r30;
    and r29 r30 into r31;
    or r27 r31 into r32;
    assert.eq r32 true;
    ternary r10 r6.player1[0u32] r3[0u32] into r33;
    ternary r10 r6.player1[1u32] r3[1u32] into r34;
    cast r33 r34 into r35 as [group; 2u32];
    ternary r10 r3[0u32] r4[0u32] into r36;
    ternary r10 r3[1u32] r4[1u32] into r37;
    cast r36 r37 into r38 as [group; 2u32];
    ternary r13 r6.player2[0u32] r38[0u32] into r39;
    ternary r13 r6.player2[1u32] r38[1u32] into r40;
    cast r39 r40 into r41 as [group; 2u32];
    ternary r16 r6.player3[0u32] r4[0u32] into r42;
    ternary r16 r6.player3[1u32] r4[1u32] into r43;
    cast r42 r43 into r44 as [group; 2u32];
    cast r35 r41 r44 r6.flop r6.turn r6.river into r45 as Cards;
    and r7.players_out 1u8 into r46;
    is.neq r46 0u8 into r47;
    and r7.players_out 2u8 into r48;
    is.neq r48 0u8 into r49;
    and r7.players_out 4u8 into r50;
    is.neq r50 0u8 into r51;
    and r7.players_folded 1u8 into r52;
    is.neq r52 0u8 into r53;
    and r7.players_folded 2u8 into r54;
    is.neq r54 0u8 into r55;
    and r7.players_folded 4u8 into r56;
    is.neq r56 0u8 into r57;
    and r7.dealer_button 1u8 into r58;
    is.neq r58 0u8 into r59;
    and r7.dealer_button 2u8 into r60;
    is.neq r60 0u8 into r61;
    or r47 r53 into r62;
    ternary r61 2u8 1u8 into r63;
    or r49 r55 into r64;
    ternary r59 2u8 0u8 into r65;
    or r51 r57 into r66;
    ternary r61 0u8 1u8 into r67;
    ternary r59 2u8 r67 into r68;
    ternary r66 r67 r68 into r69;
    ternary r64 r65 r69 into r70;
    ternary r62 r63 r70 into r71;
    add 5u8 r71 into r72;
    ternary r61 4u8 1u8 into r73;
    ternary r59 2u8 r73 into r74;
    ternary r49 r72 3u8 into r75;
    ternary r51 r72 4u8 into r76;
    ternary r13 r76 r72 into r77;
    ternary r10 r75 r77 into r78;
    ternary r51 r74 r7.last_bet into r79;
    ternary r13 r79 r74 into r80;
    ternary r10 r7.last_bet r80 into r81;
    cast r7.player1 r7.player2 r7.player3 r7.buy_in r78 r7.dealer_button r7.players_out r7.players_folded r81 r7.sb r7.bb r7.remaining_hands r7.hands_played r7.last_raise_size into r82 as Game;
    set r45 into cards[r0];
    set r82 into games[r0];

function decrypt_flop:
    input r0 as u32.private;
    input r1 as [group; 3u32].private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[0u32] into r3;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[1u32] into r4;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[2u32] into r5;
    cast r3 r4 r5 into r6 as [group; 3u32];
    call commutative_encryption.aleo/to_u8 r3 into r7;
    call commutative_encryption.aleo/to_u8 r4 into r8;
    call commutative_encryption.aleo/to_u8 r5 into r9;
    cast r7 r8 r9 into r10 as [u8; 3u32];
    async decrypt_flop r0 r1 r6 r10 self.signer into r11;
    cast r2.owner r2.secret r2.secret_inv into r12 as Keys.record;
    output r12 as Keys.record;
    output r11 as mental_poker.aleo/decrypt_flop.future;

finalize decrypt_flop:
    input r0 as u32.public;
    input r1 as [group; 3u32].public;
    input r2 as [group; 3u32].public;
    input r3 as [u8; 3u32].public;
    input r4 as address.public;
    get cards[r0] into r5;
    get games[r0] into r6;
    is.eq r4 r6.player1 into r7;
    is.eq r6.state 8u8 into r8;
    and r7 r8 into r9;
    is.eq r4 r6.player2 into r10;
    is.eq r6.state 9u8 into r11;
    and r10 r11 into r12;
    is.eq r4 r6.player3 into r13;
    is.eq r6.state 10u8 into r14;
    and r13 r14 into r15;
    or r9 r12 into r16;
    or r16 r15 into r17;
    assert.eq r17 true;
    assert.eq r1 r5.flop;
    cast r5.player1 r5.player2 r5.player3 r2 r5.turn r5.river into r18 as Cards;
    get revealed_cards[r0] into r19;
    cast r19.player1 r19.player2 r19.player3 r3 r19.turn r19.river into r20 as RevealedCards;
    set r20 into revealed_cards[r0];
    get chips[r0] into r21;
    is.eq r21.player1 0u16 into r22;
    and r6.players_folded 1u8 into r23;
    is.neq r23 0u8 into r24;
    or r22 r24 into r25;
    is.eq r21.player2 0u16 into r26;
    and r6.players_folded 2u8 into r27;
    is.neq r27 0u8 into r28;
    or r26 r28 into r29;
    is.eq r21.player3 0u16 into r30;
    and r6.players_folded 4u8 into r31;
    is.neq r31 0u8 into r32;
    or r30 r32 into r33;
    not r25 into r34;
    cast r34 into r35 as u8;
    not r29 into r36;
    cast r36 into r37 as u8;
    add r35 r37 into r38;
    not r33 into r39;
    cast r39 into r40 as u8;
    add r38 r40 into r41;
    lte r41 1u8 into r42;
    and r6.players_out 2u8 into r43;
    is.neq r43 0u8 into r44;
    not r44 into r45;
    ternary r45 9u8 10u8 into r46;
    and r6.players_out 4u8 into r47;
    is.neq r47 0u8 into r48;
    not r48 into r49;
    and r6.dealer_button 1u8 into r50;
    is.neq r50 0u8 into r51;
    ternary r39 13u8 11u8 into r52;
    ternary r36 12u8 r52 into r53;
    and r6.dealer_button 2u8 into r54;
    is.neq r54 0u8 into r55;
    ternary r34 11u8 12u8 into r56;
    ternary r39 13u8 r56 into r57;
    ternary r36 12u8 13u8 into r58;
    ternary r34 11u8 r58 into r59;
    ternary r55 r57 r59 into r60;
    ternary r51 r53 r60 into r61;
    ternary r42 14u8 r61 into r62;
    ternary r49 10u8 r62 into r63;
    and r6.dealer_button 1u8 into r64;
    is.neq r64 0u8 into r65;
    and r6.dealer_button 2u8 into r66;
    is.neq r66 0u8 into r67;
    ternary r67 r57 r59 into r68;
    ternary r65 r53 r68 into r69;
    ternary r42 14u8 r69 into r70;
    ternary r12 r63 r70 into r71;
    ternary r9 r46 r71 into r72;
    or r9 r12 into r73;
    and r6.dealer_button 1u8 into r74;
    is.neq r74 0u8 into r75;
    ternary r39 4u8 2u8 into r76;
    ternary r34 1u8 r76 into r77;
    and r6.dealer_button 2u8 into r78;
    is.neq r78 0u8 into r79;
    ternary r34 1u8 4u8 into r80;
    ternary r36 2u8 r80 into r81;
    ternary r36 2u8 1u8 into r82;
    ternary r39 4u8 r82 into r83;
    ternary r79 r81 r83 into r84;
    ternary r75 r77 r84 into r85;
    ternary r73 0u8 r85 into r86;
    ternary r15 0u16 r6.last_raise_size into r87;
    cast r6.player1 r6.player2 r6.player3 r6.buy_in r72 r6.dealer_button r6.players_out r6.players_folded r86 r6.sb r6.bb r6.remaining_hands r6.hands_played r87 into r88 as Game;
    set r18 into cards[r0];
    set r88 into games[r0];

function fold:
    input r0 as u32.private;
    async fold r0 self.signer into r1;
    output r1 as mental_poker.aleo/fold.future;

finalize fold:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    get chips[r0] into r3;
    gte r2.state 5u8 into r4;
    lte r2.state 7u8 into r5;
    and r4 r5 into r6;
    gte r2.state 11u8 into r7;
    lte r2.state 13u8 into r8;
    and r7 r8 into r9;
    or r6 r9 into r10;
    gte r2.state 17u8 into r11;
    lte r2.state 19u8 into r12;
    and r11 r12 into r13;
    or r10 r13 into r14;
    gte r2.state 23u8 into r15;
    lte r2.state 25u8 into r16;
    and r15 r16 into r17;
    or r14 r17 into r18;
    assert.eq r18 true;
    is.eq r2.player1 r1 into r19;
    is.eq r2.player2 r1 into r20;
    is.eq r2.player3 r1 into r21;
    or r19 r20 into r22;
    or r22 r21 into r23;
    assert.eq r23 true;
    ternary r20 2u8 4u8 into r24;
    ternary r19 1u8 r24 into r25;
    or r2.players_folded r25 into r26;
    and r26 1u8 into r27;
    is.neq r27 0u8 into r28;
    not r28 into r29;
    cast r29 into r30 as u8;
    and r26 2u8 into r31;
    is.neq r31 0u8 into r32;
    not r32 into r33;
    cast r33 into r34 as u8;
    add r30 r34 into r35;
    and r26 4u8 into r36;
    is.neq r36 0u8 into r37;
    not r37 into r38;
    cast r38 into r39 as u8;
    add r35 r39 into r40;
    is.eq r40 1u8 into r41;
    branch.eq r41 false to end_then_0_2;
    add r3.player1_bet r3.player2_bet into r42;
    add r42 r3.player3_bet into r43;
    not r28 into r44;
    add r3.player1 r43 into r45;
    ternary r44 r45 r3.player1 into r46;
    not r32 into r47;
    add r3.player2 r43 into r48;
    ternary r47 r48 r3.player2 into r49;
    not r37 into r50;
    add r3.player3 r43 into r51;
    ternary r50 r51 r3.player3 into r52;
    cast r46 r49 r52 0u16 0u16 0u16 into r53 as Chips;
    and r2.players_out 1u8 into r54;
    is.neq r54 0u8 into r55;
    not r55 into r56;
    and r2.players_out 2u8 into r57;
    is.neq r57 0u8 into r58;
    not r58 into r59;
    ternary r59 31u8 32u8 into r60;
    ternary r56 30u8 r60 into r61;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r61 r2.dealer_button r2.players_out r26 0u8 r2.sb r2.bb r2.remaining_hands r2.hands_played 0u16 into r62 as Game;
    set r53 into chips[r0];
    set r62 into games[r0];
    branch.eq true true to end_otherwise_0_3;
    position end_then_0_2;
    position end_otherwise_0_3;
    gte r3.player1_bet r3.player2_bet into r63;
    gte r3.player1_bet r3.player3_bet into r64;
    and r63 r64 into r65;
    gte r3.player2_bet r3.player3_bet into r66;
    ternary r66 r3.player2_bet r3.player3_bet into r67;
    ternary r65 r3.player1_bet r67 into r68;
    is.eq r3.player1_bet r68 into r69;
    or r28 r69 into r70;
    is.eq r3.player2_bet r68 into r71;
    or r32 r71 into r72;
    and r70 r72 into r73;
    is.eq r3.player3_bet r68 into r74;
    or r37 r74 into r75;
    and r73 r75 into r76;
    lte r2.state 7u8 into r77;
    lte r2.state 13u8 into r78;
    lte r2.state 19u8 into r79;
    ternary r79 17u8 23u8 into r80;
    ternary r78 11u8 r80 into r81;
    ternary r77 5u8 r81 into r82;
    lte r2.state 7u8 into r83;
    and r2.players_out 1u8 into r84;
    is.neq r84 0u8 into r85;
    ternary r85 9u8 8u8 into r86;
    lte r2.state 13u8 into r87;
    and r2.players_out 1u8 into r88;
    is.neq r88 0u8 into r89;
    ternary r89 15u8 14u8 into r90;
    lte r2.state 19u8 into r91;
    and r2.players_out 1u8 into r92;
    is.neq r92 0u8 into r93;
    ternary r93 21u8 20u8 into r94;
    and r2.players_out 1u8 into r95;
    is.neq r95 0u8 into r96;
    ternary r96 27u8 26u8 into r97;
    ternary r91 r94 r97 into r98;
    ternary r87 r90 r98 into r99;
    ternary r83 r86 r99 into r100;
    add r82 2u8 into r101;
    add r82 1u8 into r102;
    ternary r32 r101 r102 into r103;
    ternary r37 r82 r101 into r104;
    ternary r28 r102 r82 into r105;
    ternary r20 r104 r105 into r106;
    ternary r19 r103 r106 into r107;
    ternary r76 r100 r107 into r108;
    ternary r76 0u8 r2.last_bet into r109;
    ternary r76 0u16 r2.last_raise_size into r110;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r108 r2.dealer_button r2.players_out r26 r109 r2.sb r2.bb r2.remaining_hands r2.hands_played r110 into r111 as Game;
    set r111 into games[r0];

function decrypt_turn_river:
    input r0 as u32.private;
    input r1 as group.private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1 into r3;
    call commutative_encryption.aleo/to_u8 r3 into r4;
    async decrypt_turn_river r0 r1 r3 r4 self.signer into r5;
    cast r2.owner r2.secret r2.secret_inv into r6 as Keys.record;
    output r6 as Keys.record;
    output r5 as mental_poker.aleo/decrypt_turn_river.future;

finalize decrypt_turn_river:
    input r0 as u32.public;
    input r1 as group.public;
    input r2 as group.public;
    input r3 as u8.public;
    input r4 as address.public;
    get cards[r0] into r5;
    get games[r0] into r6;
    is.eq r4 r6.player1 into r7;
    is.eq r4 r6.player2 into r8;
    is.eq r4 r6.player3 into r9;
    is.eq r6.state 14u8 into r10;
    and r7 r10 into r11;
    is.eq r6.state 15u8 into r12;
    and r8 r12 into r13;
    is.eq r6.state 16u8 into r14;
    and r9 r14 into r15;
    is.eq r6.state 20u8 into r16;
    and r7 r16 into r17;
    is.eq r6.state 21u8 into r18;
    and r8 r18 into r19;
    is.eq r6.state 22u8 into r20;
    and r9 r20 into r21;
    or r17 r19 into r22;
    or r22 r21 into r23;
    or r11 r13 into r24;
    or r24 r15 into r25;
    or r25 r23 into r26;
    assert.eq r26 true;
    ternary r23 r5.river r5.turn into r27;
    assert.eq r1 r27;
    ternary r23 r5.turn r2 into r28;
    ternary r23 r2 r5.river into r29;
    cast r5.player1 r5.player2 r5.player3 r5.flop r28 r29 into r30 as Cards;
    or r15 r21 into r31;
    branch.eq r31 false to end_then_0_4;
    get revealed_cards[r0] into r32;
    ternary r15 r3 r32.turn into r33;
    ternary r21 r3 r32.river into r34;
    cast r32.player1 r32.player2 r32.player3 r32.flop r33 r34 into r35 as RevealedCards;
    set r35 into revealed_cards[r0];
    branch.eq true true to end_otherwise_0_5;
    position end_then_0_4;
    position end_otherwise_0_5;
    get chips[r0] into r36;
    is.eq r36.player1 0u16 into r37;
    and r6.players_folded 1u8 into r38;
    is.neq r38 0u8 into r39;
    or r37 r39 into r40;
    is.eq r36.player2 0u16 into r41;
    and r6.players_folded 2u8 into r42;
    is.neq r42 0u8 into r43;
    or r41 r43 into r44;
    is.eq r36.player3 0u16 into r45;
    and r6.players_folded 4u8 into r46;
    is.neq r46 0u8 into r47;
    or r45 r47 into r48;
    not r40 into r49;
    cast r49 into r50 as u8;
    not r44 into r51;
    cast r51 into r52 as u8;
    add r50 r52 into r53;
    not r48 into r54;
    cast r54 into r55 as u8;
    add r53 r55 into r56;
    lte r56 1u8 into r57;
    and r6.players_out 2u8 into r58;
    is.neq r58 0u8 into r59;
    not r59 into r60;
    ternary r60 15u8 16u8 into r61;
    and r6.players_out 4u8 into r62;
    is.neq r62 0u8 into r63;
    not r63 into r64;
    and r6.dealer_button 1u8 into r65;
    is.neq r65 0u8 into r66;
    ternary r54 19u8 17u8 into r67;
    ternary r51 18u8 r67 into r68;
    and r6.dealer_button 2u8 into r69;
    is.neq r69 0u8 into r70;
    ternary r49 17u8 18u8 into r71;
    ternary r54 19u8 r71 into r72;
    ternary r51 18u8 19u8 into r73;
    ternary r49 17u8 r73 into r74;
    ternary r70 r72 r74 into r75;
    ternary r66 r68 r75 into r76;
    ternary r57 20u8 r76 into r77;
    ternary r64 16u8 r77 into r78;
    and r6.dealer_button 1u8 into r79;
    is.neq r79 0u8 into r80;
    and r6.dealer_button 2u8 into r81;
    is.neq r81 0u8 into r82;
    ternary r82 r72 r74 into r83;
    ternary r80 r68 r83 into r84;
    ternary r57 20u8 r84 into r85;
    and r6.players_out 2u8 into r86;
    is.neq r86 0u8 into r87;
    not r87 into r88;
    ternary r88 21u8 22u8 into r89;
    and r6.players_out 4u8 into r90;
    is.neq r90 0u8 into r91;
    not r91 into r92;
    and r6.dealer_button 1u8 into r93;
    is.neq r93 0u8 into r94;
    ternary r54 25u8 23u8 into r95;
    ternary r51 24u8 r95 into r96;
    and r6.dealer_button 2u8 into r97;
    is.neq r97 0u8 into r98;
    ternary r49 23u8 24u8 into r99;
    ternary r54 25u8 r99 into r100;
    ternary r51 24u8 25u8 into r101;
    ternary r49 23u8 r101 into r102;
    ternary r98 r100 r102 into r103;
    ternary r94 r96 r103 into r104;
    ternary r57 26u8 r104 into r105;
    ternary r92 22u8 r105 into r106;
    and r6.dealer_button 1u8 into r107;
    is.neq r107 0u8 into r108;
    and r6.dealer_button 2u8 into r109;
    is.neq r109 0u8 into r110;
    ternary r110 r100 r102 into r111;
    ternary r108 r96 r111 into r112;
    ternary r57 26u8 r112 into r113;
    ternary r19 r106 r113 into r114;
    ternary r17 r89 r114 into r115;
    ternary r15 r85 r115 into r116;
    ternary r13 r78 r116 into r117;
    ternary r11 r61 r117 into r118;
    or r11 r13 into r119;
    or r119 r17 into r120;
    or r120 r19 into r121;
    and r6.dealer_button 1u8 into r122;
    is.neq r122 0u8 into r123;
    ternary r54 4u8 2u8 into r124;
    ternary r49 1u8 r124 into r125;
    and r6.dealer_button 2u8 into r126;
    is.neq r126 0u8 into r127;
    ternary r49 1u8 4u8 into r128;
    ternary r51 2u8 r128 into r129;
    ternary r51 2u8 1u8 into r130;
    ternary r54 4u8 r130 into r131;
    ternary r127 r129 r131 into r132;
    ternary r123 r125 r132 into r133;
    ternary r121 0u8 r133 into r134;
    ternary r31 0u16 r6.last_raise_size into r135;
    cast r6.player1 r6.player2 r6.player3 r6.buy_in r118 r6.dealer_button r6.players_out r6.players_folded r134 r6.sb r6.bb r6.remaining_hands r6.hands_played r135 into r136 as Game;
    set r30 into cards[r0];
    set r136 into games[r0];

function showdown:
    input r0 as u32.private;
    input r1 as [group; 2u32].private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[0u32] into r3;
    call commutative_encryption.aleo/to_u8 r3 into r4;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[1u32] into r5;
    call commutative_encryption.aleo/to_u8 r5 into r6;
    cast r4 r6 into r7 as [u8; 2u32];
    async showdown r0 self.signer r1 r7 into r8;
    cast r2.owner r2.secret r2.secret_inv into r9 as Keys.record;
    output r9 as Keys.record;
    output r8 as mental_poker.aleo/showdown.future;

finalize showdown:
    input r0 as u32.public;
    input r1 as address.public;
    input r2 as [group; 2u32].public;
    input r3 as [u8; 2u32].public;
    get cards[r0] into r4;
    get games[r0] into r5;
    is.eq r5.state 26u8 into r6;
    is.eq r5.state 27u8 into r7;
    is.eq r5.state 28u8 into r8;
    is.eq r1 r5.player1 into r9;
    is.eq r1 r5.player2 into r10;
    is.eq r1 r5.player3 into r11;
    ternary r11 28u8 255u8 into r12;
    ternary r10 27u8 r12 into r13;
    ternary r9 26u8 r13 into r14;
    assert.eq r5.state r14;
    ternary r7 r4.player2[0u32] r4.player3[0u32] into r15;
    ternary r7 r4.player2[1u32] r4.player3[1u32] into r16;
    cast r15 r16 into r17 as [group; 2u32];
    ternary r6 r4.player1[0u32] r17[0u32] into r18;
    ternary r6 r4.player1[1u32] r17[1u32] into r19;
    cast r18 r19 into r20 as [group; 2u32];
    assert.eq r2 r20;
    get revealed_cards[r0] into r21;
    ternary r6 r3[0u32] r21.player1[0u32] into r22;
    ternary r6 r3[1u32] r21.player1[1u32] into r23;
    cast r22 r23 into r24 as [u8; 2u32];
    ternary r7 r3[0u32] r21.player2[0u32] into r25;
    ternary r7 r3[1u32] r21.player2[1u32] into r26;
    cast r25 r26 into r27 as [u8; 2u32];
    ternary r8 r3[0u32] r21.player3[0u32] into r28;
    ternary r8 r3[1u32] r21.player3[1u32] into r29;
    cast r28 r29 into r30 as [u8; 2u32];
    cast r24 r27 r30 r21.flop r21.turn r21.river into r31 as RevealedCards;
    and r5.players_out 2u8 into r32;
    is.neq r32 0u8 into r33;
    not r33 into r34;
    and r5.players_folded 2u8 into r35;
    is.neq r35 0u8 into r36;
    not r36 into r37;
    and r34 r37 into r38;
    and r5.players_out 4u8 into r39;
    is.neq r39 0u8 into r40;
    not r40 into r41;
    and r5.players_folded 4u8 into r42;
    is.neq r42 0u8 into r43;
    not r43 into r44;
    and r41 r44 into r45;
    ternary r45 28u8 29u8 into r46;
    ternary r38 27u8 r46 into r47;
    ternary r7 r46 29u8 into r48;
    ternary r6 r47 r48 into r49;
    cast r5.player1 r5.player2 r5.player3 r5.buy_in r49 r5.dealer_button r5.players_out r5.players_folded r5.last_bet r5.sb r5.bb r5.remaining_hands r5.hands_played r5.last_raise_size into r50 as Game;
    set r31 into revealed_cards[r0];
    set r50 into games[r0];

function compare_hands:
    input r0 as u32.private;
    async compare_hands r0 self.signer into r1;
    output r1 as mental_poker.aleo/compare_hands.future;

finalize compare_hands:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    assert.eq r2.state 29u8;
    and r2.dealer_button 1u8 into r3;
    is.neq r3 0u8 into r4;
    is.eq r2.player1 r1 into r5;
    and r4 r5 into r6;
    and r2.dealer_button 2u8 into r7;
    is.neq r7 0u8 into r8;
    is.eq r2.player2 r1 into r9;
    and r8 r9 into r10;
    or r6 r10 into r11;
    and r2.dealer_button 4u8 into r12;
    is.neq r12 0u8 into r13;
    is.eq r2.player3 r1 into r14;
    and r13 r14 into r15;
    or r11 r15 into r16;
    assert.eq r16 true;
    get revealed_cards[r0] into r17;
    get chips[r0] into r18;
    and r2.players_out 1u8 into r19;
    is.neq r19 0u8 into r20;
    not r20 into r21;
    and r2.players_folded 1u8 into r22;
    is.neq r22 0u8 into r23;
    not r23 into r24;
    and r21 r24 into r25;
    and r2.players_out 2u8 into r26;
    is.neq r26 0u8 into r27;
    not r27 into r28;
    and r2.players_folded 2u8 into r29;
    is.neq r29 0u8 into r30;
    not r30 into r31;
    and r28 r31 into r32;
    and r2.players_out 4u8 into r33;
    is.neq r33 0u8 into r34;
    not r34 into r35;
    and r2.players_folded 4u8 into r36;
    is.neq r36 0u8 into r37;
    not r37 into r38;
    and r35 r38 into r39;
    div r17.flop[0u32] 13u8 into r40;
    rem r17.flop[0u32] 13u8 into r41;
    div r17.flop[1u32] 13u8 into r42;
    rem r17.flop[1u32] 13u8 into r43;
    div r17.flop[2u32] 13u8 into r44;
    rem r17.flop[2u32] 13u8 into r45;
    div r17.turn 13u8 into r46;
    rem r17.turn 13u8 into r47;
    div r17.river 13u8 into r48;
    rem r17.river 13u8 into r49;
    lt r41 r43 into r50;
    ternary r50 r40 r42 into r51;
    ternary r50 r41 r43 into r52;
    ternary r50 r42 r40 into r53;
    ternary r50 r43 r41 into r54;
    lt r54 r45 into r55;
    ternary r55 r53 r44 into r56;
    ternary r55 r54 r45 into r57;
    ternary r55 r44 r53 into r58;
    ternary r55 r45 r54 into r59;
    lt r59 r47 into r60;
    ternary r60 r58 r46 into r61;
    ternary r60 r59 r47 into r62;
    ternary r60 r46 r58 into r63;
    ternary r60 r47 r59 into r64;
    lt r64 r49 into r65;
    ternary r65 r63 r48 into r66;
    ternary r65 r64 r49 into r67;
    ternary r65 r48 r63 into r68;
    ternary r65 r49 r64 into r69;
    lt r52 r57 into r70;
    ternary r70 r51 r56 into r71;
    ternary r70 r52 r57 into r72;
    ternary r70 r56 r51 into r73;
    ternary r70 r57 r52 into r74;
    lt r74 r62 into r75;
    ternary r75 r73 r61 into r76;
    ternary r75 r74 r62 into r77;
    ternary r75 r61 r73 into r78;
    ternary r75 r62 r74 into r79;
    lt r79 r67 into r80;
    ternary r80 r78 r66 into r81;
    ternary r80 r79 r67 into r82;
    ternary r80 r66 r78 into r83;
    ternary r80 r67 r79 into r84;
    lt r84 r69 into r85;
    ternary r85 r83 r68 into r86;
    ternary r85 r84 r69 into r87;
    ternary r85 r68 r83 into r88;
    ternary r85 r69 r84 into r89;
    lt r72 r77 into r90;
    ternary r90 r71 r76 into r91;
    ternary r90 r72 r77 into r92;
    ternary r90 r76 r71 into r93;
    ternary r90 r77 r72 into r94;
    lt r94 r82 into r95;
    ternary r95 r93 r81 into r96;
    ternary r95 r94 r82 into r97;
    ternary r95 r81 r93 into r98;
    ternary r95 r82 r94 into r99;
    lt r99 r87 into r100;
    ternary r100 r98 r86 into r101;
    ternary r100 r99 r87 into r102;
    ternary r100 r86 r98 into r103;
    ternary r100 r87 r99 into r104;
    lt r104 r89 into r105;
    ternary r105 r103 r88 into r106;
    ternary r105 r104 r89 into r107;
    ternary r105 r88 r103 into r108;
    ternary r105 r89 r104 into r109;
    lt r92 r97 into r110;
    ternary r110 r91 r96 into r111;
    ternary r110 r92 r97 into r112;
    ternary r110 r96 r91 into r113;
    ternary r110 r97 r92 into r114;
    lt r114 r102 into r115;
    ternary r115 r113 r101 into r116;
    ternary r115 r114 r102 into r117;
    ternary r115 r101 r113 into r118;
    ternary r115 r102 r114 into r119;
    lt r119 r107 into r120;
    ternary r120 r118 r106 into r121;
    ternary r120 r119 r107 into r122;
    ternary r120 r106 r118 into r123;
    ternary r120 r107 r119 into r124;
    lt r124 r109 into r125;
    ternary r125 r123 r108 into r126;
    ternary r125 r124 r109 into r127;
    ternary r125 r108 r123 into r128;
    ternary r125 r109 r124 into r129;
    ternary r25 r17.player1[0u32] 0u8 into r130;
    ternary r25 r17.player1[1u32] 0u8 into r131;
    div r130 13u8 into r132;
    rem r130 13u8 into r133;
    div r131 13u8 into r134;
    rem r131 13u8 into r135;
    lt r133 r112 into r136;
    lt r133 r117 into r137;
    lt r133 r122 into r138;
    lt r133 r127 into r139;
    lt r133 r129 into r140;
    ternary r136 r132 r111 into r141;
    ternary r136 r133 r112 into r142;
    ternary r137 r132 r116 into r143;
    ternary r137 r133 r117 into r144;
    ternary r136 r111 r143 into r145;
    ternary r136 r112 r144 into r146;
    ternary r138 r132 r121 into r147;
    ternary r138 r133 r122 into r148;
    ternary r137 r116 r147 into r149;
    ternary r137 r117 r148 into r150;
    ternary r139 r132 r126 into r151;
    ternary r139 r133 r127 into r152;
    ternary r138 r121 r151 into r153;
    ternary r138 r122 r152 into r154;
    ternary r140 r132 r128 into r155;
    ternary r140 r133 r129 into r156;
    ternary r139 r126 r155 into r157;
    ternary r139 r127 r156 into r158;
    ternary r140 r128 r132 into r159;
    ternary r140 r129 r133 into r160;
    lt r135 r142 into r161;
    lt r135 r146 into r162;
    lt r135 r150 into r163;
    lt r135 r154 into r164;
    lt r135 r158 into r165;
    lt r135 r160 into r166;
    ternary r161 r134 r141 into r167;
    ternary r161 r135 r142 into r168;
    ternary r162 r134 r145 into r169;
    ternary r162 r135 r146 into r170;
    ternary r161 r141 r169 into r171;
    ternary r161 r142 r170 into r172;
    ternary r163 r134 r149 into r173;
    ternary r163 r135 r150 into r174;
    ternary r162 r145 r173 into r175;
    ternary r162 r146 r174 into r176;
    ternary r164 r134 r153 into r177;
    ternary r164 r135 r154 into r178;
    ternary r163 r149 r177 into r179;
    ternary r163 r150 r178 into r180;
    ternary r165 r134 r157 into r181;
    ternary r165 r135 r158 into r182;
    ternary r164 r153 r181 into r183;
    ternary r164 r154 r182 into r184;
    ternary r166 r134 r159 into r185;
    ternary r166 r135 r160 into r186;
    ternary r165 r157 r185 into r187;
    ternary r165 r158 r186 into r188;
    ternary r166 r159 r134 into r189;
    ternary r166 r160 r135 into r190;
    ternary r32 r17.player2[0u32] 0u8 into r191;
    ternary r32 r17.player2[1u32] 0u8 into r192;
    div r191 13u8 into r193;
    rem r191 13u8 into r194;
    div r192 13u8 into r195;
    rem r192 13u8 into r196;
    lt r194 r112 into r197;
    lt r194 r117 into r198;
    lt r194 r122 into r199;
    lt r194 r127 into r200;
    lt r194 r129 into r201;
    ternary r197 r193 r111 into r202;
    ternary r197 r194 r112 into r203;
    ternary r198 r193 r116 into r204;
    ternary r198 r194 r117 into r205;
    ternary r197 r111 r204 into r206;
    ternary r197 r112 r205 into r207;
    ternary r199 r193 r121 into r208;
    ternary r199 r194 r122 into r209;
    ternary r198 r116 r208 into r210;
    ternary r198 r117 r209 into r211;
    ternary r200 r193 r126 into r212;
    ternary r200 r194 r127 into r213;
    ternary r199 r121 r212 into r214;
    ternary r199 r122 r213 into r215;
    ternary r201 r193 r128 into r216;
    ternary r201 r194 r129 into r217;
    ternary r200 r126 r216 into r218;
    ternary r200 r127 r217 into r219;
    ternary r201 r128 r193 into r220;
    ternary r201 r129 r194 into r221;
    lt r196 r203 into r222;
    lt r196 r207 into r223;
    lt r196 r211 into r224;
    lt r196 r215 into r225;
    lt r196 r219 into r226;
    lt r196 r221 into r227;
    ternary r222 r195 r202 into r228;
    ternary r222 r196 r203 into r229;
    ternary r223 r195 r206 into r230;
    ternary r223 r196 r207 into r231;
    ternary r222 r202 r230 into r232;
    ternary r222 r203 r231 into r233;
    ternary r224 r195 r210 into r234;
    ternary r224 r196 r211 into r235;
    ternary r223 r206 r234 into r236;
    ternary r223 r207 r235 into r237;
    ternary r225 r195 r214 into r238;
    ternary r225 r196 r215 into r239;
    ternary r224 r210 r238 into r240;
    ternary r224 r211 r239 into r241;
    ternary r226 r195 r218 into r242;
    ternary r226 r196 r219 into r243;
    ternary r225 r214 r242 into r244;
    ternary r225 r215 r243 into r245;
    ternary r227 r195 r220 into r246;
    ternary r227 r196 r221 into r247;
    ternary r226 r218 r246 into r248;
    ternary r226 r219 r247 into r249;
    ternary r227 r220 r195 into r250;
    ternary r227 r221 r196 into r251;
    ternary r39 r17.player3[0u32] 0u8 into r252;
    ternary r39 r17.player3[1u32] 0u8 into r253;
    div r252 13u8 into r254;
    rem r252 13u8 into r255;
    div r253 13u8 into r256;
    rem r253 13u8 into r257;
    lt r255 r112 into r258;
    lt r255 r117 into r259;
    lt r255 r122 into r260;
    lt r255 r127 into r261;
    lt r255 r129 into r262;
    ternary r258 r254 r111 into r263;
    ternary r258 r255 r112 into r264;
    ternary r259 r254 r116 into r265;
    ternary r259 r255 r117 into r266;
    ternary r258 r111 r265 into r267;
    ternary r258 r112 r266 into r268;
    ternary r260 r254 r121 into r269;
    ternary r260 r255 r122 into r270;
    ternary r259 r116 r269 into r271;
    ternary r259 r117 r270 into r272;
    ternary r261 r254 r126 into r273;
    ternary r261 r255 r127 into r274;
    ternary r260 r121 r273 into r275;
    ternary r260 r122 r274 into r276;
    ternary r262 r254 r128 into r277;
    ternary r262 r255 r129 into r278;
    ternary r261 r126 r277 into r279;
    ternary r261 r127 r278 into r280;
    ternary r262 r128 r254 into r281;
    ternary r262 r129 r255 into r282;
    lt r257 r264 into r283;
    lt r257 r268 into r284;
    lt r257 r272 into r285;
    lt r257 r276 into r286;
    lt r257 r280 into r287;
    lt r257 r282 into r288;
    ternary r283 r256 r263 into r289;
    ternary r283 r257 r264 into r290;
    ternary r284 r256 r267 into r291;
    ternary r284 r257 r268 into r292;
    ternary r283 r263 r291 into r293;
    ternary r283 r264 r292 into r294;
    ternary r285 r256 r271 into r295;
    ternary r285 r257 r272 into r296;
    ternary r284 r267 r295 into r297;
    ternary r284 r268 r296 into r298;
    ternary r286 r256 r275 into r299;
    ternary r286 r257 r276 into r300;
    ternary r285 r271 r299 into r301;
    ternary r285 r272 r300 into r302;
    ternary r287 r256 r279 into r303;
    ternary r287 r257 r280 into r304;
    ternary r286 r275 r303 into r305;
    ternary r286 r276 r304 into r306;
    ternary r288 r256 r281 into r307;
    ternary r288 r257 r282 into r308;
    ternary r287 r279 r307 into r309;
    ternary r287 r280 r308 into r310;
    ternary r288 r281 r256 into r311;
    ternary r288 r282 r257 into r312;
    add r168 1u8 into r313;
    add r172 1u8 into r314;
    add r176 1u8 into r315;
    add r180 1u8 into r316;
    add r184 1u8 into r317;
    add r188 1u8 into r318;
    is.eq r315 r180 into r319;
    is.eq r316 r184 into r320;
    and r319 r320 into r321;
    is.eq r317 r188 into r322;
    and r321 r322 into r323;
    is.eq r318 r190 into r324;
    and r323 r324 into r325;
    is.eq r314 r176 into r326;
    and r326 r319 into r327;
    and r327 r320 into r328;
    and r328 r322 into r329;
    is.eq r313 r172 into r330;
    and r330 r326 into r331;
    and r331 r319 into r332;
    and r332 r320 into r333;
    is.eq r168 0u8 into r334;
    is.eq r172 1u8 into r335;
    and r334 r335 into r336;
    is.eq r176 2u8 into r337;
    and r336 r337 into r338;
    is.eq r180 3u8 into r339;
    and r338 r339 into r340;
    is.eq r184 12u8 into r341;
    is.eq r188 12u8 into r342;
    or r341 r342 into r343;
    is.eq r190 12u8 into r344;
    or r343 r344 into r345;
    and r340 r345 into r346;
    is.eq r167 r171 into r347;
    is.eq r171 r175 into r348;
    is.eq r175 r179 into r349;
    is.eq r179 r183 into r350;
    is.eq r183 r187 into r351;
    is.eq r187 r189 into r352;
    and r325 r349 into r353;
    and r353 r350 into r354;
    and r354 r351 into r355;
    and r355 r352 into r356;
    and r329 r348 into r357;
    and r357 r349 into r358;
    and r358 r350 into r359;
    and r359 r351 into r360;
    and r333 r347 into r361;
    and r361 r348 into r362;
    and r362 r349 into r363;
    and r363 r350 into r364;
    and r347 r348 into r365;
    and r365 r349 into r366;
    is.eq r183 r167 into r367;
    and r341 r367 into r368;
    is.eq r187 r167 into r369;
    and r342 r369 into r370;
    or r368 r370 into r371;
    is.eq r189 r167 into r372;
    and r344 r372 into r373;
    or r371 r373 into r374;
    and r346 r366 into r375;
    and r375 r374 into r376;
    or r356 r360 into r377;
    or r377 r364 into r378;
    or r378 r376 into r379;
    ternary r364 r184 3u8 into r380;
    ternary r360 r188 r380 into r381;
    ternary r356 r190 r381 into r382;
    is.eq r168 r172 into r383;
    is.eq r172 r176 into r384;
    is.eq r176 r180 into r385;
    is.eq r180 r184 into r386;
    is.eq r184 r188 into r387;
    is.eq r188 r190 into r388;
    and r383 r384 into r389;
    and r389 r385 into r390;
    and r384 r385 into r391;
    and r391 r386 into r392;
    and r385 r386 into r393;
    and r393 r387 into r394;
    and r386 r387 into r395;
    and r395 r388 into r396;
    or r390 r392 into r397;
    or r397 r394 into r398;
    or r398 r396 into r399;
    ternary r392 r184 r180 into r400;
    ternary r394 r188 r400 into r401;
    ternary r396 r190 r401 into r402;
    ternary r396 r176 r190 into r403;
    and r387 r388 into r404;
    or r389 r391 into r405;
    or r405 r393 into r406;
    or r406 r395 into r407;
    or r407 r404 into r408;
    ternary r391 r180 r176 into r409;
    ternary r393 r184 r409 into r410;
    ternary r395 r188 r410 into r411;
    ternary r404 r190 r411 into r412;
    not r389 into r413;
    and r383 r413 into r414;
    and r384 r413 into r415;
    not r391 into r416;
    and r415 r416 into r417;
    and r385 r416 into r418;
    not r393 into r419;
    and r418 r419 into r420;
    and r386 r419 into r421;
    not r395 into r422;
    and r421 r422 into r423;
    and r387 r422 into r424;
    not r404 into r425;
    and r424 r425 into r426;
    and r388 r425 into r427;
    or r414 r417 into r428;
    or r428 r420 into r429;
    or r429 r423 into r430;
    or r430 r426 into r431;
    or r431 r427 into r432;
    ternary r417 r176 r172 into r433;
    ternary r420 r180 r433 into r434;
    ternary r423 r184 r434 into r435;
    ternary r426 r188 r435 into r436;
    ternary r427 r190 r436 into r437;
    and r408 r432 into r438;
    not r432 into r439;
    and r408 r439 into r440;
    not r408 into r441;
    and r432 r441 into r442;
    is.eq r167 0u8 into r443;
    cast r443 into r444 as u8;
    is.eq r171 0u8 into r445;
    cast r445 into r446 as u8;
    add r444 r446 into r447;
    is.eq r175 0u8 into r448;
    cast r448 into r449 as u8;
    add r447 r449 into r450;
    is.eq r179 0u8 into r451;
    cast r451 into r452 as u8;
    add r450 r452 into r453;
    is.eq r183 0u8 into r454;
    cast r454 into r455 as u8;
    add r453 r455 into r456;
    is.eq r187 0u8 into r457;
    cast r457 into r458 as u8;
    add r456 r458 into r459;
    is.eq r189 0u8 into r460;
    cast r460 into r461 as u8;
    add r459 r461 into r462;
    gte r462 5u8 into r463;
    is.eq r167 1u8 into r464;
    cast r464 into r465 as u8;
    is.eq r171 1u8 into r466;
    cast r466 into r467 as u8;
    add r465 r467 into r468;
    is.eq r175 1u8 into r469;
    cast r469 into r470 as u8;
    add r468 r470 into r471;
    is.eq r179 1u8 into r472;
    cast r472 into r473 as u8;
    add r471 r473 into r474;
    is.eq r183 1u8 into r475;
    cast r475 into r476 as u8;
    add r474 r476 into r477;
    is.eq r187 1u8 into r478;
    cast r478 into r479 as u8;
    add r477 r479 into r480;
    is.eq r189 1u8 into r481;
    cast r481 into r482 as u8;
    add r480 r482 into r483;
    gte r483 5u8 into r484;
    is.eq r167 2u8 into r485;
    cast r485 into r486 as u8;
    is.eq r171 2u8 into r487;
    cast r487 into r488 as u8;
    add r486 r488 into r489;
    is.eq r175 2u8 into r490;
    cast r490 into r491 as u8;
    add r489 r491 into r492;
    is.eq r179 2u8 into r493;
    cast r493 into r494 as u8;
    add r492 r494 into r495;
    is.eq r183 2u8 into r496;
    cast r496 into r497 as u8;
    add r495 r497 into r498;
    is.eq r187 2u8 into r499;
    cast r499 into r500 as u8;
    add r498 r500 into r501;
    is.eq r189 2u8 into r502;
    cast r502 into r503 as u8;
    add r501 r503 into r504;
    gte r504 5u8 into r505;
    is.eq r167 3u8 into r506;
    cast r506 into r507 as u8;
    is.eq r171 3u8 into r508;
    cast r508 into r509 as u8;
    add r507 r509 into r510;
    is.eq r175 3u8 into r511;
    cast r511 into r512 as u8;
    add r510 r512 into r513;
    is.eq r179 3u8 into r514;
    cast r514 into r515 as u8;
    add r513 r515 into r516;
    is.eq r183 3u8 into r517;
    cast r517 into r518 as u8;
    add r516 r518 into r519;
    is.eq r187 3u8 into r520;
    cast r520 into r521 as u8;
    add r519 r521 into r522;
    is.eq r189 3u8 into r523;
    cast r523 into r524 as u8;
    add r522 r524 into r525;
    gte r525 5u8 into r526;
    or r463 r484 into r527;
    or r527 r505 into r528;
    or r528 r526 into r529;
    ternary r484 1u8 0u8 into r530;
    ternary r505 2u8 r530 into r531;
    ternary r526 3u8 r531 into r532;
    is.eq r189 r532 into r533;
    cast r533 into r534 as u8;
    is.eq r187 r532 into r535;
    cast r535 into r536 as u8;
    is.eq r183 r532 into r537;
    cast r537 into r538 as u8;
    is.eq r179 r532 into r539;
    cast r539 into r540 as u8;
    is.eq r175 r532 into r541;
    cast r541 into r542 as u8;
    is.eq r171 r532 into r543;
    cast r543 into r544 as u8;
    is.eq r167 r532 into r545;
    cast r545 into r546 as u8;
    add r534 r536 into r547;
    add r547 r538 into r548;
    add r548 r540 into r549;
    add r549 r542 into r550;
    add r550 r544 into r551;
    is.eq r534 1u8 into r552;
    is.eq r547 1u8 into r553;
    is.eq r548 1u8 into r554;
    is.eq r549 1u8 into r555;
    is.eq r550 1u8 into r556;
    is.eq r551 1u8 into r557;
    is.eq r534 2u8 into r558;
    is.eq r547 2u8 into r559;
    is.eq r548 2u8 into r560;
    is.eq r549 2u8 into r561;
    is.eq r550 2u8 into r562;
    is.eq r551 2u8 into r563;
    is.eq r534 3u8 into r564;
    is.eq r547 3u8 into r565;
    is.eq r548 3u8 into r566;
    is.eq r549 3u8 into r567;
    is.eq r550 3u8 into r568;
    is.eq r551 3u8 into r569;
    is.eq r534 4u8 into r570;
    is.eq r547 4u8 into r571;
    is.eq r548 4u8 into r572;
    is.eq r549 4u8 into r573;
    is.eq r550 4u8 into r574;
    is.eq r551 4u8 into r575;
    is.eq r534 5u8 into r576;
    is.eq r547 5u8 into r577;
    is.eq r548 5u8 into r578;
    is.eq r549 5u8 into r579;
    is.eq r550 5u8 into r580;
    is.eq r551 5u8 into r581;
    ternary r557 r172 r168 into r582;
    ternary r556 r176 r582 into r583;
    ternary r555 r180 r583 into r584;
    ternary r554 r184 r584 into r585;
    ternary r553 r188 r585 into r586;
    ternary r552 r190 r586 into r587;
    ternary r563 r172 r168 into r588;
    ternary r562 r176 r588 into r589;
    ternary r561 r180 r589 into r590;
    ternary r560 r184 r590 into r591;
    ternary r559 r188 r591 into r592;
    ternary r558 r190 r592 into r593;
    ternary r569 r172 r168 into r594;
    ternary r568 r176 r594 into r595;
    ternary r567 r180 r595 into r596;
    ternary r566 r184 r596 into r597;
    ternary r565 r188 r597 into r598;
    ternary r564 r190 r598 into r599;
    ternary r575 r172 r168 into r600;
    ternary r574 r176 r600 into r601;
    ternary r573 r180 r601 into r602;
    ternary r572 r184 r602 into r603;
    ternary r571 r188 r603 into r604;
    ternary r570 r190 r604 into r605;
    ternary r581 r172 r168 into r606;
    ternary r580 r176 r606 into r607;
    ternary r579 r180 r607 into r608;
    ternary r578 r184 r608 into r609;
    ternary r577 r188 r609 into r610;
    ternary r576 r190 r610 into r611;
    or r325 r329 into r612;
    or r612 r333 into r613;
    or r613 r346 into r614;
    ternary r333 r184 3u8 into r615;
    ternary r329 r188 r615 into r616;
    ternary r325 r190 r616 into r617;
    cast r414 into r618 as u8;
    cast r417 into r619 as u8;
    add r618 r619 into r620;
    cast r420 into r621 as u8;
    add r620 r621 into r622;
    cast r423 into r623 as u8;
    add r622 r623 into r624;
    cast r426 into r625 as u8;
    add r624 r625 into r626;
    cast r427 into r627 as u8;
    add r626 r627 into r628;
    gte r628 2u8 into r629;
    not r427 into r630;
    not r426 into r631;
    not r423 into r632;
    and r426 r630 into r633;
    and r423 r631 into r634;
    and r634 r630 into r635;
    ternary r635 r184 r434 into r636;
    ternary r633 r188 r636 into r637;
    not r420 into r638;
    not r417 into r639;
    ternary r639 r176 r172 into r640;
    ternary r638 r180 r640 into r641;
    ternary r632 r184 r641 into r642;
    ternary r631 r188 r642 into r643;
    ternary r630 r190 r643 into r644;
    ternary r404 r180 r190 into r645;
    ternary r395 r176 r188 into r646;
    ternary r404 r176 r646 into r647;
    ternary r427 r184 r190 into r648;
    ternary r426 r180 r188 into r649;
    ternary r427 r180 r649 into r650;
    ternary r423 r176 r184 into r651;
    ternary r426 r176 r651 into r652;
    ternary r427 r176 r652 into r653;
    cast r382 into r654 as u32;
    or 2415919104u32 r654 into r655;
    cast r402 into r656 as u32;
    shl r656 4u8 into r657;
    or 2147483648u32 r657 into r658;
    cast r403 into r659 as u32;
    or r658 r659 into r660;
    cast r412 into r661 as u32;
    shl r661 4u8 into r662;
    or 1879048192u32 r662 into r663;
    cast r437 into r664 as u32;
    or r663 r664 into r665;
    cast r587 into r666 as u32;
    shl r666 16u8 into r667;
    or 1610612736u32 r667 into r668;
    cast r593 into r669 as u32;
    shl r669 12u8 into r670;
    or r668 r670 into r671;
    cast r599 into r672 as u32;
    shl r672 8u8 into r673;
    or r671 r673 into r674;
    cast r605 into r675 as u32;
    shl r675 4u8 into r676;
    or r674 r676 into r677;
    cast r611 into r678 as u32;
    or r677 r678 into r679;
    cast r617 into r680 as u32;
    or 1342177280u32 r680 into r681;
    cast r412 into r682 as u32;
    shl r682 8u8 into r683;
    or 1073741824u32 r683 into r684;
    cast r645 into r685 as u32;
    shl r685 4u8 into r686;
    or r684 r686 into r687;
    cast r647 into r688 as u32;
    or r687 r688 into r689;
    cast r437 into r690 as u32;
    shl r690 8u8 into r691;
    or 805306368u32 r691 into r692;
    cast r637 into r693 as u32;
    shl r693 4u8 into r694;
    or r692 r694 into r695;
    cast r644 into r696 as u32;
    or r695 r696 into r697;
    cast r437 into r698 as u32;
    shl r698 12u8 into r699;
    or 536870912u32 r699 into r700;
    cast r648 into r701 as u32;
    shl r701 8u8 into r702;
    or r700 r702 into r703;
    cast r650 into r704 as u32;
    shl r704 4u8 into r705;
    or r703 r705 into r706;
    cast r653 into r707 as u32;
    or r706 r707 into r708;
    cast r190 into r709 as u32;
    shl r709 16u8 into r710;
    or 268435456u32 r710 into r711;
    cast r188 into r712 as u32;
    shl r712 12u8 into r713;
    or r711 r713 into r714;
    cast r184 into r715 as u32;
    shl r715 8u8 into r716;
    or r714 r716 into r717;
    cast r180 into r718 as u32;
    shl r718 4u8 into r719;
    or r717 r719 into r720;
    cast r176 into r721 as u32;
    or r720 r721 into r722;
    ternary r442 r708 r722 into r723;
    ternary r629 r697 r723 into r724;
    ternary r440 r689 r724 into r725;
    ternary r614 r681 r725 into r726;
    ternary r529 r679 r726 into r727;
    ternary r438 r665 r727 into r728;
    ternary r399 r660 r728 into r729;
    ternary r379 r655 r729 into r730;
    add r229 1u8 into r731;
    add r233 1u8 into r732;
    add r237 1u8 into r733;
    add r241 1u8 into r734;
    add r245 1u8 into r735;
    add r249 1u8 into r736;
    is.eq r733 r241 into r737;
    is.eq r734 r245 into r738;
    and r737 r738 into r739;
    is.eq r735 r249 into r740;
    and r739 r740 into r741;
    is.eq r736 r251 into r742;
    and r741 r742 into r743;
    is.eq r732 r237 into r744;
    and r744 r737 into r745;
    and r745 r738 into r746;
    and r746 r740 into r747;
    is.eq r731 r233 into r748;
    and r748 r744 into r749;
    and r749 r737 into r750;
    and r750 r738 into r751;
    is.eq r229 0u8 into r752;
    is.eq r233 1u8 into r753;
    and r752 r753 into r754;
    is.eq r237 2u8 into r755;
    and r754 r755 into r756;
    is.eq r241 3u8 into r757;
    and r756 r757 into r758;
    is.eq r245 12u8 into r759;
    is.eq r249 12u8 into r760;
    or r759 r760 into r761;
    is.eq r251 12u8 into r762;
    or r761 r762 into r763;
    and r758 r763 into r764;
    is.eq r228 r232 into r765;
    is.eq r232 r236 into r766;
    is.eq r236 r240 into r767;
    is.eq r240 r244 into r768;
    is.eq r244 r248 into r769;
    is.eq r248 r250 into r770;
    and r743 r767 into r771;
    and r771 r768 into r772;
    and r772 r769 into r773;
    and r773 r770 into r774;
    and r747 r766 into r775;
    and r775 r767 into r776;
    and r776 r768 into r777;
    and r777 r769 into r778;
    and r751 r765 into r779;
    and r779 r766 into r780;
    and r780 r767 into r781;
    and r781 r768 into r782;
    and r765 r766 into r783;
    and r783 r767 into r784;
    is.eq r244 r228 into r785;
    and r759 r785 into r786;
    is.eq r248 r228 into r787;
    and r760 r787 into r788;
    or r786 r788 into r789;
    is.eq r250 r228 into r790;
    and r762 r790 into r791;
    or r789 r791 into r792;
    and r764 r784 into r793;
    and r793 r792 into r794;
    or r774 r778 into r795;
    or r795 r782 into r796;
    or r796 r794 into r797;
    ternary r782 r245 3u8 into r798;
    ternary r778 r249 r798 into r799;
    ternary r774 r251 r799 into r800;
    is.eq r229 r233 into r801;
    is.eq r233 r237 into r802;
    is.eq r237 r241 into r803;
    is.eq r241 r245 into r804;
    is.eq r245 r249 into r805;
    is.eq r249 r251 into r806;
    and r801 r802 into r807;
    and r807 r803 into r808;
    and r802 r803 into r809;
    and r809 r804 into r810;
    and r803 r804 into r811;
    and r811 r805 into r812;
    and r804 r805 into r813;
    and r813 r806 into r814;
    or r808 r810 into r815;
    or r815 r812 into r816;
    or r816 r814 into r817;
    ternary r810 r245 r241 into r818;
    ternary r812 r249 r818 into r819;
    ternary r814 r251 r819 into r820;
    ternary r814 r237 r251 into r821;
    and r805 r806 into r822;
    or r807 r809 into r823;
    or r823 r811 into r824;
    or r824 r813 into r825;
    or r825 r822 into r826;
    ternary r809 r241 r237 into r827;
    ternary r811 r245 r827 into r828;
    ternary r813 r249 r828 into r829;
    ternary r822 r251 r829 into r830;
    not r807 into r831;
    and r801 r831 into r832;
    and r802 r831 into r833;
    not r809 into r834;
    and r833 r834 into r835;
    and r803 r834 into r836;
    not r811 into r837;
    and r836 r837 into r838;
    and r804 r837 into r839;
    not r813 into r840;
    and r839 r840 into r841;
    and r805 r840 into r842;
    not r822 into r843;
    and r842 r843 into r844;
    and r806 r843 into r845;
    or r832 r835 into r846;
    or r846 r838 into r847;
    or r847 r841 into r848;
    or r848 r844 into r849;
    or r849 r845 into r850;
    ternary r835 r237 r233 into r851;
    ternary r838 r241 r851 into r852;
    ternary r841 r245 r852 into r853;
    ternary r844 r249 r853 into r854;
    ternary r845 r251 r854 into r855;
    and r826 r850 into r856;
    not r850 into r857;
    and r826 r857 into r858;
    not r826 into r859;
    and r850 r859 into r860;
    is.eq r228 0u8 into r861;
    cast r861 into r862 as u8;
    is.eq r232 0u8 into r863;
    cast r863 into r864 as u8;
    add r862 r864 into r865;
    is.eq r236 0u8 into r866;
    cast r866 into r867 as u8;
    add r865 r867 into r868;
    is.eq r240 0u8 into r869;
    cast r869 into r870 as u8;
    add r868 r870 into r871;
    is.eq r244 0u8 into r872;
    cast r872 into r873 as u8;
    add r871 r873 into r874;
    is.eq r248 0u8 into r875;
    cast r875 into r876 as u8;
    add r874 r876 into r877;
    is.eq r250 0u8 into r878;
    cast r878 into r879 as u8;
    add r877 r879 into r880;
    gte r880 5u8 into r881;
    is.eq r228 1u8 into r882;
    cast r882 into r883 as u8;
    is.eq r232 1u8 into r884;
    cast r884 into r885 as u8;
    add r883 r885 into r886;
    is.eq r236 1u8 into r887;
    cast r887 into r888 as u8;
    add r886 r888 into r889;
    is.eq r240 1u8 into r890;
    cast r890 into r891 as u8;
    add r889 r891 into r892;
    is.eq r244 1u8 into r893;
    cast r893 into r894 as u8;
    add r892 r894 into r895;
    is.eq r248 1u8 into r896;
    cast r896 into r897 as u8;
    add r895 r897 into r898;
    is.eq r250 1u8 into r899;
    cast r899 into r900 as u8;
    add r898 r900 into r901;
    gte r901 5u8 into r902;
    is.eq r228 2u8 into r903;
    cast r903 into r904 as u8;
    is.eq r232 2u8 into r905;
    cast r905 into r906 as u8;
    add r904 r906 into r907;
    is.eq r236 2u8 into r908;
    cast r908 into r909 as u8;
    add r907 r909 into r910;
    is.eq r240 2u8 into r911;
    cast r911 into r912 as u8;
    add r910 r912 into r913;
    is.eq r244 2u8 into r914;
    cast r914 into r915 as u8;
    add r913 r915 into r916;
    is.eq r248 2u8 into r917;
    cast r917 into r918 as u8;
    add r916 r918 into r919;
    is.eq r250 2u8 into r920;
    cast r920 into r921 as u8;
    add r919 r921 into r922;
    gte r922 5u8 into r923;
    is.eq r228 3u8 into r924;
    cast r924 into r925 as u8;
    is.eq r232 3u8 into r926;
    cast r926 into r927 as u8;
    add r925 r927 into r928;
    is.eq r236 3u8 into r929;
    cast r929 into r930 as u8;
    add r928 r930 into r931;
    is.eq r240 3u8 into r932;
    cast r932 into r933 as u8;
    add r931 r933 into r934;
    is.eq r244 3u8 into r935;
    cast r935 into r936 as u8;
    add r934 r936 into r937;
    is.eq r248 3u8 into r938;
    cast r938 into r939 as u8;
    add r937 r939 into r940;
    is.eq r250 3u8 into r941;
    cast r941 into r942 as u8;
    add r940 r942 into r943;
    gte r943 5u8 into r944;
    or r881 r902 into r945;
    or r945 r923 into r946;
    or r946 r944 into r947;
    ternary r902 1u8 0u8 into r948;
    ternary r923 2u8 r948 into r949;
    ternary r944 3u8 r949 into r950;
    is.eq r250 r950 into r951;
    cast r951 into r952 as u8;
    is.eq r248 r950 into r953;
    cast r953 into r954 as u8;
    is.eq r244 r950 into r955;
    cast r955 into r956 as u8;
    is.eq r240 r950 into r957;
    cast r957 into r958 as u8;
    is.eq r236 r950 into r959;
    cast r959 into r960 as u8;
    is.eq r232 r950 into r961;
    cast r961 into r962 as u8;
    is.eq r228 r950 into r963;
    cast r963 into r964 as u8;
    add r952 r954 into r965;
    add r965 r956 into r966;
    add r966 r958 into r967;
    add r967 r960 into r968;
    add r968 r962 into r969;
    is.eq r952 1u8 into r970;
    is.eq r965 1u8 into r971;
    is.eq r966 1u8 into r972;
    is.eq r967 1u8 into r973;
    is.eq r968 1u8 into r974;
    is.eq r969 1u8 into r975;
    is.eq r952 2u8 into r976;
    is.eq r965 2u8 into r977;
    is.eq r966 2u8 into r978;
    is.eq r967 2u8 into r979;
    is.eq r968 2u8 into r980;
    is.eq r969 2u8 into r981;
    is.eq r952 3u8 into r982;
    is.eq r965 3u8 into r983;
    is.eq r966 3u8 into r984;
    is.eq r967 3u8 into r985;
    is.eq r968 3u8 into r986;
    is.eq r969 3u8 into r987;
    is.eq r952 4u8 into r988;
    is.eq r965 4u8 into r989;
    is.eq r966 4u8 into r990;
    is.eq r967 4u8 into r991;
    is.eq r968 4u8 into r992;
    is.eq r969 4u8 into r993;
    is.eq r952 5u8 into r994;
    is.eq r965 5u8 into r995;
    is.eq r966 5u8 into r996;
    is.eq r967 5u8 into r997;
    is.eq r968 5u8 into r998;
    is.eq r969 5u8 into r999;
    ternary r975 r233 r229 into r1000;
    ternary r974 r237 r1000 into r1001;
    ternary r973 r241 r1001 into r1002;
    ternary r972 r245 r1002 into r1003;
    ternary r971 r249 r1003 into r1004;
    ternary r970 r251 r1004 into r1005;
    ternary r981 r233 r229 into r1006;
    ternary r980 r237 r1006 into r1007;
    ternary r979 r241 r1007 into r1008;
    ternary r978 r245 r1008 into r1009;
    ternary r977 r249 r1009 into r1010;
    ternary r976 r251 r1010 into r1011;
    ternary r987 r233 r229 into r1012;
    ternary r986 r237 r1012 into r1013;
    ternary r985 r241 r1013 into r1014;
    ternary r984 r245 r1014 into r1015;
    ternary r983 r249 r1015 into r1016;
    ternary r982 r251 r1016 into r1017;
    ternary r993 r233 r229 into r1018;
    ternary r992 r237 r1018 into r1019;
    ternary r991 r241 r1019 into r1020;
    ternary r990 r245 r1020 into r1021;
    ternary r989 r249 r1021 into r1022;
    ternary r988 r251 r1022 into r1023;
    ternary r999 r233 r229 into r1024;
    ternary r998 r237 r1024 into r1025;
    ternary r997 r241 r1025 into r1026;
    ternary r996 r245 r1026 into r1027;
    ternary r995 r249 r1027 into r1028;
    ternary r994 r251 r1028 into r1029;
    or r743 r747 into r1030;
    or r1030 r751 into r1031;
    or r1031 r764 into r1032;
    ternary r751 r245 3u8 into r1033;
    ternary r747 r249 r1033 into r1034;
    ternary r743 r251 r1034 into r1035;
    cast r832 into r1036 as u8;
    cast r835 into r1037 as u8;
    add r1036 r1037 into r1038;
    cast r838 into r1039 as u8;
    add r1038 r1039 into r1040;
    cast r841 into r1041 as u8;
    add r1040 r1041 into r1042;
    cast r844 into r1043 as u8;
    add r1042 r1043 into r1044;
    cast r845 into r1045 as u8;
    add r1044 r1045 into r1046;
    gte r1046 2u8 into r1047;
    not r845 into r1048;
    not r844 into r1049;
    not r841 into r1050;
    and r844 r1048 into r1051;
    and r841 r1049 into r1052;
    and r1052 r1048 into r1053;
    ternary r1053 r245 r852 into r1054;
    ternary r1051 r249 r1054 into r1055;
    not r838 into r1056;
    not r835 into r1057;
    ternary r1057 r237 r233 into r1058;
    ternary r1056 r241 r1058 into r1059;
    ternary r1050 r245 r1059 into r1060;
    ternary r1049 r249 r1060 into r1061;
    ternary r1048 r251 r1061 into r1062;
    ternary r822 r241 r251 into r1063;
    ternary r813 r237 r249 into r1064;
    ternary r822 r237 r1064 into r1065;
    ternary r845 r245 r251 into r1066;
    ternary r844 r241 r249 into r1067;
    ternary r845 r241 r1067 into r1068;
    ternary r841 r237 r245 into r1069;
    ternary r844 r237 r1069 into r1070;
    ternary r845 r237 r1070 into r1071;
    cast r800 into r1072 as u32;
    or 2415919104u32 r1072 into r1073;
    cast r820 into r1074 as u32;
    shl r1074 4u8 into r1075;
    or 2147483648u32 r1075 into r1076;
    cast r821 into r1077 as u32;
    or r1076 r1077 into r1078;
    cast r830 into r1079 as u32;
    shl r1079 4u8 into r1080;
    or 1879048192u32 r1080 into r1081;
    cast r855 into r1082 as u32;
    or r1081 r1082 into r1083;
    cast r1005 into r1084 as u32;
    shl r1084 16u8 into r1085;
    or 1610612736u32 r1085 into r1086;
    cast r1011 into r1087 as u32;
    shl r1087 12u8 into r1088;
    or r1086 r1088 into r1089;
    cast r1017 into r1090 as u32;
    shl r1090 8u8 into r1091;
    or r1089 r1091 into r1092;
    cast r1023 into r1093 as u32;
    shl r1093 4u8 into r1094;
    or r1092 r1094 into r1095;
    cast r1029 into r1096 as u32;
    or r1095 r1096 into r1097;
    cast r1035 into r1098 as u32;
    or 1342177280u32 r1098 into r1099;
    cast r830 into r1100 as u32;
    shl r1100 8u8 into r1101;
    or 1073741824u32 r1101 into r1102;
    cast r1063 into r1103 as u32;
    shl r1103 4u8 into r1104;
    or r1102 r1104 into r1105;
    cast r1065 into r1106 as u32;
    or r1105 r1106 into r1107;
    cast r855 into r1108 as u32;
    shl r1108 8u8 into r1109;
    or 805306368u32 r1109 into r1110;
    cast r1055 into r1111 as u32;
    shl r1111 4u8 into r1112;
    or r1110 r1112 into r1113;
    cast r1062 into r1114 as u32;
    or r1113 r1114 into r1115;
    cast r855 into r1116 as u32;
    shl r1116 12u8 into r1117;
    or 536870912u32 r1117 into r1118;
    cast r1066 into r1119 as u32;
    shl r1119 8u8 into r1120;
    or r1118 r1120 into r1121;
    cast r1068 into r1122 as u32;
    shl r1122 4u8 into r1123;
    or r1121 r1123 into r1124;
    cast r1071 into r1125 as u32;
    or r1124 r1125 into r1126;
    cast r251 into r1127 as u32;
    shl r1127 16u8 into r1128;
    or 268435456u32 r1128 into r1129;
    cast r249 into r1130 as u32;
    shl r1130 12u8 into r1131;
    or r1129 r1131 into r1132;
    cast r245 into r1133 as u32;
    shl r1133 8u8 into r1134;
    or r1132 r1134 into r1135;
    cast r241 into r1136 as u32;
    shl r1136 4u8 into r1137;
    or r1135 r1137 into r1138;
    cast r237 into r1139 as u32;
    or r1138 r1139 into r1140;
    ternary r860 r1126 r1140 into r1141;
    ternary r1047 r1115 r1141 into r1142;
    ternary r858 r1107 r1142 into r1143;
    ternary r1032 r1099 r1143 into r1144;
    ternary r947 r1097 r1144 into r1145;
    ternary r856 r1083 r1145 into r1146;
    ternary r817 r1078 r1146 into r1147;
    ternary r797 r1073 r1147 into r1148;
    add r290 1u8 into r1149;
    add r294 1u8 into r1150;
    add r298 1u8 into r1151;
    add r302 1u8 into r1152;
    add r306 1u8 into r1153;
    add r310 1u8 into r1154;
    is.eq r1151 r302 into r1155;
    is.eq r1152 r306 into r1156;
    and r1155 r1156 into r1157;
    is.eq r1153 r310 into r1158;
    and r1157 r1158 into r1159;
    is.eq r1154 r312 into r1160;
    and r1159 r1160 into r1161;
    is.eq r1150 r298 into r1162;
    and r1162 r1155 into r1163;
    and r1163 r1156 into r1164;
    and r1164 r1158 into r1165;
    is.eq r1149 r294 into r1166;
    and r1166 r1162 into r1167;
    and r1167 r1155 into r1168;
    and r1168 r1156 into r1169;
    is.eq r290 0u8 into r1170;
    is.eq r294 1u8 into r1171;
    and r1170 r1171 into r1172;
    is.eq r298 2u8 into r1173;
    and r1172 r1173 into r1174;
    is.eq r302 3u8 into r1175;
    and r1174 r1175 into r1176;
    is.eq r306 12u8 into r1177;
    is.eq r310 12u8 into r1178;
    or r1177 r1178 into r1179;
    is.eq r312 12u8 into r1180;
    or r1179 r1180 into r1181;
    and r1176 r1181 into r1182;
    is.eq r289 r293 into r1183;
    is.eq r293 r297 into r1184;
    is.eq r297 r301 into r1185;
    is.eq r301 r305 into r1186;
    is.eq r305 r309 into r1187;
    is.eq r309 r311 into r1188;
    and r1161 r1185 into r1189;
    and r1189 r1186 into r1190;
    and r1190 r1187 into r1191;
    and r1191 r1188 into r1192;
    and r1165 r1184 into r1193;
    and r1193 r1185 into r1194;
    and r1194 r1186 into r1195;
    and r1195 r1187 into r1196;
    and r1169 r1183 into r1197;
    and r1197 r1184 into r1198;
    and r1198 r1185 into r1199;
    and r1199 r1186 into r1200;
    and r1183 r1184 into r1201;
    and r1201 r1185 into r1202;
    is.eq r305 r289 into r1203;
    and r1177 r1203 into r1204;
    is.eq r309 r289 into r1205;
    and r1178 r1205 into r1206;
    or r1204 r1206 into r1207;
    is.eq r311 r289 into r1208;
    and r1180 r1208 into r1209;
    or r1207 r1209 into r1210;
    and r1182 r1202 into r1211;
    and r1211 r1210 into r1212;
    or r1192 r1196 into r1213;
    or r1213 r1200 into r1214;
    or r1214 r1212 into r1215;
    ternary r1200 r306 3u8 into r1216;
    ternary r1196 r310 r1216 into r1217;
    ternary r1192 r312 r1217 into r1218;
    is.eq r290 r294 into r1219;
    is.eq r294 r298 into r1220;
    is.eq r298 r302 into r1221;
    is.eq r302 r306 into r1222;
    is.eq r306 r310 into r1223;
    is.eq r310 r312 into r1224;
    and r1219 r1220 into r1225;
    and r1225 r1221 into r1226;
    and r1220 r1221 into r1227;
    and r1227 r1222 into r1228;
    and r1221 r1222 into r1229;
    and r1229 r1223 into r1230;
    and r1222 r1223 into r1231;
    and r1231 r1224 into r1232;
    or r1226 r1228 into r1233;
    or r1233 r1230 into r1234;
    or r1234 r1232 into r1235;
    ternary r1228 r306 r302 into r1236;
    ternary r1230 r310 r1236 into r1237;
    ternary r1232 r312 r1237 into r1238;
    ternary r1232 r298 r312 into r1239;
    and r1223 r1224 into r1240;
    or r1225 r1227 into r1241;
    or r1241 r1229 into r1242;
    or r1242 r1231 into r1243;
    or r1243 r1240 into r1244;
    ternary r1227 r302 r298 into r1245;
    ternary r1229 r306 r1245 into r1246;
    ternary r1231 r310 r1246 into r1247;
    ternary r1240 r312 r1247 into r1248;
    not r1225 into r1249;
    and r1219 r1249 into r1250;
    and r1220 r1249 into r1251;
    not r1227 into r1252;
    and r1251 r1252 into r1253;
    and r1221 r1252 into r1254;
    not r1229 into r1255;
    and r1254 r1255 into r1256;
    and r1222 r1255 into r1257;
    not r1231 into r1258;
    and r1257 r1258 into r1259;
    and r1223 r1258 into r1260;
    not r1240 into r1261;
    and r1260 r1261 into r1262;
    and r1224 r1261 into r1263;
    or r1250 r1253 into r1264;
    or r1264 r1256 into r1265;
    or r1265 r1259 into r1266;
    or r1266 r1262 into r1267;
    or r1267 r1263 into r1268;
    ternary r1253 r298 r294 into r1269;
    ternary r1256 r302 r1269 into r1270;
    ternary r1259 r306 r1270 into r1271;
    ternary r1262 r310 r1271 into r1272;
    ternary r1263 r312 r1272 into r1273;
    and r1244 r1268 into r1274;
    not r1268 into r1275;
    and r1244 r1275 into r1276;
    not r1244 into r1277;
    and r1268 r1277 into r1278;
    is.eq r289 0u8 into r1279;
    cast r1279 into r1280 as u8;
    is.eq r293 0u8 into r1281;
    cast r1281 into r1282 as u8;
    add r1280 r1282 into r1283;
    is.eq r297 0u8 into r1284;
    cast r1284 into r1285 as u8;
    add r1283 r1285 into r1286;
    is.eq r301 0u8 into r1287;
    cast r1287 into r1288 as u8;
    add r1286 r1288 into r1289;
    is.eq r305 0u8 into r1290;
    cast r1290 into r1291 as u8;
    add r1289 r1291 into r1292;
    is.eq r309 0u8 into r1293;
    cast r1293 into r1294 as u8;
    add r1292 r1294 into r1295;
    is.eq r311 0u8 into r1296;
    cast r1296 into r1297 as u8;
    add r1295 r1297 into r1298;
    gte r1298 5u8 into r1299;
    is.eq r289 1u8 into r1300;
    cast r1300 into r1301 as u8;
    is.eq r293 1u8 into r1302;
    cast r1302 into r1303 as u8;
    add r1301 r1303 into r1304;
    is.eq r297 1u8 into r1305;
    cast r1305 into r1306 as u8;
    add r1304 r1306 into r1307;
    is.eq r301 1u8 into r1308;
    cast r1308 into r1309 as u8;
    add r1307 r1309 into r1310;
    is.eq r305 1u8 into r1311;
    cast r1311 into r1312 as u8;
    add r1310 r1312 into r1313;
    is.eq r309 1u8 into r1314;
    cast r1314 into r1315 as u8;
    add r1313 r1315 into r1316;
    is.eq r311 1u8 into r1317;
    cast r1317 into r1318 as u8;
    add r1316 r1318 into r1319;
    gte r1319 5u8 into r1320;
    is.eq r289 2u8 into r1321;
    cast r1321 into r1322 as u8;
    is.eq r293 2u8 into r1323;
    cast r1323 into r1324 as u8;
    add r1322 r1324 into r1325;
    is.eq r297 2u8 into r1326;
    cast r1326 into r1327 as u8;
    add r1325 r1327 into r1328;
    is.eq r301 2u8 into r1329;
    cast r1329 into r1330 as u8;
    add r1328 r1330 into r1331;
    is.eq r305 2u8 into r1332;
    cast r1332 into r1333 as u8;
    add r1331 r1333 into r1334;
    is.eq r309 2u8 into r1335;
    cast r1335 into r1336 as u8;
    add r1334 r1336 into r1337;
    is.eq r311 2u8 into r1338;
    cast r1338 into r1339 as u8;
    add r1337 r1339 into r1340;
    gte r1340 5u8 into r1341;
    is.eq r289 3u8 into r1342;
    cast r1342 into r1343 as u8;
    is.eq r293 3u8 into r1344;
    cast r1344 into r1345 as u8;
    add r1343 r1345 into r1346;
    is.eq r297 3u8 into r1347;
    cast r1347 into r1348 as u8;
    add r1346 r1348 into r1349;
    is.eq r301 3u8 into r1350;
    cast r1350 into r1351 as u8;
    add r1349 r1351 into r1352;
    is.eq r305 3u8 into r1353;
    cast r1353 into r1354 as u8;
    add r1352 r1354 into r1355;
    is.eq r309 3u8 into r1356;
    cast r1356 into r1357 as u8;
    add r1355 r1357 into r1358;
    is.eq r311 3u8 into r1359;
    cast r1359 into r1360 as u8;
    add r1358 r1360 into r1361;
    gte r1361 5u8 into r1362;
    or r1299 r1320 into r1363;
    or r1363 r1341 into r1364;
    or r1364 r1362 into r1365;
    ternary r1320 1u8 0u8 into r1366;
    ternary r1341 2u8 r1366 into r1367;
    ternary r1362 3u8 r1367 into r1368;
    is.eq r311 r1368 into r1369;
    cast r1369 into r1370 as u8;
    is.eq r309 r1368 into r1371;
    cast r1371 into r1372 as u8;
    is.eq r305 r1368 into r1373;
    cast r1373 into r1374 as u8;
    is.eq r301 r1368 into r1375;
    cast r1375 into r1376 as u8;
    is.eq r297 r1368 into r1377;
    cast r1377 into r1378 as u8;
    is.eq r293 r1368 into r1379;
    cast r1379 into r1380 as u8;
    is.eq r289 r1368 into r1381;
    cast r1381 into r1382 as u8;
    add r1370 r1372 into r1383;
    add r1383 r1374 into r1384;
    add r1384 r1376 into r1385;
    add r1385 r1378 into r1386;
    add r1386 r1380 into r1387;
    is.eq r1370 1u8 into r1388;
    is.eq r1383 1u8 into r1389;
    is.eq r1384 1u8 into r1390;
    is.eq r1385 1u8 into r1391;
    is.eq r1386 1u8 into r1392;
    is.eq r1387 1u8 into r1393;
    is.eq r1370 2u8 into r1394;
    is.eq r1383 2u8 into r1395;
    is.eq r1384 2u8 into r1396;
    is.eq r1385 2u8 into r1397;
    is.eq r1386 2u8 into r1398;
    is.eq r1387 2u8 into r1399;
    is.eq r1370 3u8 into r1400;
    is.eq r1383 3u8 into r1401;
    is.eq r1384 3u8 into r1402;
    is.eq r1385 3u8 into r1403;
    is.eq r1386 3u8 into r1404;
    is.eq r1387 3u8 into r1405;
    is.eq r1370 4u8 into r1406;
    is.eq r1383 4u8 into r1407;
    is.eq r1384 4u8 into r1408;
    is.eq r1385 4u8 into r1409;
    is.eq r1386 4u8 into r1410;
    is.eq r1387 4u8 into r1411;
    is.eq r1370 5u8 into r1412;
    is.eq r1383 5u8 into r1413;
    is.eq r1384 5u8 into r1414;
    is.eq r1385 5u8 into r1415;
    is.eq r1386 5u8 into r1416;
    is.eq r1387 5u8 into r1417;
    ternary r1393 r294 r290 into r1418;
    ternary r1392 r298 r1418 into r1419;
    ternary r1391 r302 r1419 into r1420;
    ternary r1390 r306 r1420 into r1421;
    ternary r1389 r310 r1421 into r1422;
    ternary r1388 r312 r1422 into r1423;
    ternary r1399 r294 r290 into r1424;
    ternary r1398 r298 r1424 into r1425;
    ternary r1397 r302 r1425 into r1426;
    ternary r1396 r306 r1426 into r1427;
    ternary r1395 r310 r1427 into r1428;
    ternary r1394 r312 r1428 into r1429;
    ternary r1405 r294 r290 into r1430;
    ternary r1404 r298 r1430 into r1431;
    ternary r1403 r302 r1431 into r1432;
    ternary r1402 r306 r1432 into r1433;
    ternary r1401 r310 r1433 into r1434;
    ternary r1400 r312 r1434 into r1435;
    ternary r1411 r294 r290 into r1436;
    ternary r1410 r298 r1436 into r1437;
    ternary r1409 r302 r1437 into r1438;
    ternary r1408 r306 r1438 into r1439;
    ternary r1407 r310 r1439 into r1440;
    ternary r1406 r312 r1440 into r1441;
    ternary r1417 r294 r290 into r1442;
    ternary r1416 r298 r1442 into r1443;
    ternary r1415 r302 r1443 into r1444;
    ternary r1414 r306 r1444 into r1445;
    ternary r1413 r310 r1445 into r1446;
    ternary r1412 r312 r1446 into r1447;
    or r1161 r1165 into r1448;
    or r1448 r1169 into r1449;
    or r1449 r1182 into r1450;
    ternary r1169 r306 3u8 into r1451;
    ternary r1165 r310 r1451 into r1452;
    ternary r1161 r312 r1452 into r1453;
    cast r1250 into r1454 as u8;
    cast r1253 into r1455 as u8;
    add r1454 r1455 into r1456;
    cast r1256 into r1457 as u8;
    add r1456 r1457 into r1458;
    cast r1259 into r1459 as u8;
    add r1458 r1459 into r1460;
    cast r1262 into r1461 as u8;
    add r1460 r1461 into r1462;
    cast r1263 into r1463 as u8;
    add r1462 r1463 into r1464;
    gte r1464 2u8 into r1465;
    not r1263 into r1466;
    not r1262 into r1467;
    not r1259 into r1468;
    and r1262 r1466 into r1469;
    and r1259 r1467 into r1470;
    and r1470 r1466 into r1471;
    ternary r1471 r306 r1270 into r1472;
    ternary r1469 r310 r1472 into r1473;
    not r1256 into r1474;
    not r1253 into r1475;
    ternary r1475 r298 r294 into r1476;
    ternary r1474 r302 r1476 into r1477;
    ternary r1468 r306 r1477 into r1478;
    ternary r1467 r310 r1478 into r1479;
    ternary r1466 r312 r1479 into r1480;
    ternary r1240 r302 r312 into r1481;
    ternary r1231 r298 r310 into r1482;
    ternary r1240 r298 r1482 into r1483;
    ternary r1263 r306 r312 into r1484;
    ternary r1262 r302 r310 into r1485;
    ternary r1263 r302 r1485 into r1486;
    ternary r1259 r298 r306 into r1487;
    ternary r1262 r298 r1487 into r1488;
    ternary r1263 r298 r1488 into r1489;
    cast r1218 into r1490 as u32;
    or 2415919104u32 r1490 into r1491;
    cast r1238 into r1492 as u32;
    shl r1492 4u8 into r1493;
    or 2147483648u32 r1493 into r1494;
    cast r1239 into r1495 as u32;
    or r1494 r1495 into r1496;
    cast r1248 into r1497 as u32;
    shl r1497 4u8 into r1498;
    or 1879048192u32 r1498 into r1499;
    cast r1273 into r1500 as u32;
    or r1499 r1500 into r1501;
    cast r1423 into r1502 as u32;
    shl r1502 16u8 into r1503;
    or 1610612736u32 r1503 into r1504;
    cast r1429 into r1505 as u32;
    shl r1505 12u8 into r1506;
    or r1504 r1506 into r1507;
    cast r1435 into r1508 as u32;
    shl r1508 8u8 into r1509;
    or r1507 r1509 into r1510;
    cast r1441 into r1511 as u32;
    shl r1511 4u8 into r1512;
    or r1510 r1512 into r1513;
    cast r1447 into r1514 as u32;
    or r1513 r1514 into r1515;
    cast r1453 into r1516 as u32;
    or 1342177280u32 r1516 into r1517;
    cast r1248 into r1518 as u32;
    shl r1518 8u8 into r1519;
    or 1073741824u32 r1519 into r1520;
    cast r1481 into r1521 as u32;
    shl r1521 4u8 into r1522;
    or r1520 r1522 into r1523;
    cast r1483 into r1524 as u32;
    or r1523 r1524 into r1525;
    cast r1273 into r1526 as u32;
    shl r1526 8u8 into r1527;
    or 805306368u32 r1527 into r1528;
    cast r1473 into r1529 as u32;
    shl r1529 4u8 into r1530;
    or r1528 r1530 into r1531;
    cast r1480 into r1532 as u32;
    or r1531 r1532 into r1533;
    cast r1273 into r1534 as u32;
    shl r1534 12u8 into r1535;
    or 536870912u32 r1535 into r1536;
    cast r1484 into r1537 as u32;
    shl r1537 8u8 into r1538;
    or r1536 r1538 into r1539;
    cast r1486 into r1540 as u32;
    shl r1540 4u8 into r1541;
    or r1539 r1541 into r1542;
    cast r1489 into r1543 as u32;
    or r1542 r1543 into r1544;
    cast r312 into r1545 as u32;
    shl r1545 16u8 into r1546;
    or 268435456u32 r1546 into r1547;
    cast r310 into r1548 as u32;
    shl r1548 12u8 into r1549;
    or r1547 r1549 into r1550;
    cast r306 into r1551 as u32;
    shl r1551 8u8 into r1552;
    or r1550 r1552 into r1553;
    cast r302 into r1554 as u32;
    shl r1554 4u8 into r1555;
    or r1553 r1555 into r1556;
    cast r298 into r1557 as u32;
    or r1556 r1557 into r1558;
    ternary r1278 r1544 r1558 into r1559;
    ternary r1465 r1533 r1559 into r1560;
    ternary r1276 r1525 r1560 into r1561;
    ternary r1450 r1517 r1561 into r1562;
    ternary r1365 r1515 r1562 into r1563;
    ternary r1274 r1501 r1563 into r1564;
    ternary r1235 r1496 r1564 into r1565;
    ternary r1215 r1491 r1565 into r1566;
    lte r18.player1_bet r18.player2_bet into r1567;
    lte r18.player1_bet r18.player3_bet into r1568;
    and r1567 r1568 into r1569;
    lte r18.player2_bet r18.player3_bet into r1570;
    ternary r1570 r18.player2_bet r18.player3_bet into r1571;
    ternary r1569 r18.player1_bet r1571 into r1572;
    gte r18.player1_bet r18.player2_bet into r1573;
    gte r18.player1_bet r18.player3_bet into r1574;
    and r1573 r1574 into r1575;
    gte r18.player2_bet r18.player3_bet into r1576;
    ternary r1576 r18.player2_bet r18.player3_bet into r1577;
    ternary r1575 r18.player1_bet r1577 into r1578;
    is.neq r18.player1_bet r1572 into r1579;
    is.neq r18.player1_bet r1578 into r1580;
    and r1579 r1580 into r1581;
    is.neq r18.player2_bet r1572 into r1582;
    is.neq r18.player2_bet r1578 into r1583;
    and r1582 r1583 into r1584;
    ternary r1584 r18.player2_bet r18.player3_bet into r1585;
    ternary r1581 r18.player1_bet r1585 into r1586;
    gte r18.player1_bet r1572 into r1587;
    cast r1587 into r1588 as u8;
    gte r18.player2_bet r1572 into r1589;
    cast r1589 into r1590 as u8;
    add r1588 r1590 into r1591;
    gte r18.player3_bet r1572 into r1592;
    cast r1592 into r1593 as u8;
    add r1591 r1593 into r1594;
    gte r18.player1_bet r1586 into r1595;
    cast r1595 into r1596 as u8;
    gte r18.player2_bet r1586 into r1597;
    cast r1597 into r1598 as u8;
    add r1596 r1598 into r1599;
    gte r18.player3_bet r1586 into r1600;
    cast r1600 into r1601 as u8;
    add r1599 r1601 into r1602;
    gte r18.player1_bet r1578 into r1603;
    cast r1603 into r1604 as u8;
    gte r18.player2_bet r1578 into r1605;
    cast r1605 into r1606 as u8;
    add r1604 r1606 into r1607;
    gte r18.player3_bet r1578 into r1608;
    cast r1608 into r1609 as u8;
    add r1607 r1609 into r1610;
    cast r1594 into r1611 as u16;
    mul r1572 r1611 into r1612;
    is.eq r1572 r1586 into r1613;
    sub r1586 r1572 into r1614;
    cast r1602 into r1615 as u16;
    mul r1614 r1615 into r1616;
    ternary r1613 0u16 r1616 into r1617;
    is.eq r1586 r1578 into r1618;
    sub r1578 r1586 into r1619;
    cast r1610 into r1620 as u16;
    mul r1619 r1620 into r1621;
    ternary r1618 0u16 r1621 into r1622;
    gte r730 r1148 into r1623;
    and r25 r1623 into r1624;
    gte r730 r1566 into r1625;
    and r1624 r1625 into r1626;
    gte r1148 r730 into r1627;
    and r32 r1627 into r1628;
    gte r1148 r1566 into r1629;
    and r1628 r1629 into r1630;
    gte r1566 r730 into r1631;
    and r39 r1631 into r1632;
    gte r1566 r1148 into r1633;
    and r1632 r1633 into r1634;
    cast r1626 into r1635 as u8;
    cast r1630 into r1636 as u8;
    add r1635 r1636 into r1637;
    cast r1634 into r1638 as u8;
    add r1637 r1638 into r1639;
    cast r1639 into r1640 as u16;
    div r1612 r1640 into r1641;
    ternary r1626 r1641 0u16 into r1642;
    cast r1639 into r1643 as u16;
    div r1612 r1643 into r1644;
    ternary r1630 r1644 0u16 into r1645;
    cast r1639 into r1646 as u16;
    div r1612 r1646 into r1647;
    ternary r1634 r1647 0u16 into r1648;
    gte r18.player1_bet r1586 into r1649;
    and r25 r1649 into r1650;
    gte r18.player2_bet r1586 into r1651;
    and r32 r1651 into r1652;
    gte r18.player3_bet r1586 into r1653;
    and r39 r1653 into r1654;
    and r1626 r1650 into r1655;
    cast r1655 into r1656 as u8;
    and r1630 r1652 into r1657;
    cast r1657 into r1658 as u8;
    add r1656 r1658 into r1659;
    and r1634 r1654 into r1660;
    cast r1660 into r1661 as u8;
    add r1659 r1661 into r1662;
    gt r1662 0u8 into r1663;
    and r1655 r1663 into r1664;
    cast r1662 into r1665 as u16;
    div r1617 r1665 into r1666;
    ternary r1664 r1666 0u16 into r1667;
    and r1657 r1663 into r1668;
    cast r1662 into r1669 as u16;
    div r1617 r1669 into r1670;
    ternary r1668 r1670 0u16 into r1671;
    and r1660 r1663 into r1672;
    cast r1662 into r1673 as u16;
    div r1617 r1673 into r1674;
    ternary r1672 r1674 0u16 into r1675;
    gte r18.player1_bet r1578 into r1676;
    and r25 r1676 into r1677;
    gte r18.player2_bet r1578 into r1678;
    and r32 r1678 into r1679;
    gte r18.player3_bet r1578 into r1680;
    and r39 r1680 into r1681;
    and r1626 r1677 into r1682;
    cast r1682 into r1683 as u8;
    and r1630 r1679 into r1684;
    cast r1684 into r1685 as u8;
    add r1683 r1685 into r1686;
    and r1634 r1681 into r1687;
    cast r1687 into r1688 as u8;
    add r1686 r1688 into r1689;
    gt r1689 0u8 into r1690;
    and r1682 r1690 into r1691;
    cast r1689 into r1692 as u16;
    div r1622 r1692 into r1693;
    ternary r1691 r1693 0u16 into r1694;
    and r1684 r1690 into r1695;
    cast r1689 into r1696 as u16;
    div r1622 r1696 into r1697;
    ternary r1695 r1697 0u16 into r1698;
    and r1687 r1690 into r1699;
    cast r1689 into r1700 as u16;
    div r1622 r1700 into r1701;
    ternary r1699 r1701 0u16 into r1702;
    add r1642 r1667 into r1703;
    add r1703 r1694 into r1704;
    add r1645 r1671 into r1705;
    add r1705 r1698 into r1706;
    add r1648 r1675 into r1707;
    add r1707 r1702 into r1708;
    add r18.player1 r1704 into r1709;
    add r18.player2 r1706 into r1710;
    add r18.player3 r1708 into r1711;
    cast r1709 r1710 r1711 0u16 0u16 0u16 into r1712 as Chips;
    is.eq r1712.player1 0u16 into r1713;
    ternary r1713 1u8 0u8 into r1714;
    is.eq r1712.player2 0u16 into r1715;
    ternary r1715 2u8 0u8 into r1716;
    or r1714 r1716 into r1717;
    is.eq r1712.player3 0u16 into r1718;
    ternary r1718 4u8 0u8 into r1719;
    or r1717 r1719 into r1720;
    is.eq r1720 6u8 into r1721;
    is.eq r1720 5u8 into r1722;
    or r1721 r1722 into r1723;
    is.eq r1720 3u8 into r1724;
    or r1723 r1724 into r1725;
    branch.eq r1725 false to end_then_0_6;
    set r1712 into chips[r0];
    branch.eq true true to end_otherwise_0_7;
    position end_then_0_6;
    position end_otherwise_0_7;
    and r2.dealer_button 1u8 into r1726;
    is.neq r1726 0u8 into r1727;
    and r2.dealer_button 2u8 into r1728;
    is.neq r1728 0u8 into r1729;
    ternary r1729 4u8 1u8 into r1730;
    ternary r1727 2u8 r1730 into r1731;
    sub r2.remaining_hands 1u8 into r1732;
    is.eq r1732 0u8 into r1733;
    shl r2.sb 1u8 into r1734;
    shl r2.bb 1u8 into r1735;
    ternary r1733 r1734 r2.sb into r1736;
    ternary r1733 r1735 r2.bb into r1737;
    and r1720 1u8 into r1738;
    is.neq r1738 0u8 into r1739;
    not r1739 into r1740;
    and r1720 2u8 into r1741;
    is.neq r1741 0u8 into r1742;
    not r1742 into r1743;
    ternary r1743 31u8 32u8 into r1744;
    ternary r1740 30u8 r1744 into r1745;
    ternary r1733 10u8 r1732 into r1746;
    add r2.hands_played 1u8 into r1747;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r1745 r1731 r1720 r1720 0u8 r1736 r1737 r1746 r1747 0u16 into r1748 as Game;
    set r1712 into chips[r0];
    set r1748 into games[r0];

constructor:
    assert.eq edition 0u16;
