program commutative_encryption.aleo;

function encrypt_deck:
    input r0 as scalar.private;
    input r1 as [[group; 26u32]; 2u32].private;
    mul r1[0u32][0u32] r0 into r2;
    mul r1[0u32][1u32] r0 into r3;
    mul r1[0u32][2u32] r0 into r4;
    mul r1[0u32][3u32] r0 into r5;
    mul r1[0u32][4u32] r0 into r6;
    mul r1[0u32][5u32] r0 into r7;
    mul r1[0u32][6u32] r0 into r8;
    mul r1[0u32][7u32] r0 into r9;
    mul r1[0u32][8u32] r0 into r10;
    mul r1[0u32][9u32] r0 into r11;
    mul r1[0u32][10u32] r0 into r12;
    mul r1[0u32][11u32] r0 into r13;
    mul r1[0u32][12u32] r0 into r14;
    mul r1[0u32][13u32] r0 into r15;
    mul r1[0u32][14u32] r0 into r16;
    mul r1[0u32][15u32] r0 into r17;
    mul r1[0u32][16u32] r0 into r18;
    mul r1[0u32][17u32] r0 into r19;
    mul r1[0u32][18u32] r0 into r20;
    mul r1[0u32][19u32] r0 into r21;
    mul r1[0u32][20u32] r0 into r22;
    mul r1[0u32][21u32] r0 into r23;
    mul r1[0u32][22u32] r0 into r24;
    mul r1[0u32][23u32] r0 into r25;
    mul r1[0u32][24u32] r0 into r26;
    mul r1[0u32][25u32] r0 into r27;
    mul r1[1u32][0u32] r0 into r28;
    mul r1[1u32][1u32] r0 into r29;
    mul r1[1u32][2u32] r0 into r30;
    mul r1[1u32][3u32] r0 into r31;
    mul r1[1u32][4u32] r0 into r32;
    mul r1[1u32][5u32] r0 into r33;
    mul r1[1u32][6u32] r0 into r34;
    mul r1[1u32][7u32] r0 into r35;
    mul r1[1u32][8u32] r0 into r36;
    mul r1[1u32][9u32] r0 into r37;
    mul r1[1u32][10u32] r0 into r38;
    mul r1[1u32][11u32] r0 into r39;
    mul r1[1u32][12u32] r0 into r40;
    mul r1[1u32][13u32] r0 into r41;
    mul r1[1u32][14u32] r0 into r42;
    mul r1[1u32][15u32] r0 into r43;
    mul r1[1u32][16u32] r0 into r44;
    mul r1[1u32][17u32] r0 into r45;
    mul r1[1u32][18u32] r0 into r46;
    mul r1[1u32][19u32] r0 into r47;
    mul r1[1u32][20u32] r0 into r48;
    mul r1[1u32][21u32] r0 into r49;
    mul r1[1u32][22u32] r0 into r50;
    mul r1[1u32][23u32] r0 into r51;
    mul r1[1u32][24u32] r0 into r52;
    mul r1[1u32][25u32] r0 into r53;
    cast r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 into r54 as [group; 26u32];
    cast r28 r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 into r55 as [group; 26u32];
    cast r54 r55 into r56 as [[group; 26u32]; 2u32];
    output r56 as [[group; 26u32]; 2u32].private;

function decrypt_deck:
    input r0 as scalar.private;
    input r1 as [[group; 26u32]; 2u32].private;
    mul r1[0u32][0u32] r0 into r2;
    mul r1[0u32][1u32] r0 into r3;
    mul r1[0u32][2u32] r0 into r4;
    mul r1[0u32][3u32] r0 into r5;
    mul r1[0u32][4u32] r0 into r6;
    mul r1[0u32][5u32] r0 into r7;
    mul r1[0u32][6u32] r0 into r8;
    mul r1[0u32][7u32] r0 into r9;
    mul r1[0u32][8u32] r0 into r10;
    mul r1[0u32][9u32] r0 into r11;
    mul r1[0u32][10u32] r0 into r12;
    mul r1[0u32][11u32] r0 into r13;
    mul r1[0u32][12u32] r0 into r14;
    mul r1[0u32][13u32] r0 into r15;
    mul r1[0u32][14u32] r0 into r16;
    mul r1[0u32][15u32] r0 into r17;
    mul r1[0u32][16u32] r0 into r18;
    mul r1[0u32][17u32] r0 into r19;
    mul r1[0u32][18u32] r0 into r20;
    mul r1[0u32][19u32] r0 into r21;
    mul r1[0u32][20u32] r0 into r22;
    mul r1[0u32][21u32] r0 into r23;
    mul r1[0u32][22u32] r0 into r24;
    mul r1[0u32][23u32] r0 into r25;
    mul r1[0u32][24u32] r0 into r26;
    mul r1[0u32][25u32] r0 into r27;
    mul r1[1u32][0u32] r0 into r28;
    mul r1[1u32][1u32] r0 into r29;
    mul r1[1u32][2u32] r0 into r30;
    mul r1[1u32][3u32] r0 into r31;
    mul r1[1u32][4u32] r0 into r32;
    mul r1[1u32][5u32] r0 into r33;
    mul r1[1u32][6u32] r0 into r34;
    mul r1[1u32][7u32] r0 into r35;
    mul r1[1u32][8u32] r0 into r36;
    mul r1[1u32][9u32] r0 into r37;
    mul r1[1u32][10u32] r0 into r38;
    mul r1[1u32][11u32] r0 into r39;
    mul r1[1u32][12u32] r0 into r40;
    mul r1[1u32][13u32] r0 into r41;
    mul r1[1u32][14u32] r0 into r42;
    mul r1[1u32][15u32] r0 into r43;
    mul r1[1u32][16u32] r0 into r44;
    mul r1[1u32][17u32] r0 into r45;
    mul r1[1u32][18u32] r0 into r46;
    mul r1[1u32][19u32] r0 into r47;
    mul r1[1u32][20u32] r0 into r48;
    mul r1[1u32][21u32] r0 into r49;
    mul r1[1u32][22u32] r0 into r50;
    mul r1[1u32][23u32] r0 into r51;
    mul r1[1u32][24u32] r0 into r52;
    mul r1[1u32][25u32] r0 into r53;
    cast r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 into r54 as [group; 26u32];
    cast r28 r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 into r55 as [group; 26u32];
    cast r54 r55 into r56 as [[group; 26u32]; 2u32];
    output r56 as [[group; 26u32]; 2u32].private;

function decrypt_card:
    input r0 as scalar.private;
    input r1 as group.private;
    mul r1 r0 into r2;
    output r2 as group.private;

function initialize_deck:
    cast 3392012154874767444390854442581401347320006388280860477416992940917834133204group 953837357282233899777406715922041736543584492243798018823707163613883403305group 6503556439073140634255328851004020375988588285117004815850870964647979670801group 4040370612500610221777198550792796340689726127862698147859453241435813496555group 4689012369537731665571619722342779086085568448491931773632128385304305146591group 4564182371848555043448605710892638686898978892232764174696405125645002636892group 848126127764798815395851329986443466870492828017195270577280501362600596232group 4875508548683051861369016473179226989952214385529375166281154539937500606555group 1307424191011013766837953062155149597157177264766654621249971211137776627776group 2475994602664962266756667132155508498054911494175316888289829855632352425318group 7333395623938633557381101554755437926891822638096151444220267404139851657683group 6473121016241629652244430974108156486886950414052381380540894241576199989567group 6928183199867526721309069200448948231208367715458658241134012999226320143515group 997835157439367216687041376932333011287683250312848736035528408867625098690group 4931066445063509285303023934501204679980414117886975320136931557257838912789group 7371413847444022308501183155709846522350036811800322930988624184856688555262group 6596893852124345789541858079054907799475032635539042423874566179762387221005group 45720702652254904702174525760216840726914384953104904393175230916343809475group 8363084731140527817500138544608897783201649192473721603009510267430336298880group 7172476837158935739349179769443960485718101524505992399699591044794531113147group 1949222471841624545633227100482027253884933553499848610714333721577740530682group 6587717055688278083734996003490128737632087526660617125982739514042331681261group 175874032145749244558212372198698411856155472470324248160921859540104675272group 5976980054529650861547342139369208609842040837060797272697925484538579905159group 6700140854655564196552936260748137705957750926967052515752686368821034230216group 2592059507568441023554962175546075515803412500073017142859302543921458723274group into r0 as [group; 26u32];
    cast 6878312047072830493888039031148330844202030234907877578771631741400625208356group 3495212888076629853377374366431366392546450900999669193648473960860759205543group 4901933502741198468488906755140045593182694538935177424314296229429318492290group 3736720964731874519320179158933533506906118545981837489890844485863413322798group 1069760177477681738053434763908141327746517176955610093065097190657142339305group 835210928718337121356339527884471364306201661209646115350676550022019111493group 1560152196841817736150874178480744457479533980124406186819116737725883005803group 351156628414325642260994558025276090057514773666718404413256839900319521832group 2041682244694582766700546992703295756304965059428307282181780354053353516082group 7360910086480642948841155583263683414366927264578201625599710080651290677744group 6661196127341228406520545310547787662086532528315939893496339602964162178270group 5581228021030379812699262476128936486568523895136576162367638385826964300920group 6230506708580841807569793908528107482901522201584381459792476544640849222703group 2490388774184430533384109970525375075707135256961862428543577625663648962502group 498758631189255541107618257749715938228838066931729403362137033946991420285group 1080476013374569648679913887802623512270852165650911533859825004998447206461group 1012365865694281142757032125447143888174015355627356030301855259505511893272group 1880664096438921970340353578586088114808693735114893243748579897130706741069group 935088489894348138363782107960211481518684482132038122613177396990722623866group 2052995156958665242518879510142190853046693794655122023238615949622157679751group 359173673537719068741336690297714055728937013861116947102078534249091563078group 2928991025219335977220996920544915501184285616821911591488118127613232148375group 1143094124620019362801690786540167125253195133877478948853542135418239420026group 7007763173785343871710031274263443165624467260831126471228488725582119067464group 2757649494998784362487607068795090151060094430862060013117486370892407475872group 384468951831635766042121102051482158488833515540324150349398683374546973841group into r1 as [group; 26u32];
    cast r0 r1 into r2 as [[group; 26u32]; 2u32];
    output r2 as [[group; 26u32]; 2u32].private;

constructor:
    assert.eq edition 0u16;
