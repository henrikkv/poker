program commutative_encryption.aleo;

function encrypt_deck:
    input r0 as scalar.private;
    input r1 as [[group; 26u32]; 2u32].private;
    mul r1[0u32][0u32] r0 into r2;
    mul r1[0u32][1u32] r0 into r3;
    mul r1[0u32][2u32] r0 into r4;
    mul r1[0u32][3u32] r0 into r5;
    mul r1[0u32][4u32] r0 into r6;
    mul r1[0u32][5u32] r0 into r7;
    mul r1[0u32][6u32] r0 into r8;
    mul r1[0u32][7u32] r0 into r9;
    mul r1[0u32][8u32] r0 into r10;
    mul r1[0u32][9u32] r0 into r11;
    mul r1[0u32][10u32] r0 into r12;
    mul r1[0u32][11u32] r0 into r13;
    mul r1[0u32][12u32] r0 into r14;
    mul r1[0u32][13u32] r0 into r15;
    mul r1[0u32][14u32] r0 into r16;
    mul r1[0u32][15u32] r0 into r17;
    mul r1[0u32][16u32] r0 into r18;
    mul r1[0u32][17u32] r0 into r19;
    mul r1[0u32][18u32] r0 into r20;
    mul r1[0u32][19u32] r0 into r21;
    mul r1[0u32][20u32] r0 into r22;
    mul r1[0u32][21u32] r0 into r23;
    mul r1[0u32][22u32] r0 into r24;
    mul r1[0u32][23u32] r0 into r25;
    mul r1[0u32][24u32] r0 into r26;
    mul r1[0u32][25u32] r0 into r27;
    mul r1[1u32][0u32] r0 into r28;
    mul r1[1u32][1u32] r0 into r29;
    mul r1[1u32][2u32] r0 into r30;
    mul r1[1u32][3u32] r0 into r31;
    mul r1[1u32][4u32] r0 into r32;
    mul r1[1u32][5u32] r0 into r33;
    mul r1[1u32][6u32] r0 into r34;
    mul r1[1u32][7u32] r0 into r35;
    mul r1[1u32][8u32] r0 into r36;
    mul r1[1u32][9u32] r0 into r37;
    mul r1[1u32][10u32] r0 into r38;
    mul r1[1u32][11u32] r0 into r39;
    mul r1[1u32][12u32] r0 into r40;
    mul r1[1u32][13u32] r0 into r41;
    mul r1[1u32][14u32] r0 into r42;
    mul r1[1u32][15u32] r0 into r43;
    mul r1[1u32][16u32] r0 into r44;
    mul r1[1u32][17u32] r0 into r45;
    mul r1[1u32][18u32] r0 into r46;
    mul r1[1u32][19u32] r0 into r47;
    mul r1[1u32][20u32] r0 into r48;
    mul r1[1u32][21u32] r0 into r49;
    mul r1[1u32][22u32] r0 into r50;
    mul r1[1u32][23u32] r0 into r51;
    mul r1[1u32][24u32] r0 into r52;
    mul r1[1u32][25u32] r0 into r53;
    cast r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 into r54 as [group; 26u32];
    cast r28 r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 into r55 as [group; 26u32];
    cast r54 r55 into r56 as [[group; 26u32]; 2u32];
    output r56 as [[group; 26u32]; 2u32].private;

function decrypt_deck:
    input r0 as scalar.private;
    input r1 as [[group; 26u32]; 2u32].private;
    mul r1[0u32][0u32] r0 into r2;
    mul r1[0u32][1u32] r0 into r3;
    mul r1[0u32][2u32] r0 into r4;
    mul r1[0u32][3u32] r0 into r5;
    mul r1[0u32][4u32] r0 into r6;
    mul r1[0u32][5u32] r0 into r7;
    mul r1[0u32][6u32] r0 into r8;
    mul r1[0u32][7u32] r0 into r9;
    mul r1[0u32][8u32] r0 into r10;
    mul r1[0u32][9u32] r0 into r11;
    mul r1[0u32][10u32] r0 into r12;
    mul r1[0u32][11u32] r0 into r13;
    mul r1[0u32][12u32] r0 into r14;
    mul r1[0u32][13u32] r0 into r15;
    mul r1[0u32][14u32] r0 into r16;
    mul r1[0u32][15u32] r0 into r17;
    mul r1[0u32][16u32] r0 into r18;
    mul r1[0u32][17u32] r0 into r19;
    mul r1[0u32][18u32] r0 into r20;
    mul r1[0u32][19u32] r0 into r21;
    mul r1[0u32][20u32] r0 into r22;
    mul r1[0u32][21u32] r0 into r23;
    mul r1[0u32][22u32] r0 into r24;
    mul r1[0u32][23u32] r0 into r25;
    mul r1[0u32][24u32] r0 into r26;
    mul r1[0u32][25u32] r0 into r27;
    mul r1[1u32][0u32] r0 into r28;
    mul r1[1u32][1u32] r0 into r29;
    mul r1[1u32][2u32] r0 into r30;
    mul r1[1u32][3u32] r0 into r31;
    mul r1[1u32][4u32] r0 into r32;
    mul r1[1u32][5u32] r0 into r33;
    mul r1[1u32][6u32] r0 into r34;
    mul r1[1u32][7u32] r0 into r35;
    mul r1[1u32][8u32] r0 into r36;
    mul r1[1u32][9u32] r0 into r37;
    mul r1[1u32][10u32] r0 into r38;
    mul r1[1u32][11u32] r0 into r39;
    mul r1[1u32][12u32] r0 into r40;
    mul r1[1u32][13u32] r0 into r41;
    mul r1[1u32][14u32] r0 into r42;
    mul r1[1u32][15u32] r0 into r43;
    mul r1[1u32][16u32] r0 into r44;
    mul r1[1u32][17u32] r0 into r45;
    mul r1[1u32][18u32] r0 into r46;
    mul r1[1u32][19u32] r0 into r47;
    mul r1[1u32][20u32] r0 into r48;
    mul r1[1u32][21u32] r0 into r49;
    mul r1[1u32][22u32] r0 into r50;
    mul r1[1u32][23u32] r0 into r51;
    mul r1[1u32][24u32] r0 into r52;
    mul r1[1u32][25u32] r0 into r53;
    cast r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 into r54 as [group; 26u32];
    cast r28 r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 into r55 as [group; 26u32];
    cast r54 r55 into r56 as [[group; 26u32]; 2u32];
    output r56 as [[group; 26u32]; 2u32].private;

function decrypt_card:
    input r0 as scalar.private;
    input r1 as group.private;
    mul r1 r0 into r2;
    output r2 as group.private;

function to_u8:
    input r0 as group.private;
    is.eq r0 3392012154874767444390854442581401347320006388280860477416992940917834133204group into r1;
    is.eq r0 953837357282233899777406715922041736543584492243798018823707163613883403305group into r2;
    is.eq r0 6503556439073140634255328851004020375988588285117004815850870964647979670801group into r3;
    is.eq r0 4040370612500610221777198550792796340689726127862698147859453241435813496555group into r4;
    is.eq r0 4689012369537731665571619722342779086085568448491931773632128385304305146591group into r5;
    is.eq r0 4564182371848555043448605710892638686898978892232764174696405125645002636892group into r6;
    is.eq r0 848126127764798815395851329986443466870492828017195270577280501362600596232group into r7;
    is.eq r0 4875508548683051861369016473179226989952214385529375166281154539937500606555group into r8;
    is.eq r0 1307424191011013766837953062155149597157177264766654621249971211137776627776group into r9;
    is.eq r0 2475994602664962266756667132155508498054911494175316888289829855632352425318group into r10;
    is.eq r0 7333395623938633557381101554755437926891822638096151444220267404139851657683group into r11;
    is.eq r0 6473121016241629652244430974108156486886950414052381380540894241576199989567group into r12;
    is.eq r0 6928183199867526721309069200448948231208367715458658241134012999226320143515group into r13;
    is.eq r0 997835157439367216687041376932333011287683250312848736035528408867625098690group into r14;
    is.eq r0 4931066445063509285303023934501204679980414117886975320136931557257838912789group into r15;
    is.eq r0 7371413847444022308501183155709846522350036811800322930988624184856688555262group into r16;
    is.eq r0 6596893852124345789541858079054907799475032635539042423874566179762387221005group into r17;
    is.eq r0 45720702652254904702174525760216840726914384953104904393175230916343809475group into r18;
    is.eq r0 8363084731140527817500138544608897783201649192473721603009510267430336298880group into r19;
    is.eq r0 7172476837158935739349179769443960485718101524505992399699591044794531113147group into r20;
    is.eq r0 1949222471841624545633227100482027253884933553499848610714333721577740530682group into r21;
    is.eq r0 6587717055688278083734996003490128737632087526660617125982739514042331681261group into r22;
    is.eq r0 175874032145749244558212372198698411856155472470324248160921859540104675272group into r23;
    is.eq r0 5976980054529650861547342139369208609842040837060797272697925484538579905159group into r24;
    is.eq r0 6700140854655564196552936260748137705957750926967052515752686368821034230216group into r25;
    is.eq r0 2592059507568441023554962175546075515803412500073017142859302543921458723274group into r26;
    is.eq r0 6878312047072830493888039031148330844202030234907877578771631741400625208356group into r27;
    is.eq r0 3495212888076629853377374366431366392546450900999669193648473960860759205543group into r28;
    is.eq r0 4901933502741198468488906755140045593182694538935177424314296229429318492290group into r29;
    is.eq r0 3736720964731874519320179158933533506906118545981837489890844485863413322798group into r30;
    is.eq r0 1069760177477681738053434763908141327746517176955610093065097190657142339305group into r31;
    is.eq r0 835210928718337121356339527884471364306201661209646115350676550022019111493group into r32;
    is.eq r0 1560152196841817736150874178480744457479533980124406186819116737725883005803group into r33;
    is.eq r0 351156628414325642260994558025276090057514773666718404413256839900319521832group into r34;
    is.eq r0 2041682244694582766700546992703295756304965059428307282181780354053353516082group into r35;
    is.eq r0 7360910086480642948841155583263683414366927264578201625599710080651290677744group into r36;
    is.eq r0 6661196127341228406520545310547787662086532528315939893496339602964162178270group into r37;
    is.eq r0 5581228021030379812699262476128936486568523895136576162367638385826964300920group into r38;
    is.eq r0 6230506708580841807569793908528107482901522201584381459792476544640849222703group into r39;
    is.eq r0 2490388774184430533384109970525375075707135256961862428543577625663648962502group into r40;
    is.eq r0 498758631189255541107618257749715938228838066931729403362137033946991420285group into r41;
    is.eq r0 1080476013374569648679913887802623512270852165650911533859825004998447206461group into r42;
    is.eq r0 1012365865694281142757032125447143888174015355627356030301855259505511893272group into r43;
    is.eq r0 1880664096438921970340353578586088114808693735114893243748579897130706741069group into r44;
    is.eq r0 935088489894348138363782107960211481518684482132038122613177396990722623866group into r45;
    is.eq r0 2052995156958665242518879510142190853046693794655122023238615949622157679751group into r46;
    is.eq r0 359173673537719068741336690297714055728937013861116947102078534249091563078group into r47;
    is.eq r0 2928991025219335977220996920544915501184285616821911591488118127613232148375group into r48;
    is.eq r0 1143094124620019362801690786540167125253195133877478948853542135418239420026group into r49;
    is.eq r0 7007763173785343871710031274263443165624467260831126471228488725582119067464group into r50;
    is.eq r0 2757649494998784362487607068795090151060094430862060013117486370892407475872group into r51;
    is.eq r0 384468951831635766042121102051482158488833515540324150349398683374546973841group into r52;
    ternary r52 51u8 255u8 into r53;
    ternary r51 50u8 r53 into r54;
    ternary r50 49u8 r54 into r55;
    ternary r49 48u8 r55 into r56;
    ternary r48 47u8 r56 into r57;
    ternary r47 46u8 r57 into r58;
    ternary r46 45u8 r58 into r59;
    ternary r45 44u8 r59 into r60;
    ternary r44 43u8 r60 into r61;
    ternary r43 42u8 r61 into r62;
    ternary r42 41u8 r62 into r63;
    ternary r41 40u8 r63 into r64;
    ternary r40 39u8 r64 into r65;
    ternary r39 38u8 r65 into r66;
    ternary r38 37u8 r66 into r67;
    ternary r37 36u8 r67 into r68;
    ternary r36 35u8 r68 into r69;
    ternary r35 34u8 r69 into r70;
    ternary r34 33u8 r70 into r71;
    ternary r33 32u8 r71 into r72;
    ternary r32 31u8 r72 into r73;
    ternary r31 30u8 r73 into r74;
    ternary r30 29u8 r74 into r75;
    ternary r29 28u8 r75 into r76;
    ternary r28 27u8 r76 into r77;
    ternary r27 26u8 r77 into r78;
    ternary r26 25u8 r78 into r79;
    ternary r25 24u8 r79 into r80;
    ternary r24 23u8 r80 into r81;
    ternary r23 22u8 r81 into r82;
    ternary r22 21u8 r82 into r83;
    ternary r21 20u8 r83 into r84;
    ternary r20 19u8 r84 into r85;
    ternary r19 18u8 r85 into r86;
    ternary r18 17u8 r86 into r87;
    ternary r17 16u8 r87 into r88;
    ternary r16 15u8 r88 into r89;
    ternary r15 14u8 r89 into r90;
    ternary r14 13u8 r90 into r91;
    ternary r13 12u8 r91 into r92;
    ternary r12 11u8 r92 into r93;
    ternary r11 10u8 r93 into r94;
    ternary r10 9u8 r94 into r95;
    ternary r9 8u8 r95 into r96;
    ternary r8 7u8 r96 into r97;
    ternary r7 6u8 r97 into r98;
    ternary r6 5u8 r98 into r99;
    ternary r5 4u8 r99 into r100;
    ternary r4 3u8 r100 into r101;
    ternary r3 2u8 r101 into r102;
    ternary r2 1u8 r102 into r103;
    ternary r1 0u8 r103 into r104;
    output r104 as u8.private;

function initialize_deck:
    cast 3392012154874767444390854442581401347320006388280860477416992940917834133204group 953837357282233899777406715922041736543584492243798018823707163613883403305group 6503556439073140634255328851004020375988588285117004815850870964647979670801group 4040370612500610221777198550792796340689726127862698147859453241435813496555group 4689012369537731665571619722342779086085568448491931773632128385304305146591group 4564182371848555043448605710892638686898978892232764174696405125645002636892group 848126127764798815395851329986443466870492828017195270577280501362600596232group 4875508548683051861369016473179226989952214385529375166281154539937500606555group 1307424191011013766837953062155149597157177264766654621249971211137776627776group 2475994602664962266756667132155508498054911494175316888289829855632352425318group 7333395623938633557381101554755437926891822638096151444220267404139851657683group 6473121016241629652244430974108156486886950414052381380540894241576199989567group 6928183199867526721309069200448948231208367715458658241134012999226320143515group 997835157439367216687041376932333011287683250312848736035528408867625098690group 4931066445063509285303023934501204679980414117886975320136931557257838912789group 7371413847444022308501183155709846522350036811800322930988624184856688555262group 6596893852124345789541858079054907799475032635539042423874566179762387221005group 45720702652254904702174525760216840726914384953104904393175230916343809475group 8363084731140527817500138544608897783201649192473721603009510267430336298880group 7172476837158935739349179769443960485718101524505992399699591044794531113147group 1949222471841624545633227100482027253884933553499848610714333721577740530682group 6587717055688278083734996003490128737632087526660617125982739514042331681261group 175874032145749244558212372198698411856155472470324248160921859540104675272group 5976980054529650861547342139369208609842040837060797272697925484538579905159group 6700140854655564196552936260748137705957750926967052515752686368821034230216group 2592059507568441023554962175546075515803412500073017142859302543921458723274group into r0 as [group; 26u32];
    cast 6878312047072830493888039031148330844202030234907877578771631741400625208356group 3495212888076629853377374366431366392546450900999669193648473960860759205543group 4901933502741198468488906755140045593182694538935177424314296229429318492290group 3736720964731874519320179158933533506906118545981837489890844485863413322798group 1069760177477681738053434763908141327746517176955610093065097190657142339305group 835210928718337121356339527884471364306201661209646115350676550022019111493group 1560152196841817736150874178480744457479533980124406186819116737725883005803group 351156628414325642260994558025276090057514773666718404413256839900319521832group 2041682244694582766700546992703295756304965059428307282181780354053353516082group 7360910086480642948841155583263683414366927264578201625599710080651290677744group 6661196127341228406520545310547787662086532528315939893496339602964162178270group 5581228021030379812699262476128936486568523895136576162367638385826964300920group 6230506708580841807569793908528107482901522201584381459792476544640849222703group 2490388774184430533384109970525375075707135256961862428543577625663648962502group 498758631189255541107618257749715938228838066931729403362137033946991420285group 1080476013374569648679913887802623512270852165650911533859825004998447206461group 1012365865694281142757032125447143888174015355627356030301855259505511893272group 1880664096438921970340353578586088114808693735114893243748579897130706741069group 935088489894348138363782107960211481518684482132038122613177396990722623866group 2052995156958665242518879510142190853046693794655122023238615949622157679751group 359173673537719068741336690297714055728937013861116947102078534249091563078group 2928991025219335977220996920544915501184285616821911591488118127613232148375group 1143094124620019362801690786540167125253195133877478948853542135418239420026group 7007763173785343871710031274263443165624467260831126471228488725582119067464group 2757649494998784362487607068795090151060094430862060013117486370892407475872group 384468951831635766042121102051482158488833515540324150349398683374546973841group into r1 as [group; 26u32];
    cast r0 r1 into r2 as [[group; 26u32]; 2u32];
    output r2 as [[group; 26u32]; 2u32].private;

function verify_permutation:
    input r0 as [[group; 26u32]; 2u32].private;
    input r1 as [[group; 26u32]; 2u32].private;
    cast r0[0u32][0u32] into r2 as field;
    mul 1field r2 into r3;
    cast r0[0u32][1u32] into r4 as field;
    mul r3 r4 into r5;
    cast r0[0u32][2u32] into r6 as field;
    mul r5 r6 into r7;
    cast r0[0u32][3u32] into r8 as field;
    mul r7 r8 into r9;
    cast r0[0u32][4u32] into r10 as field;
    mul r9 r10 into r11;
    cast r0[0u32][5u32] into r12 as field;
    mul r11 r12 into r13;
    cast r0[0u32][6u32] into r14 as field;
    mul r13 r14 into r15;
    cast r0[0u32][7u32] into r16 as field;
    mul r15 r16 into r17;
    cast r0[0u32][8u32] into r18 as field;
    mul r17 r18 into r19;
    cast r0[0u32][9u32] into r20 as field;
    mul r19 r20 into r21;
    cast r0[0u32][10u32] into r22 as field;
    mul r21 r22 into r23;
    cast r0[0u32][11u32] into r24 as field;
    mul r23 r24 into r25;
    cast r0[0u32][12u32] into r26 as field;
    mul r25 r26 into r27;
    cast r0[0u32][13u32] into r28 as field;
    mul r27 r28 into r29;
    cast r0[0u32][14u32] into r30 as field;
    mul r29 r30 into r31;
    cast r0[0u32][15u32] into r32 as field;
    mul r31 r32 into r33;
    cast r0[0u32][16u32] into r34 as field;
    mul r33 r34 into r35;
    cast r0[0u32][17u32] into r36 as field;
    mul r35 r36 into r37;
    cast r0[0u32][18u32] into r38 as field;
    mul r37 r38 into r39;
    cast r0[0u32][19u32] into r40 as field;
    mul r39 r40 into r41;
    cast r0[0u32][20u32] into r42 as field;
    mul r41 r42 into r43;
    cast r0[0u32][21u32] into r44 as field;
    mul r43 r44 into r45;
    cast r0[0u32][22u32] into r46 as field;
    mul r45 r46 into r47;
    cast r0[0u32][23u32] into r48 as field;
    mul r47 r48 into r49;
    cast r0[0u32][24u32] into r50 as field;
    mul r49 r50 into r51;
    cast r0[0u32][25u32] into r52 as field;
    mul r51 r52 into r53;
    cast r0[1u32][0u32] into r54 as field;
    mul r53 r54 into r55;
    cast r0[1u32][1u32] into r56 as field;
    mul r55 r56 into r57;
    cast r0[1u32][2u32] into r58 as field;
    mul r57 r58 into r59;
    cast r0[1u32][3u32] into r60 as field;
    mul r59 r60 into r61;
    cast r0[1u32][4u32] into r62 as field;
    mul r61 r62 into r63;
    cast r0[1u32][5u32] into r64 as field;
    mul r63 r64 into r65;
    cast r0[1u32][6u32] into r66 as field;
    mul r65 r66 into r67;
    cast r0[1u32][7u32] into r68 as field;
    mul r67 r68 into r69;
    cast r0[1u32][8u32] into r70 as field;
    mul r69 r70 into r71;
    cast r0[1u32][9u32] into r72 as field;
    mul r71 r72 into r73;
    cast r0[1u32][10u32] into r74 as field;
    mul r73 r74 into r75;
    cast r0[1u32][11u32] into r76 as field;
    mul r75 r76 into r77;
    cast r0[1u32][12u32] into r78 as field;
    mul r77 r78 into r79;
    cast r0[1u32][13u32] into r80 as field;
    mul r79 r80 into r81;
    cast r0[1u32][14u32] into r82 as field;
    mul r81 r82 into r83;
    cast r0[1u32][15u32] into r84 as field;
    mul r83 r84 into r85;
    cast r0[1u32][16u32] into r86 as field;
    mul r85 r86 into r87;
    cast r0[1u32][17u32] into r88 as field;
    mul r87 r88 into r89;
    cast r0[1u32][18u32] into r90 as field;
    mul r89 r90 into r91;
    cast r0[1u32][19u32] into r92 as field;
    mul r91 r92 into r93;
    cast r0[1u32][20u32] into r94 as field;
    mul r93 r94 into r95;
    cast r0[1u32][21u32] into r96 as field;
    mul r95 r96 into r97;
    cast r0[1u32][22u32] into r98 as field;
    mul r97 r98 into r99;
    cast r0[1u32][23u32] into r100 as field;
    mul r99 r100 into r101;
    cast r0[1u32][24u32] into r102 as field;
    mul r101 r102 into r103;
    cast r0[1u32][25u32] into r104 as field;
    mul r103 r104 into r105;
    cast r1[0u32][0u32] into r106 as field;
    mul 1field r106 into r107;
    cast r1[0u32][1u32] into r108 as field;
    mul r107 r108 into r109;
    cast r1[0u32][2u32] into r110 as field;
    mul r109 r110 into r111;
    cast r1[0u32][3u32] into r112 as field;
    mul r111 r112 into r113;
    cast r1[0u32][4u32] into r114 as field;
    mul r113 r114 into r115;
    cast r1[0u32][5u32] into r116 as field;
    mul r115 r116 into r117;
    cast r1[0u32][6u32] into r118 as field;
    mul r117 r118 into r119;
    cast r1[0u32][7u32] into r120 as field;
    mul r119 r120 into r121;
    cast r1[0u32][8u32] into r122 as field;
    mul r121 r122 into r123;
    cast r1[0u32][9u32] into r124 as field;
    mul r123 r124 into r125;
    cast r1[0u32][10u32] into r126 as field;
    mul r125 r126 into r127;
    cast r1[0u32][11u32] into r128 as field;
    mul r127 r128 into r129;
    cast r1[0u32][12u32] into r130 as field;
    mul r129 r130 into r131;
    cast r1[0u32][13u32] into r132 as field;
    mul r131 r132 into r133;
    cast r1[0u32][14u32] into r134 as field;
    mul r133 r134 into r135;
    cast r1[0u32][15u32] into r136 as field;
    mul r135 r136 into r137;
    cast r1[0u32][16u32] into r138 as field;
    mul r137 r138 into r139;
    cast r1[0u32][17u32] into r140 as field;
    mul r139 r140 into r141;
    cast r1[0u32][18u32] into r142 as field;
    mul r141 r142 into r143;
    cast r1[0u32][19u32] into r144 as field;
    mul r143 r144 into r145;
    cast r1[0u32][20u32] into r146 as field;
    mul r145 r146 into r147;
    cast r1[0u32][21u32] into r148 as field;
    mul r147 r148 into r149;
    cast r1[0u32][22u32] into r150 as field;
    mul r149 r150 into r151;
    cast r1[0u32][23u32] into r152 as field;
    mul r151 r152 into r153;
    cast r1[0u32][24u32] into r154 as field;
    mul r153 r154 into r155;
    cast r1[0u32][25u32] into r156 as field;
    mul r155 r156 into r157;
    cast r1[1u32][0u32] into r158 as field;
    mul r157 r158 into r159;
    cast r1[1u32][1u32] into r160 as field;
    mul r159 r160 into r161;
    cast r1[1u32][2u32] into r162 as field;
    mul r161 r162 into r163;
    cast r1[1u32][3u32] into r164 as field;
    mul r163 r164 into r165;
    cast r1[1u32][4u32] into r166 as field;
    mul r165 r166 into r167;
    cast r1[1u32][5u32] into r168 as field;
    mul r167 r168 into r169;
    cast r1[1u32][6u32] into r170 as field;
    mul r169 r170 into r171;
    cast r1[1u32][7u32] into r172 as field;
    mul r171 r172 into r173;
    cast r1[1u32][8u32] into r174 as field;
    mul r173 r174 into r175;
    cast r1[1u32][9u32] into r176 as field;
    mul r175 r176 into r177;
    cast r1[1u32][10u32] into r178 as field;
    mul r177 r178 into r179;
    cast r1[1u32][11u32] into r180 as field;
    mul r179 r180 into r181;
    cast r1[1u32][12u32] into r182 as field;
    mul r181 r182 into r183;
    cast r1[1u32][13u32] into r184 as field;
    mul r183 r184 into r185;
    cast r1[1u32][14u32] into r186 as field;
    mul r185 r186 into r187;
    cast r1[1u32][15u32] into r188 as field;
    mul r187 r188 into r189;
    cast r1[1u32][16u32] into r190 as field;
    mul r189 r190 into r191;
    cast r1[1u32][17u32] into r192 as field;
    mul r191 r192 into r193;
    cast r1[1u32][18u32] into r194 as field;
    mul r193 r194 into r195;
    cast r1[1u32][19u32] into r196 as field;
    mul r195 r196 into r197;
    cast r1[1u32][20u32] into r198 as field;
    mul r197 r198 into r199;
    cast r1[1u32][21u32] into r200 as field;
    mul r199 r200 into r201;
    cast r1[1u32][22u32] into r202 as field;
    mul r201 r202 into r203;
    cast r1[1u32][23u32] into r204 as field;
    mul r203 r204 into r205;
    cast r1[1u32][24u32] into r206 as field;
    mul r205 r206 into r207;
    cast r1[1u32][25u32] into r208 as field;
    mul r207 r208 into r209;
    assert.eq r105 r209;

constructor:
    assert.eq edition 0u16;
