program zk_deck_shuffle.aleo;

function foo:

closure setup_shuffle:
    input r0 as i8;
    input r1 as [[u32; 26u32]; 2u32];
    abs r0 into r2;
    lt r0 0i8 into r3;
    not r3 into r4;
    ternary r3 r2 r2 into r5;
    ternary r3 r1[0u32][0u32] r1[1u32][0u32] into r6;
    ternary r3 r1[0u32][1u32] r1[1u32][1u32] into r7;
    ternary r3 r1[0u32][2u32] r1[1u32][2u32] into r8;
    ternary r3 r1[0u32][3u32] r1[1u32][3u32] into r9;
    ternary r3 r1[0u32][4u32] r1[1u32][4u32] into r10;
    ternary r3 r1[0u32][5u32] r1[1u32][5u32] into r11;
    ternary r3 r1[0u32][6u32] r1[1u32][6u32] into r12;
    ternary r3 r1[0u32][7u32] r1[1u32][7u32] into r13;
    ternary r3 r1[0u32][8u32] r1[1u32][8u32] into r14;
    ternary r3 r1[0u32][9u32] r1[1u32][9u32] into r15;
    ternary r3 r1[0u32][10u32] r1[1u32][10u32] into r16;
    ternary r3 r1[0u32][11u32] r1[1u32][11u32] into r17;
    ternary r3 r1[0u32][12u32] r1[1u32][12u32] into r18;
    ternary r3 r1[0u32][13u32] r1[1u32][13u32] into r19;
    ternary r3 r1[0u32][14u32] r1[1u32][14u32] into r20;
    ternary r3 r1[0u32][15u32] r1[1u32][15u32] into r21;
    ternary r3 r1[0u32][16u32] r1[1u32][16u32] into r22;
    ternary r3 r1[0u32][17u32] r1[1u32][17u32] into r23;
    ternary r3 r1[0u32][18u32] r1[1u32][18u32] into r24;
    ternary r3 r1[0u32][19u32] r1[1u32][19u32] into r25;
    ternary r3 r1[0u32][20u32] r1[1u32][20u32] into r26;
    ternary r3 r1[0u32][21u32] r1[1u32][21u32] into r27;
    ternary r3 r1[0u32][22u32] r1[1u32][22u32] into r28;
    ternary r3 r1[0u32][23u32] r1[1u32][23u32] into r29;
    ternary r3 r1[0u32][24u32] r1[1u32][24u32] into r30;
    ternary r3 r1[0u32][25u32] r1[1u32][25u32] into r31;
    cast  r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 into r32 as [u32; 26u32];
    ternary r3 r1[1u32][0u32] r1[0u32][0u32] into r33;
    ternary r3 r1[1u32][1u32] r1[0u32][1u32] into r34;
    ternary r3 r1[1u32][2u32] r1[0u32][2u32] into r35;
    ternary r3 r1[1u32][3u32] r1[0u32][3u32] into r36;
    ternary r3 r1[1u32][4u32] r1[0u32][4u32] into r37;
    ternary r3 r1[1u32][5u32] r1[0u32][5u32] into r38;
    ternary r3 r1[1u32][6u32] r1[0u32][6u32] into r39;
    ternary r3 r1[1u32][7u32] r1[0u32][7u32] into r40;
    ternary r3 r1[1u32][8u32] r1[0u32][8u32] into r41;
    ternary r3 r1[1u32][9u32] r1[0u32][9u32] into r42;
    ternary r3 r1[1u32][10u32] r1[0u32][10u32] into r43;
    ternary r3 r1[1u32][11u32] r1[0u32][11u32] into r44;
    ternary r3 r1[1u32][12u32] r1[0u32][12u32] into r45;
    ternary r3 r1[1u32][13u32] r1[0u32][13u32] into r46;
    ternary r3 r1[1u32][14u32] r1[0u32][14u32] into r47;
    ternary r3 r1[1u32][15u32] r1[0u32][15u32] into r48;
    ternary r3 r1[1u32][16u32] r1[0u32][16u32] into r49;
    ternary r3 r1[1u32][17u32] r1[0u32][17u32] into r50;
    ternary r3 r1[1u32][18u32] r1[0u32][18u32] into r51;
    ternary r3 r1[1u32][19u32] r1[0u32][19u32] into r52;
    ternary r3 r1[1u32][20u32] r1[0u32][20u32] into r53;
    ternary r3 r1[1u32][21u32] r1[0u32][21u32] into r54;
    ternary r3 r1[1u32][22u32] r1[0u32][22u32] into r55;
    ternary r3 r1[1u32][23u32] r1[0u32][23u32] into r56;
    ternary r3 r1[1u32][24u32] r1[0u32][24u32] into r57;
    ternary r3 r1[1u32][25u32] r1[0u32][25u32] into r58;
    cast  r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 r55 r56 r57 r58 into r59 as [u32; 26u32];
    output r5 as i8;
    output r32 as [u32; 26u32];
    output r59 as [u32; 26u32];
