import commutative_encryption.aleo;
program mental_poker.aleo;

record Keys:
    owner as address.private;
    secret as scalar.private;
    secret_inv as scalar.private;

struct Game:
    player1 as address;
    player2 as address;
    player3 as address;
    buy_in as u64;
    state as u8;
    dealer_button as u8;
    players_out as u8;
    players_folded as u8;
    last_bet as u8;
    sb as u16;
    bb as u16;
    remaining_hands as u8;
    hands_played as u8;
    last_raise_size as u16;

struct Chips:
    player1 as u16;
    player2 as u16;
    player3 as u16;
    player1_bet as u16;
    player2_bet as u16;
    player3_bet as u16;

struct Cards:
    player1 as [group; 2u32];
    player2 as [group; 2u32];
    player3 as [group; 2u32];
    flop as [group; 3u32];
    turn as group;
    river as group;

struct RevealedCards:
    player1 as [u8; 2u32];
    player2 as [u8; 2u32];
    player3 as [u8; 2u32];
    flop as [u8; 3u32];
    turn as u8;
    river as u8;

mapping games:
    key as u32.public;
    value as Game.public;

mapping decks:
    key as u32.public;
    value as [group; 52u32].public;

mapping chips:
    key as u32.public;
    value as Chips.public;

mapping cards:
    key as u32.public;
    value as Cards.public;

mapping revealed_cards:
    key as u32.public;
    value as RevealedCards.public;

function create_game:
    input r0 as u32.private;
    input r1 as [group; 52u32].private;
    input r2 as scalar.private;
    input r3 as scalar.private;
    call commutative_encryption.aleo/initialize_deck into r4;
    call commutative_encryption.aleo/verify_permutation r4 r1;
    call commutative_encryption.aleo/encrypt_deck r2 r1 into r5;
    call commutative_encryption.aleo/decrypt_card r3 r5[0u32] into r6;
    assert.eq r6 r1[0u32];
    cast self.signer r2 r3 into r7 as Keys.record;
    async create_game r0 r5 self.signer into r8;
    output r7 as Keys.record;
    output r8 as mental_poker.aleo/create_game.future;

finalize create_game:
    input r0 as u32.public;
    input r1 as [group; 52u32].public;
    input r2 as address.public;
    cast r2 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc 10u64 0u8 1u8 0u8 0u8 0u8 5u16 10u16 10u8 0u8 0u16 into r3 as Game;
    set r3 into games[r0];
    set r1 into decks[r0];

function join_game:
    input r0 as u32.private;
    input r1 as [group; 52u32].private;
    input r2 as [group; 52u32].private;
    input r3 as scalar.private;
    input r4 as scalar.private;
    call commutative_encryption.aleo/verify_permutation r1 r2;
    call commutative_encryption.aleo/encrypt_deck r3 r2 into r5;
    call commutative_encryption.aleo/decrypt_card r4 r5[0u32] into r6;
    assert.eq r6 r2[0u32];
    cast self.signer r3 r4 into r7 as Keys.record;
    async join_game r0 r1 r5 self.signer into r8;
    output r7 as Keys.record;
    output r8 as mental_poker.aleo/join_game.future;

finalize join_game:
    input r0 as u32.public;
    input r1 as [group; 52u32].public;
    input r2 as [group; 52u32].public;
    input r3 as address.public;
    get games[r0] into r4;
    get decks[r0] into r5;
    is.eq r5 r1 into r6;
    assert.eq r6 true;
    is.eq r4.state 0u8 into r7;
    is.eq r4.state 1u8 into r8;
    or r7 r8 into r9;
    assert.eq r9 true;
    ternary r7 r3 r4.player2 into r10;
    not r7 into r11;
    ternary r11 r3 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r12;
    ternary r7 1u8 2u8 into r13;
    cast r4.player1 r10 r12 r4.buy_in r13 r4.dealer_button 0u8 0u8 0u8 r4.sb r4.bb r4.remaining_hands 0u8 0u16 into r14 as Game;
    set r14 into games[r0];
    set r2 into decks[r0];
    branch.eq r11 false to end_then_0_0;
    sub 1000u16 r4.sb into r15;
    sub 1000u16 r4.bb into r16;
    cast r15 r16 1000u16 r4.sb r4.bb 0u16 into r17 as Chips;
    cast r2[0u32] r2[3u32] into r18 as [group; 2u32];
    cast r2[1u32] r2[4u32] into r19 as [group; 2u32];
    cast r2[2u32] r2[5u32] into r20 as [group; 2u32];
    cast r2[7u32] r2[8u32] r2[9u32] into r21 as [group; 3u32];
    cast r18 r19 r20 r21 r2[11u32] r2[13u32] into r22 as Cards;
    cast 255u8 255u8 into r23 as [u8; 2u32];
    cast 255u8 255u8 255u8 into r24 as [u8; 3u32];
    cast r23 r23 r23 r24 255u8 255u8 into r25 as RevealedCards;
    set r17 into chips[r0];
    set r22 into cards[r0];
    set r25 into revealed_cards[r0];
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;

function bet:
    input r0 as u32.private;
    input r1 as u16.private;
    async bet r0 r1 self.signer into r2;
    output r2 as mental_poker.aleo/bet.future;

finalize bet:
    input r0 as u32.public;
    input r1 as u16.public;
    input r2 as address.public;
    get games[r0] into r3;
    get chips[r0] into r4;
    is.eq r3.player1 r2 into r5;
    is.eq r3.state 5u8 into r6;
    is.eq r3.state 11u8 into r7;
    or r6 r7 into r8;
    is.eq r3.state 17u8 into r9;
    or r8 r9 into r10;
    is.eq r3.state 23u8 into r11;
    or r10 r11 into r12;
    and r5 r12 into r13;
    is.eq r3.player2 r2 into r14;
    is.eq r3.state 6u8 into r15;
    is.eq r3.state 12u8 into r16;
    or r15 r16 into r17;
    is.eq r3.state 18u8 into r18;
    or r17 r18 into r19;
    is.eq r3.state 24u8 into r20;
    or r19 r20 into r21;
    and r14 r21 into r22;
    is.eq r3.player3 r2 into r23;
    is.eq r3.state 7u8 into r24;
    is.eq r3.state 13u8 into r25;
    or r24 r25 into r26;
    is.eq r3.state 19u8 into r27;
    or r26 r27 into r28;
    is.eq r3.state 25u8 into r29;
    or r28 r29 into r30;
    and r23 r30 into r31;
    or r13 r22 into r32;
    or r32 r31 into r33;
    assert.eq r33 true;
    ternary r22 r4.player2 r4.player3 into r34;
    ternary r22 r4.player2_bet r4.player3_bet into r35;
    ternary r13 r4.player1 r34 into r36;
    ternary r13 r4.player1_bet r35 into r37;
    gte r4.player1_bet r4.player2_bet into r38;
    gte r4.player1_bet r4.player3_bet into r39;
    and r38 r39 into r40;
    gte r4.player2_bet r4.player3_bet into r41;
    ternary r41 r4.player2_bet r4.player3_bet into r42;
    ternary r40 r4.player1_bet r42 into r43;
    is.eq r43 0u16 into r44;
    is.eq r3.last_raise_size 0u16 into r45;
    ternary r45 r3.bb r3.last_raise_size into r46;
    ternary r44 r3.bb r46 into r47;
    add r43 r47 into r48;
    sub r43 r37 into r49;
    ternary r44 r3.bb r49 into r50;
    is.eq r1 r36 into r51;
    gte r1 r50 into r52;
    or r51 r52 into r53;
    assert.eq r53 true;
    add r37 r1 into r54;
    sub r36 r1 into r55;
    is.eq r55 0u16 into r56;
    gte r54 r48 into r57;
    gt r54 r43 into r58;
    not r57 into r59;
    and r58 r59 into r60;
    and r60 r56 into r61;
    is.eq r4.player1 0u16 into r62;
    and r3.players_folded 1u8 into r63;
    is.neq r63 0u8 into r64;
    or r62 r64 into r65;
    and r3.players_out 1u8 into r66;
    is.neq r66 0u8 into r67;
    or r65 r67 into r68;
    is.eq r4.player2 0u16 into r69;
    and r3.players_folded 2u8 into r70;
    is.neq r70 0u8 into r71;
    or r69 r71 into r72;
    and r3.players_out 2u8 into r73;
    is.neq r73 0u8 into r74;
    or r72 r74 into r75;
    is.eq r4.player3 0u16 into r76;
    and r3.players_folded 4u8 into r77;
    is.neq r77 0u8 into r78;
    or r76 r78 into r79;
    and r3.players_out 4u8 into r80;
    is.neq r80 0u8 into r81;
    or r79 r81 into r82;
    not r68 into r83;
    cast r83 into r84 as u8;
    not r75 into r85;
    cast r85 into r86 as u8;
    add r84 r86 into r87;
    not r82 into r88;
    cast r88 into r89 as u8;
    add r87 r89 into r90;
    gt r90 1u8 into r91;
    is.eq r90 1u8 into r92;
    lt r37 r43 into r93;
    and r92 r93 into r94;
    or r91 r94 into r95;
    assert.eq r95 true;
    cast r56 into r96 as u8;
    sub r90 r96 into r97;
    is.eq r4.player1 0u16 into r98;
    lt r4.player1_bet r43 into r99;
    and r98 r99 into r100;
    is.eq r4.player2 0u16 into r101;
    lt r4.player2_bet r43 into r102;
    and r101 r102 into r103;
    or r100 r103 into r104;
    is.eq r4.player3 0u16 into r105;
    lt r4.player3_bet r43 into r106;
    and r105 r106 into r107;
    or r104 r107 into r108;
    and r3.last_bet 1u8 into r109;
    is.neq r109 0u8 into r110;
    and r13 r110 into r111;
    and r3.last_bet 2u8 into r112;
    is.neq r112 0u8 into r113;
    and r22 r113 into r114;
    or r111 r114 into r115;
    and r3.last_bet 4u8 into r116;
    is.neq r116 0u8 into r117;
    and r31 r117 into r118;
    or r115 r118 into r119;
    is.eq r54 r43 into r120;
    is.eq r4.player1_bet r43 into r121;
    ternary r13 r120 r121 into r122;
    or r68 r122 into r123;
    is.eq r4.player2_bet r43 into r124;
    ternary r22 r120 r124 into r125;
    or r75 r125 into r126;
    is.eq r4.player3_bet r43 into r127;
    ternary r31 r120 r127 into r128;
    or r82 r128 into r129;
    and r123 r126 into r130;
    and r130 r129 into r131;
    lte r97 1u8 into r132;
    gte r54 r43 into r133;
    and r133 r131 into r134;
    lte r3.state 7u8 into r135;
    gte r3.state 11u8 into r136;
    lte r3.state 13u8 into r137;
    and r136 r137 into r138;
    gte r3.state 17u8 into r139;
    lte r3.state 19u8 into r140;
    and r139 r140 into r141;
    and r3.players_out 1u8 into r142;
    is.neq r142 0u8 into r143;
    and r3.players_out 2u8 into r144;
    is.neq r144 0u8 into r145;
    ternary r145 10u8 9u8 into r146;
    ternary r143 r146 8u8 into r147;
    ternary r145 16u8 15u8 into r148;
    ternary r143 r148 14u8 into r149;
    ternary r145 22u8 21u8 into r150;
    ternary r143 r150 20u8 into r151;
    ternary r75 28u8 27u8 into r152;
    ternary r68 r152 26u8 into r153;
    ternary r141 r151 r153 into r154;
    ternary r138 r149 r154 into r155;
    ternary r135 r147 r155 into r156;
    ternary r141 17u8 23u8 into r157;
    ternary r138 11u8 r157 into r158;
    ternary r135 5u8 r158 into r159;
    ternary r75 2u8 1u8 into r160;
    ternary r82 0u8 2u8 into r161;
    ternary r68 1u8 0u8 into r162;
    ternary r22 r161 r162 into r163;
    ternary r13 r160 r163 into r164;
    add r159 r164 into r165;
    is.eq r3.last_bet 0u8 into r166;
    or r119 r166 into r167;
    or r167 r61 into r168;
    and r108 r59 into r169;
    and r169 r119 into r170;
    or r168 r170 into r171;
    and r134 r171 into r172;
    or r132 r172 into r173;
    ternary r173 r156 r165 into r174;
    ternary r22 2u8 4u8 into r175;
    ternary r13 1u8 r175 into r176;
    ternary r57 r176 r3.last_bet into r177;
    add r4.player1_bet r4.player2_bet into r178;
    add r178 r4.player3_bet into r179;
    add r179 r1 into r180;
    ternary r13 r55 r4.player1 into r181;
    ternary r22 r55 r4.player2 into r182;
    ternary r31 r55 r4.player3 into r183;
    ternary r13 r54 r4.player1_bet into r184;
    ternary r22 r54 r4.player2_bet into r185;
    ternary r31 r54 r4.player3_bet into r186;
    cast r181 r182 r183 r184 r185 r186 into r187 as Chips;
    sub r54 r43 into r188;
    ternary r57 r188 r3.last_raise_size into r189;
    cast r3.player1 r3.player2 r3.player3 r3.buy_in r174 r3.dealer_button r3.players_out r3.players_folded r177 r3.sb r3.bb r3.remaining_hands r3.hands_played r189 into r190 as Game;
    set r187 into chips[r0];
    set r190 into games[r0];

function decrypt_hands:
    input r0 as u32.private;
    input r1 as [group; 2u32].private;
    input r2 as [group; 2u32].private;
    input r3 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r1[0u32] into r4;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r1[1u32] into r5;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r2[0u32] into r6;
    call commutative_encryption.aleo/decrypt_card r3.secret_inv r2[1u32] into r7;
    cast r4 r5 into r8 as [group; 2u32];
    cast r6 r7 into r9 as [group; 2u32];
    async decrypt_hands r0 r1 r2 r8 r9 self.signer into r10;
    cast r3.owner r3.secret r3.secret_inv into r11 as Keys.record;
    output r11 as Keys.record;
    output r10 as mental_poker.aleo/decrypt_hands.future;

finalize decrypt_hands:
    input r0 as u32.public;
    input r1 as [group; 2u32].public;
    input r2 as [group; 2u32].public;
    input r3 as [group; 2u32].public;
    input r4 as [group; 2u32].public;
    input r5 as address.public;
    get cards[r0] into r6;
    get games[r0] into r7;
    is.eq r7.player1 r5 into r8;
    is.eq r7.state 2u8 into r9;
    and r8 r9 into r10;
    is.eq r7.player2 r5 into r11;
    is.eq r7.state 3u8 into r12;
    and r11 r12 into r13;
    is.eq r7.player3 r5 into r14;
    is.eq r7.state 4u8 into r15;
    and r14 r15 into r16;
    or r10 r13 into r17;
    or r17 r16 into r18;
    assert.eq r18 true;
    is.eq r6.player2 r1 into r19;
    and r10 r19 into r20;
    is.eq r6.player3 r2 into r21;
    and r20 r21 into r22;
    is.eq r6.player1 r1 into r23;
    and r13 r23 into r24;
    is.eq r6.player3 r2 into r25;
    and r24 r25 into r26;
    or r22 r26 into r27;
    is.eq r6.player1 r1 into r28;
    and r16 r28 into r29;
    is.eq r6.player2 r2 into r30;
    and r29 r30 into r31;
    or r27 r31 into r32;
    assert.eq r32 true;
    ternary r10 r6.player1[0u32] r3[0u32] into r33;
    ternary r10 r6.player1[1u32] r3[1u32] into r34;
    cast r33 r34 into r35 as [group; 2u32];
    ternary r10 r3[0u32] r4[0u32] into r36;
    ternary r10 r3[1u32] r4[1u32] into r37;
    cast r36 r37 into r38 as [group; 2u32];
    ternary r13 r6.player2[0u32] r38[0u32] into r39;
    ternary r13 r6.player2[1u32] r38[1u32] into r40;
    cast r39 r40 into r41 as [group; 2u32];
    ternary r16 r6.player3[0u32] r4[0u32] into r42;
    ternary r16 r6.player3[1u32] r4[1u32] into r43;
    cast r42 r43 into r44 as [group; 2u32];
    cast r35 r41 r44 r6.flop r6.turn r6.river into r45 as Cards;
    and r7.players_out 1u8 into r46;
    is.neq r46 0u8 into r47;
    and r7.players_out 2u8 into r48;
    is.neq r48 0u8 into r49;
    and r7.players_out 4u8 into r50;
    is.neq r50 0u8 into r51;
    and r7.players_folded 1u8 into r52;
    is.neq r52 0u8 into r53;
    and r7.players_folded 2u8 into r54;
    is.neq r54 0u8 into r55;
    and r7.players_folded 4u8 into r56;
    is.neq r56 0u8 into r57;
    and r7.dealer_button 1u8 into r58;
    is.neq r58 0u8 into r59;
    and r7.dealer_button 2u8 into r60;
    is.neq r60 0u8 into r61;
    or r47 r53 into r62;
    ternary r61 2u8 1u8 into r63;
    or r49 r55 into r64;
    ternary r59 2u8 0u8 into r65;
    or r51 r57 into r66;
    ternary r61 0u8 1u8 into r67;
    ternary r59 2u8 r67 into r68;
    ternary r66 r67 r68 into r69;
    ternary r64 r65 r69 into r70;
    ternary r62 r63 r70 into r71;
    add 5u8 r71 into r72;
    ternary r61 4u8 1u8 into r73;
    ternary r59 2u8 r73 into r74;
    ternary r49 r72 3u8 into r75;
    ternary r51 r72 4u8 into r76;
    ternary r13 r76 r72 into r77;
    ternary r10 r75 r77 into r78;
    ternary r51 r74 r7.last_bet into r79;
    ternary r13 r79 r74 into r80;
    ternary r10 r7.last_bet r80 into r81;
    cast r7.player1 r7.player2 r7.player3 r7.buy_in r78 r7.dealer_button r7.players_out r7.players_folded r81 r7.sb r7.bb r7.remaining_hands r7.hands_played r7.last_raise_size into r82 as Game;
    set r45 into cards[r0];
    set r82 into games[r0];

function decrypt_flop:
    input r0 as u32.private;
    input r1 as [group; 3u32].private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[0u32] into r3;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[1u32] into r4;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[2u32] into r5;
    cast r3 r4 r5 into r6 as [group; 3u32];
    call commutative_encryption.aleo/to_u8 r3 into r7;
    call commutative_encryption.aleo/to_u8 r4 into r8;
    call commutative_encryption.aleo/to_u8 r5 into r9;
    cast r7 r8 r9 into r10 as [u8; 3u32];
    async decrypt_flop r0 r1 r6 r10 self.signer into r11;
    cast r2.owner r2.secret r2.secret_inv into r12 as Keys.record;
    output r12 as Keys.record;
    output r11 as mental_poker.aleo/decrypt_flop.future;

finalize decrypt_flop:
    input r0 as u32.public;
    input r1 as [group; 3u32].public;
    input r2 as [group; 3u32].public;
    input r3 as [u8; 3u32].public;
    input r4 as address.public;
    get cards[r0] into r5;
    get games[r0] into r6;
    is.eq r4 r6.player1 into r7;
    is.eq r6.state 8u8 into r8;
    and r7 r8 into r9;
    is.eq r4 r6.player2 into r10;
    is.eq r6.state 9u8 into r11;
    and r10 r11 into r12;
    is.eq r4 r6.player3 into r13;
    is.eq r6.state 10u8 into r14;
    and r13 r14 into r15;
    or r9 r12 into r16;
    or r16 r15 into r17;
    assert.eq r17 true;
    assert.eq r1 r5.flop;
    cast r5.player1 r5.player2 r5.player3 r2 r5.turn r5.river into r18 as Cards;
    get revealed_cards[r0] into r19;
    cast r19.player1 r19.player2 r19.player3 r3 r19.turn r19.river into r20 as RevealedCards;
    set r20 into revealed_cards[r0];
    get chips[r0] into r21;
    is.eq r21.player1 0u16 into r22;
    and r6.players_folded 1u8 into r23;
    is.neq r23 0u8 into r24;
    or r22 r24 into r25;
    is.eq r21.player2 0u16 into r26;
    and r6.players_folded 2u8 into r27;
    is.neq r27 0u8 into r28;
    or r26 r28 into r29;
    is.eq r21.player3 0u16 into r30;
    and r6.players_folded 4u8 into r31;
    is.neq r31 0u8 into r32;
    or r30 r32 into r33;
    not r25 into r34;
    cast r34 into r35 as u8;
    not r29 into r36;
    cast r36 into r37 as u8;
    add r35 r37 into r38;
    not r33 into r39;
    cast r39 into r40 as u8;
    add r38 r40 into r41;
    lte r41 1u8 into r42;
    and r6.players_out 2u8 into r43;
    is.neq r43 0u8 into r44;
    not r44 into r45;
    ternary r45 9u8 10u8 into r46;
    and r6.players_out 4u8 into r47;
    is.neq r47 0u8 into r48;
    not r48 into r49;
    and r6.dealer_button 1u8 into r50;
    is.neq r50 0u8 into r51;
    ternary r39 13u8 11u8 into r52;
    ternary r36 12u8 r52 into r53;
    and r6.dealer_button 2u8 into r54;
    is.neq r54 0u8 into r55;
    ternary r34 11u8 12u8 into r56;
    ternary r39 13u8 r56 into r57;
    ternary r36 12u8 13u8 into r58;
    ternary r34 11u8 r58 into r59;
    ternary r55 r57 r59 into r60;
    ternary r51 r53 r60 into r61;
    ternary r42 14u8 r61 into r62;
    ternary r49 10u8 r62 into r63;
    and r6.dealer_button 1u8 into r64;
    is.neq r64 0u8 into r65;
    and r6.dealer_button 2u8 into r66;
    is.neq r66 0u8 into r67;
    ternary r67 r57 r59 into r68;
    ternary r65 r53 r68 into r69;
    ternary r42 14u8 r69 into r70;
    ternary r12 r63 r70 into r71;
    ternary r9 r46 r71 into r72;
    or r9 r12 into r73;
    and r6.dealer_button 1u8 into r74;
    is.neq r74 0u8 into r75;
    ternary r39 4u8 2u8 into r76;
    ternary r34 1u8 r76 into r77;
    and r6.dealer_button 2u8 into r78;
    is.neq r78 0u8 into r79;
    ternary r34 1u8 4u8 into r80;
    ternary r36 2u8 r80 into r81;
    ternary r36 2u8 1u8 into r82;
    ternary r39 4u8 r82 into r83;
    ternary r79 r81 r83 into r84;
    ternary r75 r77 r84 into r85;
    ternary r73 0u8 r85 into r86;
    ternary r15 0u16 r6.last_raise_size into r87;
    cast r6.player1 r6.player2 r6.player3 r6.buy_in r72 r6.dealer_button r6.players_out r6.players_folded r86 r6.sb r6.bb r6.remaining_hands r6.hands_played r87 into r88 as Game;
    set r18 into cards[r0];
    set r88 into games[r0];

function fold:
    input r0 as u32.private;
    async fold r0 self.signer into r1;
    output r1 as mental_poker.aleo/fold.future;

finalize fold:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    get chips[r0] into r3;
    gte r2.state 5u8 into r4;
    lte r2.state 7u8 into r5;
    and r4 r5 into r6;
    gte r2.state 11u8 into r7;
    lte r2.state 13u8 into r8;
    and r7 r8 into r9;
    or r6 r9 into r10;
    gte r2.state 17u8 into r11;
    lte r2.state 19u8 into r12;
    and r11 r12 into r13;
    or r10 r13 into r14;
    gte r2.state 23u8 into r15;
    lte r2.state 25u8 into r16;
    and r15 r16 into r17;
    or r14 r17 into r18;
    assert.eq r18 true;
    is.eq r2.player1 r1 into r19;
    is.eq r2.player2 r1 into r20;
    is.eq r2.player3 r1 into r21;
    or r19 r20 into r22;
    or r22 r21 into r23;
    assert.eq r23 true;
    ternary r20 2u8 4u8 into r24;
    ternary r19 1u8 r24 into r25;
    or r2.players_folded r25 into r26;
    and r26 1u8 into r27;
    is.neq r27 0u8 into r28;
    not r28 into r29;
    cast r29 into r30 as u8;
    and r26 2u8 into r31;
    is.neq r31 0u8 into r32;
    not r32 into r33;
    cast r33 into r34 as u8;
    add r30 r34 into r35;
    and r26 4u8 into r36;
    is.neq r36 0u8 into r37;
    not r37 into r38;
    cast r38 into r39 as u8;
    add r35 r39 into r40;
    is.eq r40 1u8 into r41;
    branch.eq r41 false to end_then_0_2;
    add r3.player1_bet r3.player2_bet into r42;
    add r42 r3.player3_bet into r43;
    not r28 into r44;
    add r3.player1 r43 into r45;
    ternary r44 r45 r3.player1 into r46;
    not r32 into r47;
    add r3.player2 r43 into r48;
    ternary r47 r48 r3.player2 into r49;
    not r37 into r50;
    add r3.player3 r43 into r51;
    ternary r50 r51 r3.player3 into r52;
    cast r46 r49 r52 0u16 0u16 0u16 into r53 as Chips;
    and r2.players_out 1u8 into r54;
    is.neq r54 0u8 into r55;
    not r55 into r56;
    and r2.players_out 2u8 into r57;
    is.neq r57 0u8 into r58;
    not r58 into r59;
    ternary r59 31u8 32u8 into r60;
    ternary r56 30u8 r60 into r61;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r61 r2.dealer_button r2.players_out r26 0u8 r2.sb r2.bb r2.remaining_hands r2.hands_played 0u16 into r62 as Game;
    set r53 into chips[r0];
    set r62 into games[r0];
    branch.eq true true to end_otherwise_0_3;
    position end_then_0_2;
    position end_otherwise_0_3;
    gte r3.player1_bet r3.player2_bet into r63;
    gte r3.player1_bet r3.player3_bet into r64;
    and r63 r64 into r65;
    gte r3.player2_bet r3.player3_bet into r66;
    ternary r66 r3.player2_bet r3.player3_bet into r67;
    ternary r65 r3.player1_bet r67 into r68;
    is.eq r3.player1_bet r68 into r69;
    or r28 r69 into r70;
    is.eq r3.player2_bet r68 into r71;
    or r32 r71 into r72;
    and r70 r72 into r73;
    is.eq r3.player3_bet r68 into r74;
    or r37 r74 into r75;
    and r73 r75 into r76;
    lte r2.state 7u8 into r77;
    lte r2.state 13u8 into r78;
    lte r2.state 19u8 into r79;
    ternary r79 17u8 23u8 into r80;
    ternary r78 11u8 r80 into r81;
    ternary r77 5u8 r81 into r82;
    lte r2.state 7u8 into r83;
    and r2.players_out 1u8 into r84;
    is.neq r84 0u8 into r85;
    ternary r85 9u8 8u8 into r86;
    lte r2.state 13u8 into r87;
    and r2.players_out 1u8 into r88;
    is.neq r88 0u8 into r89;
    ternary r89 15u8 14u8 into r90;
    lte r2.state 19u8 into r91;
    and r2.players_out 1u8 into r92;
    is.neq r92 0u8 into r93;
    ternary r93 21u8 20u8 into r94;
    and r2.players_out 1u8 into r95;
    is.neq r95 0u8 into r96;
    ternary r96 27u8 26u8 into r97;
    ternary r91 r94 r97 into r98;
    ternary r87 r90 r98 into r99;
    ternary r83 r86 r99 into r100;
    add r82 2u8 into r101;
    add r82 1u8 into r102;
    ternary r32 r101 r102 into r103;
    ternary r37 r82 r101 into r104;
    ternary r28 r102 r82 into r105;
    ternary r20 r104 r105 into r106;
    ternary r19 r103 r106 into r107;
    ternary r76 r100 r107 into r108;
    ternary r76 0u8 r2.last_bet into r109;
    ternary r76 0u16 r2.last_raise_size into r110;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r108 r2.dealer_button r2.players_out r26 r109 r2.sb r2.bb r2.remaining_hands r2.hands_played r110 into r111 as Game;
    set r111 into games[r0];

function decrypt_turn_river:
    input r0 as u32.private;
    input r1 as group.private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1 into r3;
    call commutative_encryption.aleo/to_u8 r3 into r4;
    async decrypt_turn_river r0 r1 r3 r4 self.signer into r5;
    cast r2.owner r2.secret r2.secret_inv into r6 as Keys.record;
    output r6 as Keys.record;
    output r5 as mental_poker.aleo/decrypt_turn_river.future;

finalize decrypt_turn_river:
    input r0 as u32.public;
    input r1 as group.public;
    input r2 as group.public;
    input r3 as u8.public;
    input r4 as address.public;
    get cards[r0] into r5;
    get games[r0] into r6;
    is.eq r4 r6.player1 into r7;
    is.eq r4 r6.player2 into r8;
    is.eq r4 r6.player3 into r9;
    is.eq r6.state 14u8 into r10;
    and r7 r10 into r11;
    is.eq r6.state 15u8 into r12;
    and r8 r12 into r13;
    is.eq r6.state 16u8 into r14;
    and r9 r14 into r15;
    is.eq r6.state 20u8 into r16;
    and r7 r16 into r17;
    is.eq r6.state 21u8 into r18;
    and r8 r18 into r19;
    is.eq r6.state 22u8 into r20;
    and r9 r20 into r21;
    or r17 r19 into r22;
    or r22 r21 into r23;
    or r11 r13 into r24;
    or r24 r15 into r25;
    or r25 r23 into r26;
    assert.eq r26 true;
    ternary r23 r5.river r5.turn into r27;
    assert.eq r1 r27;
    ternary r23 r5.turn r2 into r28;
    ternary r23 r2 r5.river into r29;
    cast r5.player1 r5.player2 r5.player3 r5.flop r28 r29 into r30 as Cards;
    or r15 r21 into r31;
    branch.eq r31 false to end_then_0_4;
    get revealed_cards[r0] into r32;
    ternary r15 r3 r32.turn into r33;
    ternary r21 r3 r32.river into r34;
    cast r32.player1 r32.player2 r32.player3 r32.flop r33 r34 into r35 as RevealedCards;
    set r35 into revealed_cards[r0];
    branch.eq true true to end_otherwise_0_5;
    position end_then_0_4;
    position end_otherwise_0_5;
    get chips[r0] into r36;
    is.eq r36.player1 0u16 into r37;
    and r6.players_folded 1u8 into r38;
    is.neq r38 0u8 into r39;
    or r37 r39 into r40;
    is.eq r36.player2 0u16 into r41;
    and r6.players_folded 2u8 into r42;
    is.neq r42 0u8 into r43;
    or r41 r43 into r44;
    is.eq r36.player3 0u16 into r45;
    and r6.players_folded 4u8 into r46;
    is.neq r46 0u8 into r47;
    or r45 r47 into r48;
    not r40 into r49;
    cast r49 into r50 as u8;
    not r44 into r51;
    cast r51 into r52 as u8;
    add r50 r52 into r53;
    not r48 into r54;
    cast r54 into r55 as u8;
    add r53 r55 into r56;
    lte r56 1u8 into r57;
    and r6.players_out 2u8 into r58;
    is.neq r58 0u8 into r59;
    not r59 into r60;
    ternary r60 15u8 16u8 into r61;
    and r6.players_out 4u8 into r62;
    is.neq r62 0u8 into r63;
    not r63 into r64;
    and r6.dealer_button 1u8 into r65;
    is.neq r65 0u8 into r66;
    ternary r54 19u8 17u8 into r67;
    ternary r51 18u8 r67 into r68;
    and r6.dealer_button 2u8 into r69;
    is.neq r69 0u8 into r70;
    ternary r49 17u8 18u8 into r71;
    ternary r54 19u8 r71 into r72;
    ternary r51 18u8 19u8 into r73;
    ternary r49 17u8 r73 into r74;
    ternary r70 r72 r74 into r75;
    ternary r66 r68 r75 into r76;
    ternary r57 20u8 r76 into r77;
    ternary r64 16u8 r77 into r78;
    and r6.dealer_button 1u8 into r79;
    is.neq r79 0u8 into r80;
    and r6.dealer_button 2u8 into r81;
    is.neq r81 0u8 into r82;
    ternary r82 r72 r74 into r83;
    ternary r80 r68 r83 into r84;
    ternary r57 20u8 r84 into r85;
    and r6.players_out 2u8 into r86;
    is.neq r86 0u8 into r87;
    not r87 into r88;
    ternary r88 21u8 22u8 into r89;
    and r6.players_out 4u8 into r90;
    is.neq r90 0u8 into r91;
    not r91 into r92;
    and r6.dealer_button 1u8 into r93;
    is.neq r93 0u8 into r94;
    ternary r54 25u8 23u8 into r95;
    ternary r51 24u8 r95 into r96;
    and r6.dealer_button 2u8 into r97;
    is.neq r97 0u8 into r98;
    ternary r49 23u8 24u8 into r99;
    ternary r54 25u8 r99 into r100;
    ternary r51 24u8 25u8 into r101;
    ternary r49 23u8 r101 into r102;
    ternary r98 r100 r102 into r103;
    ternary r94 r96 r103 into r104;
    ternary r57 26u8 r104 into r105;
    ternary r92 22u8 r105 into r106;
    and r6.dealer_button 1u8 into r107;
    is.neq r107 0u8 into r108;
    and r6.dealer_button 2u8 into r109;
    is.neq r109 0u8 into r110;
    ternary r110 r100 r102 into r111;
    ternary r108 r96 r111 into r112;
    ternary r57 26u8 r112 into r113;
    ternary r19 r106 r113 into r114;
    ternary r17 r89 r114 into r115;
    ternary r15 r85 r115 into r116;
    ternary r13 r78 r116 into r117;
    ternary r11 r61 r117 into r118;
    or r11 r13 into r119;
    or r119 r17 into r120;
    or r120 r19 into r121;
    and r6.dealer_button 1u8 into r122;
    is.neq r122 0u8 into r123;
    ternary r54 4u8 2u8 into r124;
    ternary r49 1u8 r124 into r125;
    and r6.dealer_button 2u8 into r126;
    is.neq r126 0u8 into r127;
    ternary r49 1u8 4u8 into r128;
    ternary r51 2u8 r128 into r129;
    ternary r51 2u8 1u8 into r130;
    ternary r54 4u8 r130 into r131;
    ternary r127 r129 r131 into r132;
    ternary r123 r125 r132 into r133;
    ternary r121 0u8 r133 into r134;
    ternary r31 0u16 r6.last_raise_size into r135;
    cast r6.player1 r6.player2 r6.player3 r6.buy_in r118 r6.dealer_button r6.players_out r6.players_folded r134 r6.sb r6.bb r6.remaining_hands r6.hands_played r135 into r136 as Game;
    set r30 into cards[r0];
    set r136 into games[r0];

function showdown:
    input r0 as u32.private;
    input r1 as [group; 2u32].private;
    input r2 as Keys.record;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[0u32] into r3;
    call commutative_encryption.aleo/to_u8 r3 into r4;
    call commutative_encryption.aleo/decrypt_card r2.secret_inv r1[1u32] into r5;
    call commutative_encryption.aleo/to_u8 r5 into r6;
    cast r4 r6 into r7 as [u8; 2u32];
    async showdown r0 self.signer r1 r7 into r8;
    cast r2.owner r2.secret r2.secret_inv into r9 as Keys.record;
    output r9 as Keys.record;
    output r8 as mental_poker.aleo/showdown.future;

finalize showdown:
    input r0 as u32.public;
    input r1 as address.public;
    input r2 as [group; 2u32].public;
    input r3 as [u8; 2u32].public;
    get cards[r0] into r4;
    get games[r0] into r5;
    is.eq r5.state 26u8 into r6;
    is.eq r5.state 27u8 into r7;
    is.eq r5.state 28u8 into r8;
    is.eq r1 r5.player1 into r9;
    is.eq r1 r5.player2 into r10;
    is.eq r1 r5.player3 into r11;
    ternary r11 28u8 255u8 into r12;
    ternary r10 27u8 r12 into r13;
    ternary r9 26u8 r13 into r14;
    assert.eq r5.state r14;
    ternary r7 r4.player2[0u32] r4.player3[0u32] into r15;
    ternary r7 r4.player2[1u32] r4.player3[1u32] into r16;
    cast r15 r16 into r17 as [group; 2u32];
    ternary r6 r4.player1[0u32] r17[0u32] into r18;
    ternary r6 r4.player1[1u32] r17[1u32] into r19;
    cast r18 r19 into r20 as [group; 2u32];
    assert.eq r2 r20;
    get revealed_cards[r0] into r21;
    ternary r6 r3[0u32] r21.player1[0u32] into r22;
    ternary r6 r3[1u32] r21.player1[1u32] into r23;
    cast r22 r23 into r24 as [u8; 2u32];
    ternary r7 r3[0u32] r21.player2[0u32] into r25;
    ternary r7 r3[1u32] r21.player2[1u32] into r26;
    cast r25 r26 into r27 as [u8; 2u32];
    ternary r8 r3[0u32] r21.player3[0u32] into r28;
    ternary r8 r3[1u32] r21.player3[1u32] into r29;
    cast r28 r29 into r30 as [u8; 2u32];
    cast r24 r27 r30 r21.flop r21.turn r21.river into r31 as RevealedCards;
    and r5.players_out 2u8 into r32;
    is.neq r32 0u8 into r33;
    not r33 into r34;
    and r5.players_folded 2u8 into r35;
    is.neq r35 0u8 into r36;
    not r36 into r37;
    and r34 r37 into r38;
    and r5.players_out 4u8 into r39;
    is.neq r39 0u8 into r40;
    not r40 into r41;
    and r5.players_folded 4u8 into r42;
    is.neq r42 0u8 into r43;
    not r43 into r44;
    and r41 r44 into r45;
    ternary r45 28u8 29u8 into r46;
    ternary r38 27u8 r46 into r47;
    ternary r7 r46 29u8 into r48;
    ternary r6 r47 r48 into r49;
    cast r5.player1 r5.player2 r5.player3 r5.buy_in r49 r5.dealer_button r5.players_out r5.players_folded r5.last_bet r5.sb r5.bb r5.remaining_hands r5.hands_played r5.last_raise_size into r50 as Game;
    set r31 into revealed_cards[r0];
    set r50 into games[r0];

function compare_hands:
    input r0 as u32.private;
    async compare_hands r0 self.signer into r1;
    output r1 as mental_poker.aleo/compare_hands.future;

finalize compare_hands:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    assert.eq r2.state 29u8;
    and r2.dealer_button 1u8 into r3;
    is.neq r3 0u8 into r4;
    is.eq r2.player1 r1 into r5;
    and r4 r5 into r6;
    and r2.dealer_button 2u8 into r7;
    is.neq r7 0u8 into r8;
    is.eq r2.player2 r1 into r9;
    and r8 r9 into r10;
    or r6 r10 into r11;
    and r2.dealer_button 4u8 into r12;
    is.neq r12 0u8 into r13;
    is.eq r2.player3 r1 into r14;
    and r13 r14 into r15;
    or r11 r15 into r16;
    assert.eq r16 true;
    get revealed_cards[r0] into r17;
    get chips[r0] into r18;
    and r2.players_out 1u8 into r19;
    is.neq r19 0u8 into r20;
    not r20 into r21;
    and r2.players_folded 1u8 into r22;
    is.neq r22 0u8 into r23;
    not r23 into r24;
    and r21 r24 into r25;
    and r2.players_out 2u8 into r26;
    is.neq r26 0u8 into r27;
    not r27 into r28;
    and r2.players_folded 2u8 into r29;
    is.neq r29 0u8 into r30;
    not r30 into r31;
    and r28 r31 into r32;
    and r2.players_out 4u8 into r33;
    is.neq r33 0u8 into r34;
    not r34 into r35;
    and r2.players_folded 4u8 into r36;
    is.neq r36 0u8 into r37;
    not r37 into r38;
    and r35 r38 into r39;
    div r17.flop[0u32] 13u8 into r40;
    rem r17.flop[0u32] 13u8 into r41;
    div r17.flop[1u32] 13u8 into r42;
    rem r17.flop[1u32] 13u8 into r43;
    div r17.flop[2u32] 13u8 into r44;
    rem r17.flop[2u32] 13u8 into r45;
    div r17.turn 13u8 into r46;
    rem r17.turn 13u8 into r47;
    div r17.river 13u8 into r48;
    rem r17.river 13u8 into r49;
    lt r41 r43 into r50;
    ternary r50 r40 r42 into r51;
    ternary r50 r41 r43 into r52;
    ternary r50 r42 r40 into r53;
    ternary r50 r43 r41 into r54;
    lt r54 r45 into r55;
    ternary r55 r53 r44 into r56;
    ternary r55 r54 r45 into r57;
    ternary r55 r44 r53 into r58;
    ternary r55 r45 r54 into r59;
    lt r59 r47 into r60;
    ternary r60 r58 r46 into r61;
    ternary r60 r59 r47 into r62;
    ternary r60 r46 r58 into r63;
    ternary r60 r47 r59 into r64;
    lt r64 r49 into r65;
    ternary r65 r63 r48 into r66;
    ternary r65 r64 r49 into r67;
    ternary r65 r48 r63 into r68;
    ternary r65 r49 r64 into r69;
    lt r52 r57 into r70;
    ternary r70 r51 r56 into r71;
    ternary r70 r52 r57 into r72;
    ternary r70 r56 r51 into r73;
    ternary r70 r57 r52 into r74;
    lt r74 r62 into r75;
    ternary r75 r73 r61 into r76;
    ternary r75 r74 r62 into r77;
    ternary r75 r61 r73 into r78;
    ternary r75 r62 r74 into r79;
    lt r79 r67 into r80;
    ternary r80 r78 r66 into r81;
    ternary r80 r79 r67 into r82;
    ternary r80 r66 r78 into r83;
    ternary r80 r67 r79 into r84;
    lt r84 r69 into r85;
    ternary r85 r83 r68 into r86;
    ternary r85 r84 r69 into r87;
    ternary r85 r68 r83 into r88;
    ternary r85 r69 r84 into r89;
    lt r72 r77 into r90;
    ternary r90 r71 r76 into r91;
    ternary r90 r72 r77 into r92;
    ternary r90 r76 r71 into r93;
    ternary r90 r77 r72 into r94;
    lt r94 r82 into r95;
    ternary r95 r93 r81 into r96;
    ternary r95 r94 r82 into r97;
    ternary r95 r81 r93 into r98;
    ternary r95 r82 r94 into r99;
    lt r99 r87 into r100;
    ternary r100 r98 r86 into r101;
    ternary r100 r99 r87 into r102;
    ternary r100 r86 r98 into r103;
    ternary r100 r87 r99 into r104;
    lt r104 r89 into r105;
    ternary r105 r103 r88 into r106;
    ternary r105 r104 r89 into r107;
    ternary r105 r88 r103 into r108;
    ternary r105 r89 r104 into r109;
    lt r92 r97 into r110;
    ternary r110 r91 r96 into r111;
    ternary r110 r92 r97 into r112;
    ternary r110 r96 r91 into r113;
    ternary r110 r97 r92 into r114;
    lt r114 r102 into r115;
    ternary r115 r113 r101 into r116;
    ternary r115 r114 r102 into r117;
    ternary r115 r101 r113 into r118;
    ternary r115 r102 r114 into r119;
    lt r119 r107 into r120;
    ternary r120 r118 r106 into r121;
    ternary r120 r119 r107 into r122;
    ternary r120 r106 r118 into r123;
    ternary r120 r107 r119 into r124;
    lt r124 r109 into r125;
    ternary r125 r123 r108 into r126;
    ternary r125 r124 r109 into r127;
    ternary r125 r108 r123 into r128;
    ternary r125 r109 r124 into r129;
    ternary r25 r17.player1[0u32] 0u8 into r130;
    ternary r25 r17.player1[1u32] 0u8 into r131;
    div r130 13u8 into r132;
    rem r130 13u8 into r133;
    div r131 13u8 into r134;
    rem r131 13u8 into r135;
    lt r133 r112 into r136;
    lt r133 r117 into r137;
    lt r133 r122 into r138;
    lt r133 r127 into r139;
    lt r133 r129 into r140;
    ternary r136 r132 r111 into r141;
    ternary r136 r133 r112 into r142;
    ternary r137 r132 r116 into r143;
    ternary r137 r133 r117 into r144;
    ternary r136 r111 r143 into r145;
    ternary r136 r112 r144 into r146;
    ternary r138 r132 r121 into r147;
    ternary r138 r133 r122 into r148;
    ternary r137 r116 r147 into r149;
    ternary r137 r117 r148 into r150;
    ternary r139 r132 r126 into r151;
    ternary r139 r133 r127 into r152;
    ternary r138 r121 r151 into r153;
    ternary r138 r122 r152 into r154;
    ternary r140 r132 r128 into r155;
    ternary r140 r133 r129 into r156;
    ternary r139 r126 r155 into r157;
    ternary r139 r127 r156 into r158;
    ternary r140 r128 r132 into r159;
    ternary r140 r129 r133 into r160;
    lt r135 r142 into r161;
    lt r135 r146 into r162;
    lt r135 r150 into r163;
    lt r135 r154 into r164;
    lt r135 r158 into r165;
    lt r135 r160 into r166;
    ternary r161 r134 r141 into r167;
    ternary r161 r135 r142 into r168;
    ternary r162 r134 r145 into r169;
    ternary r162 r135 r146 into r170;
    ternary r161 r141 r169 into r171;
    ternary r161 r142 r170 into r172;
    ternary r163 r134 r149 into r173;
    ternary r163 r135 r150 into r174;
    ternary r162 r145 r173 into r175;
    ternary r162 r146 r174 into r176;
    ternary r164 r134 r153 into r177;
    ternary r164 r135 r154 into r178;
    ternary r163 r149 r177 into r179;
    ternary r163 r150 r178 into r180;
    ternary r165 r134 r157 into r181;
    ternary r165 r135 r158 into r182;
    ternary r164 r153 r181 into r183;
    ternary r164 r154 r182 into r184;
    ternary r166 r134 r159 into r185;
    ternary r166 r135 r160 into r186;
    ternary r165 r157 r185 into r187;
    ternary r165 r158 r186 into r188;
    ternary r166 r159 r134 into r189;
    ternary r166 r160 r135 into r190;
    ternary r32 r17.player2[0u32] 0u8 into r191;
    ternary r32 r17.player2[1u32] 0u8 into r192;
    div r191 13u8 into r193;
    rem r191 13u8 into r194;
    div r192 13u8 into r195;
    rem r192 13u8 into r196;
    lt r194 r112 into r197;
    lt r194 r117 into r198;
    lt r194 r122 into r199;
    lt r194 r127 into r200;
    lt r194 r129 into r201;
    ternary r197 r193 r111 into r202;
    ternary r197 r194 r112 into r203;
    ternary r198 r193 r116 into r204;
    ternary r198 r194 r117 into r205;
    ternary r197 r111 r204 into r206;
    ternary r197 r112 r205 into r207;
    ternary r199 r193 r121 into r208;
    ternary r199 r194 r122 into r209;
    ternary r198 r116 r208 into r210;
    ternary r198 r117 r209 into r211;
    ternary r200 r193 r126 into r212;
    ternary r200 r194 r127 into r213;
    ternary r199 r121 r212 into r214;
    ternary r199 r122 r213 into r215;
    ternary r201 r193 r128 into r216;
    ternary r201 r194 r129 into r217;
    ternary r200 r126 r216 into r218;
    ternary r200 r127 r217 into r219;
    ternary r201 r128 r193 into r220;
    ternary r201 r129 r194 into r221;
    lt r196 r203 into r222;
    lt r196 r207 into r223;
    lt r196 r211 into r224;
    lt r196 r215 into r225;
    lt r196 r219 into r226;
    lt r196 r221 into r227;
    ternary r222 r195 r202 into r228;
    ternary r222 r196 r203 into r229;
    ternary r223 r195 r206 into r230;
    ternary r223 r196 r207 into r231;
    ternary r222 r202 r230 into r232;
    ternary r222 r203 r231 into r233;
    ternary r224 r195 r210 into r234;
    ternary r224 r196 r211 into r235;
    ternary r223 r206 r234 into r236;
    ternary r223 r207 r235 into r237;
    ternary r225 r195 r214 into r238;
    ternary r225 r196 r215 into r239;
    ternary r224 r210 r238 into r240;
    ternary r224 r211 r239 into r241;
    ternary r226 r195 r218 into r242;
    ternary r226 r196 r219 into r243;
    ternary r225 r214 r242 into r244;
    ternary r225 r215 r243 into r245;
    ternary r227 r195 r220 into r246;
    ternary r227 r196 r221 into r247;
    ternary r226 r218 r246 into r248;
    ternary r226 r219 r247 into r249;
    ternary r227 r220 r195 into r250;
    ternary r227 r221 r196 into r251;
    ternary r39 r17.player3[0u32] 0u8 into r252;
    ternary r39 r17.player3[1u32] 0u8 into r253;
    div r252 13u8 into r254;
    rem r252 13u8 into r255;
    div r253 13u8 into r256;
    rem r253 13u8 into r257;
    lt r255 r112 into r258;
    lt r255 r117 into r259;
    lt r255 r122 into r260;
    lt r255 r127 into r261;
    lt r255 r129 into r262;
    ternary r258 r254 r111 into r263;
    ternary r258 r255 r112 into r264;
    ternary r259 r254 r116 into r265;
    ternary r259 r255 r117 into r266;
    ternary r258 r111 r265 into r267;
    ternary r258 r112 r266 into r268;
    ternary r260 r254 r121 into r269;
    ternary r260 r255 r122 into r270;
    ternary r259 r116 r269 into r271;
    ternary r259 r117 r270 into r272;
    ternary r261 r254 r126 into r273;
    ternary r261 r255 r127 into r274;
    ternary r260 r121 r273 into r275;
    ternary r260 r122 r274 into r276;
    ternary r262 r254 r128 into r277;
    ternary r262 r255 r129 into r278;
    ternary r261 r126 r277 into r279;
    ternary r261 r127 r278 into r280;
    ternary r262 r128 r254 into r281;
    ternary r262 r129 r255 into r282;
    lt r257 r264 into r283;
    lt r257 r268 into r284;
    lt r257 r272 into r285;
    lt r257 r276 into r286;
    lt r257 r280 into r287;
    lt r257 r282 into r288;
    ternary r283 r256 r263 into r289;
    ternary r283 r257 r264 into r290;
    ternary r284 r256 r267 into r291;
    ternary r284 r257 r268 into r292;
    ternary r283 r263 r291 into r293;
    ternary r283 r264 r292 into r294;
    ternary r285 r256 r271 into r295;
    ternary r285 r257 r272 into r296;
    ternary r284 r267 r295 into r297;
    ternary r284 r268 r296 into r298;
    ternary r286 r256 r275 into r299;
    ternary r286 r257 r276 into r300;
    ternary r285 r271 r299 into r301;
    ternary r285 r272 r300 into r302;
    ternary r287 r256 r279 into r303;
    ternary r287 r257 r280 into r304;
    ternary r286 r275 r303 into r305;
    ternary r286 r276 r304 into r306;
    ternary r288 r256 r281 into r307;
    ternary r288 r257 r282 into r308;
    ternary r287 r279 r307 into r309;
    ternary r287 r280 r308 into r310;
    ternary r288 r281 r256 into r311;
    ternary r288 r282 r257 into r312;
    is.eq r168 r172 into r313;
    is.eq r172 r176 into r314;
    is.eq r176 r180 into r315;
    is.eq r180 r184 into r316;
    is.eq r184 r188 into r317;
    is.eq r188 r190 into r318;
    and r313 r314 into r319;
    and r319 r315 into r320;
    and r314 r315 into r321;
    and r321 r316 into r322;
    and r315 r316 into r323;
    and r323 r317 into r324;
    and r316 r317 into r325;
    and r325 r318 into r326;
    or r320 r322 into r327;
    or r327 r324 into r328;
    or r328 r326 into r329;
    ternary r322 r184 r180 into r330;
    ternary r324 r188 r330 into r331;
    ternary r326 r190 r331 into r332;
    ternary r326 r176 r190 into r333;
    and r317 r318 into r334;
    or r319 r321 into r335;
    or r335 r323 into r336;
    or r336 r325 into r337;
    or r337 r334 into r338;
    ternary r321 r180 r176 into r339;
    ternary r323 r184 r339 into r340;
    ternary r325 r188 r340 into r341;
    ternary r334 r190 r341 into r342;
    not r319 into r343;
    and r313 r343 into r344;
    and r314 r343 into r345;
    not r321 into r346;
    and r345 r346 into r347;
    and r315 r346 into r348;
    not r323 into r349;
    and r348 r349 into r350;
    and r316 r349 into r351;
    not r325 into r352;
    and r351 r352 into r353;
    and r317 r352 into r354;
    not r334 into r355;
    and r354 r355 into r356;
    and r318 r355 into r357;
    or r344 r347 into r358;
    or r358 r350 into r359;
    or r359 r353 into r360;
    or r360 r356 into r361;
    or r361 r357 into r362;
    ternary r347 r176 r172 into r363;
    ternary r350 r180 r363 into r364;
    ternary r353 r184 r364 into r365;
    ternary r356 r188 r365 into r366;
    ternary r357 r190 r366 into r367;
    and r338 r362 into r368;
    not r362 into r369;
    and r338 r369 into r370;
    not r338 into r371;
    and r362 r371 into r372;
    is.eq r167 0u8 into r373;
    cast r373 into r374 as u8;
    is.eq r171 0u8 into r375;
    cast r375 into r376 as u8;
    add r374 r376 into r377;
    is.eq r175 0u8 into r378;
    cast r378 into r379 as u8;
    add r377 r379 into r380;
    is.eq r179 0u8 into r381;
    cast r381 into r382 as u8;
    add r380 r382 into r383;
    is.eq r183 0u8 into r384;
    cast r384 into r385 as u8;
    add r383 r385 into r386;
    is.eq r187 0u8 into r387;
    cast r387 into r388 as u8;
    add r386 r388 into r389;
    is.eq r189 0u8 into r390;
    cast r390 into r391 as u8;
    add r389 r391 into r392;
    gte r392 5u8 into r393;
    is.eq r167 1u8 into r394;
    cast r394 into r395 as u8;
    is.eq r171 1u8 into r396;
    cast r396 into r397 as u8;
    add r395 r397 into r398;
    is.eq r175 1u8 into r399;
    cast r399 into r400 as u8;
    add r398 r400 into r401;
    is.eq r179 1u8 into r402;
    cast r402 into r403 as u8;
    add r401 r403 into r404;
    is.eq r183 1u8 into r405;
    cast r405 into r406 as u8;
    add r404 r406 into r407;
    is.eq r187 1u8 into r408;
    cast r408 into r409 as u8;
    add r407 r409 into r410;
    is.eq r189 1u8 into r411;
    cast r411 into r412 as u8;
    add r410 r412 into r413;
    gte r413 5u8 into r414;
    is.eq r167 2u8 into r415;
    cast r415 into r416 as u8;
    is.eq r171 2u8 into r417;
    cast r417 into r418 as u8;
    add r416 r418 into r419;
    is.eq r175 2u8 into r420;
    cast r420 into r421 as u8;
    add r419 r421 into r422;
    is.eq r179 2u8 into r423;
    cast r423 into r424 as u8;
    add r422 r424 into r425;
    is.eq r183 2u8 into r426;
    cast r426 into r427 as u8;
    add r425 r427 into r428;
    is.eq r187 2u8 into r429;
    cast r429 into r430 as u8;
    add r428 r430 into r431;
    is.eq r189 2u8 into r432;
    cast r432 into r433 as u8;
    add r431 r433 into r434;
    gte r434 5u8 into r435;
    is.eq r167 3u8 into r436;
    cast r436 into r437 as u8;
    is.eq r171 3u8 into r438;
    cast r438 into r439 as u8;
    add r437 r439 into r440;
    is.eq r175 3u8 into r441;
    cast r441 into r442 as u8;
    add r440 r442 into r443;
    is.eq r179 3u8 into r444;
    cast r444 into r445 as u8;
    add r443 r445 into r446;
    is.eq r183 3u8 into r447;
    cast r447 into r448 as u8;
    add r446 r448 into r449;
    is.eq r187 3u8 into r450;
    cast r450 into r451 as u8;
    add r449 r451 into r452;
    is.eq r189 3u8 into r453;
    cast r453 into r454 as u8;
    add r452 r454 into r455;
    gte r455 5u8 into r456;
    or r393 r414 into r457;
    or r457 r435 into r458;
    or r458 r456 into r459;
    ternary r414 1u8 0u8 into r460;
    ternary r435 2u8 r460 into r461;
    ternary r456 3u8 r461 into r462;
    cast r168 into r463 as u32;
    shl 1u32 r463 into r464;
    cast r172 into r465 as u32;
    shl 1u32 r465 into r466;
    or r464 r466 into r467;
    cast r176 into r468 as u32;
    shl 1u32 r468 into r469;
    or r467 r469 into r470;
    cast r180 into r471 as u32;
    shl 1u32 r471 into r472;
    or r470 r472 into r473;
    cast r184 into r474 as u32;
    shl 1u32 r474 into r475;
    or r473 r475 into r476;
    cast r188 into r477 as u32;
    shl 1u32 r477 into r478;
    or r476 r478 into r479;
    cast r190 into r480 as u32;
    shl 1u32 r480 into r481;
    or r479 r481 into r482;
    is.eq r167 r462 into r483;
    cast r168 into r484 as u32;
    shl 1u32 r484 into r485;
    ternary r483 r485 0u32 into r486;
    is.eq r171 r462 into r487;
    cast r172 into r488 as u32;
    shl 1u32 r488 into r489;
    ternary r487 r489 0u32 into r490;
    or r486 r490 into r491;
    is.eq r175 r462 into r492;
    cast r176 into r493 as u32;
    shl 1u32 r493 into r494;
    ternary r492 r494 0u32 into r495;
    or r491 r495 into r496;
    is.eq r179 r462 into r497;
    cast r180 into r498 as u32;
    shl 1u32 r498 into r499;
    ternary r497 r499 0u32 into r500;
    or r496 r500 into r501;
    is.eq r183 r462 into r502;
    cast r184 into r503 as u32;
    shl 1u32 r503 into r504;
    ternary r502 r504 0u32 into r505;
    or r501 r505 into r506;
    is.eq r187 r462 into r507;
    cast r188 into r508 as u32;
    shl 1u32 r508 into r509;
    ternary r507 r509 0u32 into r510;
    or r506 r510 into r511;
    is.eq r189 r462 into r512;
    cast r190 into r513 as u32;
    shl 1u32 r513 into r514;
    ternary r512 r514 0u32 into r515;
    or r511 r515 into r516;
    shl r516 16u32 into r517;
    or r517 r482 into r518;
    shl r518 1u32 into r519;
    shr r519 13u32 into r520;
    and r520 65537u32 into r521;
    or r519 r521 into r522;
    shr.w r522 1u32 into r523;
    and r522 r523 into r524;
    shr.w r522 2u32 into r525;
    and r524 r525 into r526;
    shr.w r522 3u32 into r527;
    and r526 r527 into r528;
    shr.w r522 4u32 into r529;
    and r528 r529 into r530;
    is.neq r530 0u32 into r531;
    shr r530 16u32 into r532;
    is.neq r532 0u32 into r533;
    cast r344 into r534 as u8;
    cast r347 into r535 as u8;
    add r534 r535 into r536;
    cast r350 into r537 as u8;
    add r536 r537 into r538;
    cast r353 into r539 as u8;
    add r538 r539 into r540;
    cast r356 into r541 as u8;
    add r540 r541 into r542;
    cast r357 into r543 as u8;
    add r542 r543 into r544;
    gte r544 2u8 into r545;
    not r357 into r546;
    not r356 into r547;
    not r353 into r548;
    and r356 r546 into r549;
    and r353 r547 into r550;
    and r550 r546 into r551;
    ternary r551 r184 r364 into r552;
    ternary r549 r188 r552 into r553;
    not r350 into r554;
    not r347 into r555;
    ternary r555 r176 r172 into r556;
    ternary r554 r180 r556 into r557;
    ternary r548 r184 r557 into r558;
    ternary r547 r188 r558 into r559;
    ternary r546 r190 r559 into r560;
    ternary r334 r180 r190 into r561;
    ternary r325 r176 r188 into r562;
    ternary r334 r176 r562 into r563;
    ternary r357 r184 r190 into r564;
    ternary r356 r180 r188 into r565;
    ternary r357 r180 r565 into r566;
    ternary r353 r176 r184 into r567;
    ternary r356 r176 r567 into r568;
    ternary r357 r176 r568 into r569;
    or 2415919104u32 r530 into r570;
    cast r332 into r571 as u32;
    shl r571 4u8 into r572;
    or 2147483648u32 r572 into r573;
    cast r333 into r574 as u32;
    or r573 r574 into r575;
    cast r342 into r576 as u32;
    shl r576 4u8 into r577;
    or 1879048192u32 r577 into r578;
    cast r367 into r579 as u32;
    or r578 r579 into r580;
    or 1610612736u32 r516 into r581;
    or 1342177280u32 r530 into r582;
    cast r342 into r583 as u32;
    shl r583 8u8 into r584;
    or 1073741824u32 r584 into r585;
    cast r561 into r586 as u32;
    shl r586 4u8 into r587;
    or r585 r587 into r588;
    cast r563 into r589 as u32;
    or r588 r589 into r590;
    cast r367 into r591 as u32;
    shl r591 8u8 into r592;
    or 805306368u32 r592 into r593;
    cast r553 into r594 as u32;
    shl r594 4u8 into r595;
    or r593 r595 into r596;
    cast r560 into r597 as u32;
    or r596 r597 into r598;
    cast r367 into r599 as u32;
    shl r599 12u8 into r600;
    or 536870912u32 r600 into r601;
    cast r564 into r602 as u32;
    shl r602 8u8 into r603;
    or r601 r603 into r604;
    cast r566 into r605 as u32;
    shl r605 4u8 into r606;
    or r604 r606 into r607;
    cast r569 into r608 as u32;
    or r607 r608 into r609;
    cast r190 into r610 as u32;
    shl r610 16u8 into r611;
    or 268435456u32 r611 into r612;
    cast r188 into r613 as u32;
    shl r613 12u8 into r614;
    or r612 r614 into r615;
    cast r184 into r616 as u32;
    shl r616 8u8 into r617;
    or r615 r617 into r618;
    cast r180 into r619 as u32;
    shl r619 4u8 into r620;
    or r618 r620 into r621;
    cast r176 into r622 as u32;
    or r621 r622 into r623;
    ternary r372 r609 r623 into r624;
    ternary r545 r598 r624 into r625;
    ternary r370 r590 r625 into r626;
    ternary r531 r582 r626 into r627;
    ternary r459 r581 r627 into r628;
    ternary r368 r580 r628 into r629;
    ternary r329 r575 r629 into r630;
    ternary r533 r570 r630 into r631;
    is.eq r229 r233 into r632;
    is.eq r233 r237 into r633;
    is.eq r237 r241 into r634;
    is.eq r241 r245 into r635;
    is.eq r245 r249 into r636;
    is.eq r249 r251 into r637;
    and r632 r633 into r638;
    and r638 r634 into r639;
    and r633 r634 into r640;
    and r640 r635 into r641;
    and r634 r635 into r642;
    and r642 r636 into r643;
    and r635 r636 into r644;
    and r644 r637 into r645;
    or r639 r641 into r646;
    or r646 r643 into r647;
    or r647 r645 into r648;
    ternary r641 r245 r241 into r649;
    ternary r643 r249 r649 into r650;
    ternary r645 r251 r650 into r651;
    ternary r645 r237 r251 into r652;
    and r636 r637 into r653;
    or r638 r640 into r654;
    or r654 r642 into r655;
    or r655 r644 into r656;
    or r656 r653 into r657;
    ternary r640 r241 r237 into r658;
    ternary r642 r245 r658 into r659;
    ternary r644 r249 r659 into r660;
    ternary r653 r251 r660 into r661;
    not r638 into r662;
    and r632 r662 into r663;
    and r633 r662 into r664;
    not r640 into r665;
    and r664 r665 into r666;
    and r634 r665 into r667;
    not r642 into r668;
    and r667 r668 into r669;
    and r635 r668 into r670;
    not r644 into r671;
    and r670 r671 into r672;
    and r636 r671 into r673;
    not r653 into r674;
    and r673 r674 into r675;
    and r637 r674 into r676;
    or r663 r666 into r677;
    or r677 r669 into r678;
    or r678 r672 into r679;
    or r679 r675 into r680;
    or r680 r676 into r681;
    ternary r666 r237 r233 into r682;
    ternary r669 r241 r682 into r683;
    ternary r672 r245 r683 into r684;
    ternary r675 r249 r684 into r685;
    ternary r676 r251 r685 into r686;
    and r657 r681 into r687;
    not r681 into r688;
    and r657 r688 into r689;
    not r657 into r690;
    and r681 r690 into r691;
    is.eq r228 0u8 into r692;
    cast r692 into r693 as u8;
    is.eq r232 0u8 into r694;
    cast r694 into r695 as u8;
    add r693 r695 into r696;
    is.eq r236 0u8 into r697;
    cast r697 into r698 as u8;
    add r696 r698 into r699;
    is.eq r240 0u8 into r700;
    cast r700 into r701 as u8;
    add r699 r701 into r702;
    is.eq r244 0u8 into r703;
    cast r703 into r704 as u8;
    add r702 r704 into r705;
    is.eq r248 0u8 into r706;
    cast r706 into r707 as u8;
    add r705 r707 into r708;
    is.eq r250 0u8 into r709;
    cast r709 into r710 as u8;
    add r708 r710 into r711;
    gte r711 5u8 into r712;
    is.eq r228 1u8 into r713;
    cast r713 into r714 as u8;
    is.eq r232 1u8 into r715;
    cast r715 into r716 as u8;
    add r714 r716 into r717;
    is.eq r236 1u8 into r718;
    cast r718 into r719 as u8;
    add r717 r719 into r720;
    is.eq r240 1u8 into r721;
    cast r721 into r722 as u8;
    add r720 r722 into r723;
    is.eq r244 1u8 into r724;
    cast r724 into r725 as u8;
    add r723 r725 into r726;
    is.eq r248 1u8 into r727;
    cast r727 into r728 as u8;
    add r726 r728 into r729;
    is.eq r250 1u8 into r730;
    cast r730 into r731 as u8;
    add r729 r731 into r732;
    gte r732 5u8 into r733;
    is.eq r228 2u8 into r734;
    cast r734 into r735 as u8;
    is.eq r232 2u8 into r736;
    cast r736 into r737 as u8;
    add r735 r737 into r738;
    is.eq r236 2u8 into r739;
    cast r739 into r740 as u8;
    add r738 r740 into r741;
    is.eq r240 2u8 into r742;
    cast r742 into r743 as u8;
    add r741 r743 into r744;
    is.eq r244 2u8 into r745;
    cast r745 into r746 as u8;
    add r744 r746 into r747;
    is.eq r248 2u8 into r748;
    cast r748 into r749 as u8;
    add r747 r749 into r750;
    is.eq r250 2u8 into r751;
    cast r751 into r752 as u8;
    add r750 r752 into r753;
    gte r753 5u8 into r754;
    is.eq r228 3u8 into r755;
    cast r755 into r756 as u8;
    is.eq r232 3u8 into r757;
    cast r757 into r758 as u8;
    add r756 r758 into r759;
    is.eq r236 3u8 into r760;
    cast r760 into r761 as u8;
    add r759 r761 into r762;
    is.eq r240 3u8 into r763;
    cast r763 into r764 as u8;
    add r762 r764 into r765;
    is.eq r244 3u8 into r766;
    cast r766 into r767 as u8;
    add r765 r767 into r768;
    is.eq r248 3u8 into r769;
    cast r769 into r770 as u8;
    add r768 r770 into r771;
    is.eq r250 3u8 into r772;
    cast r772 into r773 as u8;
    add r771 r773 into r774;
    gte r774 5u8 into r775;
    or r712 r733 into r776;
    or r776 r754 into r777;
    or r777 r775 into r778;
    ternary r733 1u8 0u8 into r779;
    ternary r754 2u8 r779 into r780;
    ternary r775 3u8 r780 into r781;
    cast r229 into r782 as u32;
    shl 1u32 r782 into r783;
    cast r233 into r784 as u32;
    shl 1u32 r784 into r785;
    or r783 r785 into r786;
    cast r237 into r787 as u32;
    shl 1u32 r787 into r788;
    or r786 r788 into r789;
    cast r241 into r790 as u32;
    shl 1u32 r790 into r791;
    or r789 r791 into r792;
    cast r245 into r793 as u32;
    shl 1u32 r793 into r794;
    or r792 r794 into r795;
    cast r249 into r796 as u32;
    shl 1u32 r796 into r797;
    or r795 r797 into r798;
    cast r251 into r799 as u32;
    shl 1u32 r799 into r800;
    or r798 r800 into r801;
    is.eq r228 r781 into r802;
    cast r229 into r803 as u32;
    shl 1u32 r803 into r804;
    ternary r802 r804 0u32 into r805;
    is.eq r232 r781 into r806;
    cast r233 into r807 as u32;
    shl 1u32 r807 into r808;
    ternary r806 r808 0u32 into r809;
    or r805 r809 into r810;
    is.eq r236 r781 into r811;
    cast r237 into r812 as u32;
    shl 1u32 r812 into r813;
    ternary r811 r813 0u32 into r814;
    or r810 r814 into r815;
    is.eq r240 r781 into r816;
    cast r241 into r817 as u32;
    shl 1u32 r817 into r818;
    ternary r816 r818 0u32 into r819;
    or r815 r819 into r820;
    is.eq r244 r781 into r821;
    cast r245 into r822 as u32;
    shl 1u32 r822 into r823;
    ternary r821 r823 0u32 into r824;
    or r820 r824 into r825;
    is.eq r248 r781 into r826;
    cast r249 into r827 as u32;
    shl 1u32 r827 into r828;
    ternary r826 r828 0u32 into r829;
    or r825 r829 into r830;
    is.eq r250 r781 into r831;
    cast r251 into r832 as u32;
    shl 1u32 r832 into r833;
    ternary r831 r833 0u32 into r834;
    or r830 r834 into r835;
    shl r835 16u32 into r836;
    or r836 r801 into r837;
    shl r837 1u32 into r838;
    shr r838 13u32 into r839;
    and r839 65537u32 into r840;
    or r838 r840 into r841;
    shr.w r841 1u32 into r842;
    and r841 r842 into r843;
    shr.w r841 2u32 into r844;
    and r843 r844 into r845;
    shr.w r841 3u32 into r846;
    and r845 r846 into r847;
    shr.w r841 4u32 into r848;
    and r847 r848 into r849;
    is.neq r849 0u32 into r850;
    shr r849 16u32 into r851;
    is.neq r851 0u32 into r852;
    cast r663 into r853 as u8;
    cast r666 into r854 as u8;
    add r853 r854 into r855;
    cast r669 into r856 as u8;
    add r855 r856 into r857;
    cast r672 into r858 as u8;
    add r857 r858 into r859;
    cast r675 into r860 as u8;
    add r859 r860 into r861;
    cast r676 into r862 as u8;
    add r861 r862 into r863;
    gte r863 2u8 into r864;
    not r676 into r865;
    not r675 into r866;
    not r672 into r867;
    and r675 r865 into r868;
    and r672 r866 into r869;
    and r869 r865 into r870;
    ternary r870 r245 r683 into r871;
    ternary r868 r249 r871 into r872;
    not r669 into r873;
    not r666 into r874;
    ternary r874 r237 r233 into r875;
    ternary r873 r241 r875 into r876;
    ternary r867 r245 r876 into r877;
    ternary r866 r249 r877 into r878;
    ternary r865 r251 r878 into r879;
    ternary r653 r241 r251 into r880;
    ternary r644 r237 r249 into r881;
    ternary r653 r237 r881 into r882;
    ternary r676 r245 r251 into r883;
    ternary r675 r241 r249 into r884;
    ternary r676 r241 r884 into r885;
    ternary r672 r237 r245 into r886;
    ternary r675 r237 r886 into r887;
    ternary r676 r237 r887 into r888;
    or 2415919104u32 r849 into r889;
    cast r651 into r890 as u32;
    shl r890 4u8 into r891;
    or 2147483648u32 r891 into r892;
    cast r652 into r893 as u32;
    or r892 r893 into r894;
    cast r661 into r895 as u32;
    shl r895 4u8 into r896;
    or 1879048192u32 r896 into r897;
    cast r686 into r898 as u32;
    or r897 r898 into r899;
    or 1610612736u32 r835 into r900;
    or 1342177280u32 r849 into r901;
    cast r661 into r902 as u32;
    shl r902 8u8 into r903;
    or 1073741824u32 r903 into r904;
    cast r880 into r905 as u32;
    shl r905 4u8 into r906;
    or r904 r906 into r907;
    cast r882 into r908 as u32;
    or r907 r908 into r909;
    cast r686 into r910 as u32;
    shl r910 8u8 into r911;
    or 805306368u32 r911 into r912;
    cast r872 into r913 as u32;
    shl r913 4u8 into r914;
    or r912 r914 into r915;
    cast r879 into r916 as u32;
    or r915 r916 into r917;
    cast r686 into r918 as u32;
    shl r918 12u8 into r919;
    or 536870912u32 r919 into r920;
    cast r883 into r921 as u32;
    shl r921 8u8 into r922;
    or r920 r922 into r923;
    cast r885 into r924 as u32;
    shl r924 4u8 into r925;
    or r923 r925 into r926;
    cast r888 into r927 as u32;
    or r926 r927 into r928;
    cast r251 into r929 as u32;
    shl r929 16u8 into r930;
    or 268435456u32 r930 into r931;
    cast r249 into r932 as u32;
    shl r932 12u8 into r933;
    or r931 r933 into r934;
    cast r245 into r935 as u32;
    shl r935 8u8 into r936;
    or r934 r936 into r937;
    cast r241 into r938 as u32;
    shl r938 4u8 into r939;
    or r937 r939 into r940;
    cast r237 into r941 as u32;
    or r940 r941 into r942;
    ternary r691 r928 r942 into r943;
    ternary r864 r917 r943 into r944;
    ternary r689 r909 r944 into r945;
    ternary r850 r901 r945 into r946;
    ternary r778 r900 r946 into r947;
    ternary r687 r899 r947 into r948;
    ternary r648 r894 r948 into r949;
    ternary r852 r889 r949 into r950;
    is.eq r290 r294 into r951;
    is.eq r294 r298 into r952;
    is.eq r298 r302 into r953;
    is.eq r302 r306 into r954;
    is.eq r306 r310 into r955;
    is.eq r310 r312 into r956;
    and r951 r952 into r957;
    and r957 r953 into r958;
    and r952 r953 into r959;
    and r959 r954 into r960;
    and r953 r954 into r961;
    and r961 r955 into r962;
    and r954 r955 into r963;
    and r963 r956 into r964;
    or r958 r960 into r965;
    or r965 r962 into r966;
    or r966 r964 into r967;
    ternary r960 r306 r302 into r968;
    ternary r962 r310 r968 into r969;
    ternary r964 r312 r969 into r970;
    ternary r964 r298 r312 into r971;
    and r955 r956 into r972;
    or r957 r959 into r973;
    or r973 r961 into r974;
    or r974 r963 into r975;
    or r975 r972 into r976;
    ternary r959 r302 r298 into r977;
    ternary r961 r306 r977 into r978;
    ternary r963 r310 r978 into r979;
    ternary r972 r312 r979 into r980;
    not r957 into r981;
    and r951 r981 into r982;
    and r952 r981 into r983;
    not r959 into r984;
    and r983 r984 into r985;
    and r953 r984 into r986;
    not r961 into r987;
    and r986 r987 into r988;
    and r954 r987 into r989;
    not r963 into r990;
    and r989 r990 into r991;
    and r955 r990 into r992;
    not r972 into r993;
    and r992 r993 into r994;
    and r956 r993 into r995;
    or r982 r985 into r996;
    or r996 r988 into r997;
    or r997 r991 into r998;
    or r998 r994 into r999;
    or r999 r995 into r1000;
    ternary r985 r298 r294 into r1001;
    ternary r988 r302 r1001 into r1002;
    ternary r991 r306 r1002 into r1003;
    ternary r994 r310 r1003 into r1004;
    ternary r995 r312 r1004 into r1005;
    and r976 r1000 into r1006;
    not r1000 into r1007;
    and r976 r1007 into r1008;
    not r976 into r1009;
    and r1000 r1009 into r1010;
    is.eq r289 0u8 into r1011;
    cast r1011 into r1012 as u8;
    is.eq r293 0u8 into r1013;
    cast r1013 into r1014 as u8;
    add r1012 r1014 into r1015;
    is.eq r297 0u8 into r1016;
    cast r1016 into r1017 as u8;
    add r1015 r1017 into r1018;
    is.eq r301 0u8 into r1019;
    cast r1019 into r1020 as u8;
    add r1018 r1020 into r1021;
    is.eq r305 0u8 into r1022;
    cast r1022 into r1023 as u8;
    add r1021 r1023 into r1024;
    is.eq r309 0u8 into r1025;
    cast r1025 into r1026 as u8;
    add r1024 r1026 into r1027;
    is.eq r311 0u8 into r1028;
    cast r1028 into r1029 as u8;
    add r1027 r1029 into r1030;
    gte r1030 5u8 into r1031;
    is.eq r289 1u8 into r1032;
    cast r1032 into r1033 as u8;
    is.eq r293 1u8 into r1034;
    cast r1034 into r1035 as u8;
    add r1033 r1035 into r1036;
    is.eq r297 1u8 into r1037;
    cast r1037 into r1038 as u8;
    add r1036 r1038 into r1039;
    is.eq r301 1u8 into r1040;
    cast r1040 into r1041 as u8;
    add r1039 r1041 into r1042;
    is.eq r305 1u8 into r1043;
    cast r1043 into r1044 as u8;
    add r1042 r1044 into r1045;
    is.eq r309 1u8 into r1046;
    cast r1046 into r1047 as u8;
    add r1045 r1047 into r1048;
    is.eq r311 1u8 into r1049;
    cast r1049 into r1050 as u8;
    add r1048 r1050 into r1051;
    gte r1051 5u8 into r1052;
    is.eq r289 2u8 into r1053;
    cast r1053 into r1054 as u8;
    is.eq r293 2u8 into r1055;
    cast r1055 into r1056 as u8;
    add r1054 r1056 into r1057;
    is.eq r297 2u8 into r1058;
    cast r1058 into r1059 as u8;
    add r1057 r1059 into r1060;
    is.eq r301 2u8 into r1061;
    cast r1061 into r1062 as u8;
    add r1060 r1062 into r1063;
    is.eq r305 2u8 into r1064;
    cast r1064 into r1065 as u8;
    add r1063 r1065 into r1066;
    is.eq r309 2u8 into r1067;
    cast r1067 into r1068 as u8;
    add r1066 r1068 into r1069;
    is.eq r311 2u8 into r1070;
    cast r1070 into r1071 as u8;
    add r1069 r1071 into r1072;
    gte r1072 5u8 into r1073;
    is.eq r289 3u8 into r1074;
    cast r1074 into r1075 as u8;
    is.eq r293 3u8 into r1076;
    cast r1076 into r1077 as u8;
    add r1075 r1077 into r1078;
    is.eq r297 3u8 into r1079;
    cast r1079 into r1080 as u8;
    add r1078 r1080 into r1081;
    is.eq r301 3u8 into r1082;
    cast r1082 into r1083 as u8;
    add r1081 r1083 into r1084;
    is.eq r305 3u8 into r1085;
    cast r1085 into r1086 as u8;
    add r1084 r1086 into r1087;
    is.eq r309 3u8 into r1088;
    cast r1088 into r1089 as u8;
    add r1087 r1089 into r1090;
    is.eq r311 3u8 into r1091;
    cast r1091 into r1092 as u8;
    add r1090 r1092 into r1093;
    gte r1093 5u8 into r1094;
    or r1031 r1052 into r1095;
    or r1095 r1073 into r1096;
    or r1096 r1094 into r1097;
    ternary r1052 1u8 0u8 into r1098;
    ternary r1073 2u8 r1098 into r1099;
    ternary r1094 3u8 r1099 into r1100;
    cast r290 into r1101 as u32;
    shl 1u32 r1101 into r1102;
    cast r294 into r1103 as u32;
    shl 1u32 r1103 into r1104;
    or r1102 r1104 into r1105;
    cast r298 into r1106 as u32;
    shl 1u32 r1106 into r1107;
    or r1105 r1107 into r1108;
    cast r302 into r1109 as u32;
    shl 1u32 r1109 into r1110;
    or r1108 r1110 into r1111;
    cast r306 into r1112 as u32;
    shl 1u32 r1112 into r1113;
    or r1111 r1113 into r1114;
    cast r310 into r1115 as u32;
    shl 1u32 r1115 into r1116;
    or r1114 r1116 into r1117;
    cast r312 into r1118 as u32;
    shl 1u32 r1118 into r1119;
    or r1117 r1119 into r1120;
    is.eq r289 r1100 into r1121;
    cast r290 into r1122 as u32;
    shl 1u32 r1122 into r1123;
    ternary r1121 r1123 0u32 into r1124;
    is.eq r293 r1100 into r1125;
    cast r294 into r1126 as u32;
    shl 1u32 r1126 into r1127;
    ternary r1125 r1127 0u32 into r1128;
    or r1124 r1128 into r1129;
    is.eq r297 r1100 into r1130;
    cast r298 into r1131 as u32;
    shl 1u32 r1131 into r1132;
    ternary r1130 r1132 0u32 into r1133;
    or r1129 r1133 into r1134;
    is.eq r301 r1100 into r1135;
    cast r302 into r1136 as u32;
    shl 1u32 r1136 into r1137;
    ternary r1135 r1137 0u32 into r1138;
    or r1134 r1138 into r1139;
    is.eq r305 r1100 into r1140;
    cast r306 into r1141 as u32;
    shl 1u32 r1141 into r1142;
    ternary r1140 r1142 0u32 into r1143;
    or r1139 r1143 into r1144;
    is.eq r309 r1100 into r1145;
    cast r310 into r1146 as u32;
    shl 1u32 r1146 into r1147;
    ternary r1145 r1147 0u32 into r1148;
    or r1144 r1148 into r1149;
    is.eq r311 r1100 into r1150;
    cast r312 into r1151 as u32;
    shl 1u32 r1151 into r1152;
    ternary r1150 r1152 0u32 into r1153;
    or r1149 r1153 into r1154;
    shl r1154 16u32 into r1155;
    or r1155 r1120 into r1156;
    shl r1156 1u32 into r1157;
    shr r1157 13u32 into r1158;
    and r1158 65537u32 into r1159;
    or r1157 r1159 into r1160;
    shr.w r1160 1u32 into r1161;
    and r1160 r1161 into r1162;
    shr.w r1160 2u32 into r1163;
    and r1162 r1163 into r1164;
    shr.w r1160 3u32 into r1165;
    and r1164 r1165 into r1166;
    shr.w r1160 4u32 into r1167;
    and r1166 r1167 into r1168;
    is.neq r1168 0u32 into r1169;
    shr r1168 16u32 into r1170;
    is.neq r1170 0u32 into r1171;
    cast r982 into r1172 as u8;
    cast r985 into r1173 as u8;
    add r1172 r1173 into r1174;
    cast r988 into r1175 as u8;
    add r1174 r1175 into r1176;
    cast r991 into r1177 as u8;
    add r1176 r1177 into r1178;
    cast r994 into r1179 as u8;
    add r1178 r1179 into r1180;
    cast r995 into r1181 as u8;
    add r1180 r1181 into r1182;
    gte r1182 2u8 into r1183;
    not r995 into r1184;
    not r994 into r1185;
    not r991 into r1186;
    and r994 r1184 into r1187;
    and r991 r1185 into r1188;
    and r1188 r1184 into r1189;
    ternary r1189 r306 r1002 into r1190;
    ternary r1187 r310 r1190 into r1191;
    not r988 into r1192;
    not r985 into r1193;
    ternary r1193 r298 r294 into r1194;
    ternary r1192 r302 r1194 into r1195;
    ternary r1186 r306 r1195 into r1196;
    ternary r1185 r310 r1196 into r1197;
    ternary r1184 r312 r1197 into r1198;
    ternary r972 r302 r312 into r1199;
    ternary r963 r298 r310 into r1200;
    ternary r972 r298 r1200 into r1201;
    ternary r995 r306 r312 into r1202;
    ternary r994 r302 r310 into r1203;
    ternary r995 r302 r1203 into r1204;
    ternary r991 r298 r306 into r1205;
    ternary r994 r298 r1205 into r1206;
    ternary r995 r298 r1206 into r1207;
    or 2415919104u32 r1168 into r1208;
    cast r970 into r1209 as u32;
    shl r1209 4u8 into r1210;
    or 2147483648u32 r1210 into r1211;
    cast r971 into r1212 as u32;
    or r1211 r1212 into r1213;
    cast r980 into r1214 as u32;
    shl r1214 4u8 into r1215;
    or 1879048192u32 r1215 into r1216;
    cast r1005 into r1217 as u32;
    or r1216 r1217 into r1218;
    or 1610612736u32 r1154 into r1219;
    or 1342177280u32 r1168 into r1220;
    cast r980 into r1221 as u32;
    shl r1221 8u8 into r1222;
    or 1073741824u32 r1222 into r1223;
    cast r1199 into r1224 as u32;
    shl r1224 4u8 into r1225;
    or r1223 r1225 into r1226;
    cast r1201 into r1227 as u32;
    or r1226 r1227 into r1228;
    cast r1005 into r1229 as u32;
    shl r1229 8u8 into r1230;
    or 805306368u32 r1230 into r1231;
    cast r1191 into r1232 as u32;
    shl r1232 4u8 into r1233;
    or r1231 r1233 into r1234;
    cast r1198 into r1235 as u32;
    or r1234 r1235 into r1236;
    cast r1005 into r1237 as u32;
    shl r1237 12u8 into r1238;
    or 536870912u32 r1238 into r1239;
    cast r1202 into r1240 as u32;
    shl r1240 8u8 into r1241;
    or r1239 r1241 into r1242;
    cast r1204 into r1243 as u32;
    shl r1243 4u8 into r1244;
    or r1242 r1244 into r1245;
    cast r1207 into r1246 as u32;
    or r1245 r1246 into r1247;
    cast r312 into r1248 as u32;
    shl r1248 16u8 into r1249;
    or 268435456u32 r1249 into r1250;
    cast r310 into r1251 as u32;
    shl r1251 12u8 into r1252;
    or r1250 r1252 into r1253;
    cast r306 into r1254 as u32;
    shl r1254 8u8 into r1255;
    or r1253 r1255 into r1256;
    cast r302 into r1257 as u32;
    shl r1257 4u8 into r1258;
    or r1256 r1258 into r1259;
    cast r298 into r1260 as u32;
    or r1259 r1260 into r1261;
    ternary r1010 r1247 r1261 into r1262;
    ternary r1183 r1236 r1262 into r1263;
    ternary r1008 r1228 r1263 into r1264;
    ternary r1169 r1220 r1264 into r1265;
    ternary r1097 r1219 r1265 into r1266;
    ternary r1006 r1218 r1266 into r1267;
    ternary r967 r1213 r1267 into r1268;
    ternary r1171 r1208 r1268 into r1269;
    lte r18.player1_bet r18.player2_bet into r1270;
    lte r18.player1_bet r18.player3_bet into r1271;
    and r1270 r1271 into r1272;
    lte r18.player2_bet r18.player3_bet into r1273;
    ternary r1273 r18.player2_bet r18.player3_bet into r1274;
    ternary r1272 r18.player1_bet r1274 into r1275;
    gte r18.player1_bet r18.player2_bet into r1276;
    gte r18.player1_bet r18.player3_bet into r1277;
    and r1276 r1277 into r1278;
    gte r18.player2_bet r18.player3_bet into r1279;
    ternary r1279 r18.player2_bet r18.player3_bet into r1280;
    ternary r1278 r18.player1_bet r1280 into r1281;
    is.neq r18.player1_bet r1275 into r1282;
    is.neq r18.player1_bet r1281 into r1283;
    and r1282 r1283 into r1284;
    is.neq r18.player2_bet r1275 into r1285;
    is.neq r18.player2_bet r1281 into r1286;
    and r1285 r1286 into r1287;
    ternary r1287 r18.player2_bet r18.player3_bet into r1288;
    ternary r1284 r18.player1_bet r1288 into r1289;
    gte r18.player1_bet r1275 into r1290;
    cast r1290 into r1291 as u8;
    gte r18.player2_bet r1275 into r1292;
    cast r1292 into r1293 as u8;
    add r1291 r1293 into r1294;
    gte r18.player3_bet r1275 into r1295;
    cast r1295 into r1296 as u8;
    add r1294 r1296 into r1297;
    gte r18.player1_bet r1289 into r1298;
    cast r1298 into r1299 as u8;
    gte r18.player2_bet r1289 into r1300;
    cast r1300 into r1301 as u8;
    add r1299 r1301 into r1302;
    gte r18.player3_bet r1289 into r1303;
    cast r1303 into r1304 as u8;
    add r1302 r1304 into r1305;
    gte r18.player1_bet r1281 into r1306;
    cast r1306 into r1307 as u8;
    gte r18.player2_bet r1281 into r1308;
    cast r1308 into r1309 as u8;
    add r1307 r1309 into r1310;
    gte r18.player3_bet r1281 into r1311;
    cast r1311 into r1312 as u8;
    add r1310 r1312 into r1313;
    cast r1297 into r1314 as u16;
    mul r1275 r1314 into r1315;
    is.eq r1275 r1289 into r1316;
    sub r1289 r1275 into r1317;
    cast r1305 into r1318 as u16;
    mul r1317 r1318 into r1319;
    ternary r1316 0u16 r1319 into r1320;
    is.eq r1289 r1281 into r1321;
    sub r1281 r1289 into r1322;
    cast r1313 into r1323 as u16;
    mul r1322 r1323 into r1324;
    ternary r1321 0u16 r1324 into r1325;
    gte r631 r950 into r1326;
    and r25 r1326 into r1327;
    gte r631 r1269 into r1328;
    and r1327 r1328 into r1329;
    gte r950 r631 into r1330;
    and r32 r1330 into r1331;
    gte r950 r1269 into r1332;
    and r1331 r1332 into r1333;
    gte r1269 r631 into r1334;
    and r39 r1334 into r1335;
    gte r1269 r950 into r1336;
    and r1335 r1336 into r1337;
    cast r1329 into r1338 as u8;
    cast r1333 into r1339 as u8;
    add r1338 r1339 into r1340;
    cast r1337 into r1341 as u8;
    add r1340 r1341 into r1342;
    cast r1342 into r1343 as u16;
    div r1315 r1343 into r1344;
    ternary r1329 r1344 0u16 into r1345;
    cast r1342 into r1346 as u16;
    div r1315 r1346 into r1347;
    ternary r1333 r1347 0u16 into r1348;
    cast r1342 into r1349 as u16;
    div r1315 r1349 into r1350;
    ternary r1337 r1350 0u16 into r1351;
    gte r18.player1_bet r1289 into r1352;
    and r25 r1352 into r1353;
    gte r18.player2_bet r1289 into r1354;
    and r32 r1354 into r1355;
    gte r18.player3_bet r1289 into r1356;
    and r39 r1356 into r1357;
    and r1329 r1353 into r1358;
    cast r1358 into r1359 as u8;
    and r1333 r1355 into r1360;
    cast r1360 into r1361 as u8;
    add r1359 r1361 into r1362;
    and r1337 r1357 into r1363;
    cast r1363 into r1364 as u8;
    add r1362 r1364 into r1365;
    gt r1365 0u8 into r1366;
    and r1358 r1366 into r1367;
    cast r1365 into r1368 as u16;
    div r1320 r1368 into r1369;
    ternary r1367 r1369 0u16 into r1370;
    and r1360 r1366 into r1371;
    cast r1365 into r1372 as u16;
    div r1320 r1372 into r1373;
    ternary r1371 r1373 0u16 into r1374;
    and r1363 r1366 into r1375;
    cast r1365 into r1376 as u16;
    div r1320 r1376 into r1377;
    ternary r1375 r1377 0u16 into r1378;
    gte r18.player1_bet r1281 into r1379;
    and r25 r1379 into r1380;
    gte r18.player2_bet r1281 into r1381;
    and r32 r1381 into r1382;
    gte r18.player3_bet r1281 into r1383;
    and r39 r1383 into r1384;
    and r1329 r1380 into r1385;
    cast r1385 into r1386 as u8;
    and r1333 r1382 into r1387;
    cast r1387 into r1388 as u8;
    add r1386 r1388 into r1389;
    and r1337 r1384 into r1390;
    cast r1390 into r1391 as u8;
    add r1389 r1391 into r1392;
    gt r1392 0u8 into r1393;
    and r1385 r1393 into r1394;
    cast r1392 into r1395 as u16;
    div r1325 r1395 into r1396;
    ternary r1394 r1396 0u16 into r1397;
    and r1387 r1393 into r1398;
    cast r1392 into r1399 as u16;
    div r1325 r1399 into r1400;
    ternary r1398 r1400 0u16 into r1401;
    and r1390 r1393 into r1402;
    cast r1392 into r1403 as u16;
    div r1325 r1403 into r1404;
    ternary r1402 r1404 0u16 into r1405;
    add r1345 r1370 into r1406;
    add r1406 r1397 into r1407;
    add r1348 r1374 into r1408;
    add r1408 r1401 into r1409;
    add r1351 r1378 into r1410;
    add r1410 r1405 into r1411;
    add r18.player1 r1407 into r1412;
    add r18.player2 r1409 into r1413;
    add r18.player3 r1411 into r1414;
    cast r1412 r1413 r1414 0u16 0u16 0u16 into r1415 as Chips;
    is.eq r1415.player1 0u16 into r1416;
    ternary r1416 1u8 0u8 into r1417;
    is.eq r1415.player2 0u16 into r1418;
    ternary r1418 2u8 0u8 into r1419;
    or r1417 r1419 into r1420;
    is.eq r1415.player3 0u16 into r1421;
    ternary r1421 4u8 0u8 into r1422;
    or r1420 r1422 into r1423;
    is.eq r1423 6u8 into r1424;
    is.eq r1423 5u8 into r1425;
    or r1424 r1425 into r1426;
    is.eq r1423 3u8 into r1427;
    or r1426 r1427 into r1428;
    branch.eq r1428 false to end_then_0_6;
    set r1415 into chips[r0];
    branch.eq true true to end_otherwise_0_7;
    position end_then_0_6;
    position end_otherwise_0_7;
    and r2.dealer_button 1u8 into r1429;
    is.neq r1429 0u8 into r1430;
    and r2.dealer_button 2u8 into r1431;
    is.neq r1431 0u8 into r1432;
    ternary r1432 4u8 1u8 into r1433;
    ternary r1430 2u8 r1433 into r1434;
    sub r2.remaining_hands 1u8 into r1435;
    is.eq r1435 0u8 into r1436;
    shl r2.sb 1u8 into r1437;
    shl r2.bb 1u8 into r1438;
    ternary r1436 r1437 r2.sb into r1439;
    ternary r1436 r1438 r2.bb into r1440;
    and r1423 1u8 into r1441;
    is.neq r1441 0u8 into r1442;
    not r1442 into r1443;
    and r1423 2u8 into r1444;
    is.neq r1444 0u8 into r1445;
    not r1445 into r1446;
    ternary r1446 31u8 32u8 into r1447;
    ternary r1443 30u8 r1447 into r1448;
    ternary r1436 10u8 r1435 into r1449;
    add r2.hands_played 1u8 into r1450;
    cast r2.player1 r2.player2 r2.player3 r2.buy_in r1448 r1434 r1423 r1423 0u8 r1439 r1440 r1449 r1450 0u16 into r1451 as Game;
    set r1415 into chips[r0];
    set r1451 into games[r0];

constructor:
    assert.eq edition 0u16;
